{
    "version": "https://jsonfeed.org/version/1",
    "title": "Joker • All posts by \"zookeeper\" category",
    "description": "",
    "home_page_url": "https://silvercrow42.github.io/joker.github.io",
    "items": [
        {
            "id": "https://silvercrow42.github.io/joker.github.io/2024/09/24/%E3%80%90Zookeeper%E3%80%91Zookeeper%E8%AF%A6%E8%A7%A3/",
            "url": "https://silvercrow42.github.io/joker.github.io/2024/09/24/%E3%80%90Zookeeper%E3%80%91Zookeeper%E8%AF%A6%E8%A7%A3/",
            "title": "【Zookeeper】Zookeeper详解",
            "date_published": "2024-09-24T03:39:53.000Z",
            "content_html": "<h2 id=\"什么是zookeeper\"><a class=\"markdownIt-Anchor\" href=\"#什么是zookeeper\">#</a> 什么是 Zookeeper</h2>\n<p>Zookeeper 是一个开源的主动协调服务，用于分布式应用程序，提供了诸如配置维护、域名服务、分布式同步、组服务等功能。它是一个为分布式应用提供一致性服务的软件，其内部使用了一种称为<br>\n Zab 的协议（在选举过程中使用 Paxos 协议）来保证分布式环境中不同节点之间的数据一致性。</p>\n<p>Zookeeper 的主要特点包括：</p>\n<ul>\n<li>高可用性：Zookeeper 可以构建为集群模式，通过多数派存活原则来保证服务的高可用性。</li>\n<li>顺序一致性：客户端请求按照发起顺序进行处理。</li>\n<li>原子性：所有事务要么全部成功，要么全部失败。</li>\n<li>单一视图：无论客户端连接到集群中的哪个服务器，看到的服务视图都是一样的。</li>\n<li>可靠性：一旦一个更新被应用并确认，该更新将一直有效，即使此时 Zookeeper 发生故障。</li>\n</ul>\n<p>Zookeeper 的应用场景：</p>\n<ul>\n<li>\n<p>数据发布与订阅</p>\n<p>顾名思义就是将数据发布到 ZooKeeper 节点上，供订阅者动态获取数据，实现配置信息的集中式管理和动态更新。例如全局的配置信息，地址列表等就非常适合使用。<br>\n数据发布 / 订阅的一个常见的场景是配置中心，发布者把数据发布到 ZooKeeper 的一个或一系列的节点上，供订阅者进行数据订阅，达到动态获取数据的目的。<br>\n配置信息一般有几个特点:</p>\n<ol>\n<li>数据量小的 KV</li>\n<li>数据内容在运行时会发生动态变化</li>\n<li>集群机器共享，配置一致</li>\n</ol>\n<p>ZooKeeper 采用的是推拉结合的方式。</p>\n<ol>\n<li>推：服务端会推给注册了监控节点的客户端 Wathcer 事件通知</li>\n<li>拉：客户端获得通知后，然后主动到服务端拉取最新的数据</li>\n</ol>\n</li>\n<li>\n<p>命名服务</p>\n<p>作为分布式命名服务，命名服务是指通过指定的名字来获取资源或者服务的地址，利用 ZooKeeper 创建一个全局的路径，这个路径就可以作为一个名字，指向集群中的集群，提供的服务的地址，或者一个远程的对象等等。统一命名服务的命名结构图如下所示：</p>\n<ol>\n<li>在分布式环境下，经常需要对应用 / 服务进行统一命名，便于识别不同服务。类似于域名与 IP 之间对应关系，IP 不容易记住，而域名容易记住。通过名称来获取资源或服务的地址，提供者等信息。</li>\n<li>按照层次结构组织服务 / 应用名称。可将服务名称以及地址信息写到 ZooKeeper 上，客户端通过 ZooKeeper 获取可用服务列表类。</li>\n</ol>\n</li>\n<li>\n<p>分布式锁</p>\n<p>处于不同节点上不同的服务，它们可能需要顺序的访问一些资源，这里需要一把分布式的锁。<br>\n分布式锁具有以下特性：写锁、读锁、时序锁。</p>\n<ul>\n<li>写锁：在 zk 上创建的一个临时的无编号的节点。由于是无序编号，在创建时不会自动编号，导致只能客户端有一个客户端得到锁，然后进行写入。</li>\n<li>读锁：在 zk 上创建一个临时的有编号的节点，这样即使下次有客户端加入是同时创建相同的节点时，他也会自动编号，也可以获得锁对象，然后对其进行读取。</li>\n<li>时序锁：在 zk 上创建的一个临时的有编号的节点根据编号的大小控制锁。</li>\n</ul>\n</li>\n<li>\n<p>集群管理</p>\n<p>所谓集群管理就是：是否有机器退出和加入、选举 master。<br>\n集群管理主要指集群监控和集群控制两个方面。前者侧重于集群运行时的状态的收集，后者则是对集群进行操作与控制。开发和运维中，面对集群，经常有如下需求:</p>\n<ol>\n<li>希望知道集群中究竟有多少机器在工作</li>\n<li>对集群中的每台机器的运行时状态进行数据收集</li>\n<li>对集群中机器进行上下线的操作</li>\n</ol>\n<p>集群管理结构如下所示：</p>\n<ol>\n<li>\n<p>分布式环境中，实时掌握每个节点的状态是必要的，可根据节点实时状态做出一些调整。</p>\n</li>\n<li>\n<p>可交由 ZooKeeper 实现。<br>\n可将节点信息写入 ZooKeeper 上的一个 Znode。<br>\n监听这个 Znode 可获取它的实时状态变化。</p>\n</li>\n<li>\n<p>典型应用</p>\n<p>Hbase 中 Master 状态监控与选举。<br>\n利用 ZooKeeper 的强一致性，能够保证在分布式高并发情况下节点创建的全局唯一性，即：同时有多个客户端请求创建<br>\n /currentMaster<br>\n 节点，最终一定只有一个客户端请求能够创建成功</p>\n</li>\n</ol>\n</li>\n<li>\n<p>分布式通知与协调</p>\n<ol>\n<li>分布式环境中，经常存在一个服务需要知道它所管理的子服务的状态。\n<ol>\n<li>NameNode 需知道各个 Datanode 的状态。</li>\n<li>JobTracker 需知道各个 TaskTracker 的状态。</li>\n</ol>\n</li>\n<li>心跳检测机制可通过 ZooKeeper 来实现。</li>\n<li>信息推送可由 ZooKeeper 来实现，ZooKeeper 相当于一个发布 / 订阅系统。</li>\n</ol>\n</li>\n<li>\n<p>分布式队列管理</p>\n<p>分布式队列分为两种：</p>\n<ol>\n<li>当一个队列的成员都聚齐时，这个队列才可用，否则一直等待所有成员到达，这种是同步队列。\n<ol>\n<li>一个 job 由多个 task 组成，只有所有任务完成后，job 才运行完成。</li>\n<li>可为 job 创建一个 /job 目录，然后在该目录下，为每个完成的 task 创建一个临时的 Znode，一旦临时节点数目达到 task 总数，则表明 job 运行完成。</li>\n</ol>\n</li>\n<li>队列按照 FIFO 方式进行入队和出队操作，例如实现生产者和消费者模型</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"znode\"><a class=\"markdownIt-Anchor\" href=\"#znode\">#</a> Znode</h2>\n<p>Znode 是 Zookeeper 中的基本数据结构，用于存储数据和组织数据结构。<br>\n每个 Znode 都有一个唯一的路径，路径类似于文件系统的路径，以 / 开头。</p>\n<p>Znode 的属性</p>\n<ul>\n<li>数据内容：\n<ul>\n<li>data：Znode 存储的数据内容，最大为 1MB。</li>\n</ul>\n</li>\n<li>ACL（Access Control List）：\n<ul>\n<li>权限控制列表：定义了对 Znode 的访问权限，包括读、写、创建子节点等权限。</li>\n</ul>\n</li>\n<li>版本信息：\n<ul>\n<li>version：Znode 的版本号，用于数据一致性检查。</li>\n<li>cversion：子节点的版本号。</li>\n<li>aversion：ACL 的版本号。</li>\n</ul>\n</li>\n<li>时间戳：\n<ul>\n<li>ctime：创建时间。</li>\n<li>mtime：最后修改时间。</li>\n</ul>\n</li>\n<li>子节点：\n<ul>\n<li>children：Znode 可以拥有子节点，形成树状结构。</li>\n</ul>\n</li>\n</ul>\n<p>Znode 的类型包括：</p>\n<ol>\n<li>\n<p>持久节点（Persistent）：持久节点在 ZooKeeper 服务器重启后不会丢失，除非显式删除。Java 创建示例如下：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zookeeper.create(<span class=\"string\">&quot;/path&quot;</span>, data, acl, CreateMode.PERSISTENT);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>临时节点（Ephemeral）：创建后，如果创建该节点的客户端会话断开，则自动删除。且其不能有子节点。Java 创建示例如下：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zookeeper.create(<span class=\"string\">&quot;/path&quot;</span>, data, acl, CreateMode.EPHEMERAL);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>顺序节点（Sequential）：</p>\n<ul>\n<li>\n<p>顺序节点在创建时自动获得一个唯一的序号，用于排序。例如，如果路径为 /path，创建的第一个顺序节点可能是<br>\n /path00000001。</p>\n</li>\n<li>\n<p>顺序节点也包含持久节点和临时节点两种持久化类型。</p>\n</li>\n</ul>\n<p>通过 Java 创建一个路径为 &quot;/path&quot; 的持久顺序节点示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zookeeper.create(<span class=\"string\">&quot;/path&quot;</span>, data, acl, CreateMode.PERSISTENT_SEQUENTIAL);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>默认情况下创建的 Znode 为持久节点类型。</p>\n<p>注意事项：</p>\n<ol>\n<li>创建节点时，必须要带上全路径。</li>\n<li>创建节点时，如果父节点不存在，ZooKeeper 会自动创建父节点。</li>\n<li>同一级节点 key 名称是唯一的。</li>\n<li>delete 命令只能一层一层删除，不能删除一个节点下的所有子节点。新版本可以通过 deleteall 命令递归删除。</li>\n</ol>\n<h2 id=\"watch机制\"><a class=\"markdownIt-Anchor\" href=\"#watch机制\">#</a> Watch 机制</h2>\n<h3 id=\"概述\"><a class=\"markdownIt-Anchor\" href=\"#概述\">#</a> 概述</h3>\n<p>ZooKeeper 的 watch 机制是一种非常重要的特性，用于实现实时监控 ZooKeeper 中的数据变化。<br>\n在 Spring Cloud 应用中，可以通过 Curator 框架结合 Spring Boot 来实现对 ZooKeeper 数据的监控。</p>\n<p><strong>基本概念</strong></p>\n<ul>\n<li>Watch：一种一次性触发的通知机制。</li>\n<li>Watcher：客户端注册的监听器，用于接收 ZooKeeper 的通知。</li>\n</ul>\n<p><strong>工作原理</strong></p>\n<ul>\n<li>注册 Watcher：客户端在执行某些操作（如获取节点数据、获取子节点列表等）时，可以注册一个 Watcher。</li>\n<li>触发 Watcher：当节点数据或子节点列表发生变化时，ZooKeeper 会触发相应的 Watcher。</li>\n<li>处理事件：客户端在收到 Watcher 触发的通知后，可以处理相应的事件，并重新注册 Watcher。</li>\n</ul>\n<p><strong>事件类型</strong></p>\n<ul>\n<li>NodeCreatedEvent：节点创建事件。</li>\n<li>NodeDeletedEvent：节点删除事件。</li>\n<li>NodeDataChangedEvent：节点数据变化事件。</li>\n<li>NodeChildrenChangedEvent：子节点列表变化事件。</li>\n</ul>\n<p><strong>使用场景</strong></p>\n<ul>\n<li>配置管理：在分布式系统中，配置管理需要实时监控配置的变化，以保持配置的实时一致性。</li>\n<li>监控服务：在分布式系统中，需要实时监控服务的状态，以确定服务的可用性。</li>\n<li>负载均衡：在分布式系统中，需要根据负载情况动态调整服务实例的数量，以实现负载均衡。</li>\n</ul>\n<h3 id=\"在-spring-cloud-应用中的使用方法\"><a class=\"markdownIt-Anchor\" href=\"#在-spring-cloud-应用中的使用方法\">#</a> 在 Spring Cloud 应用中的使用方法</h3>\n<h4 id=\"curator\"><a class=\"markdownIt-Anchor\" href=\"#curator\">#</a> Curator</h4>\n<p>Curator 框架提供了简化 ZooKeeper 使用的 API，使得注册和处理 Watcher 更加方便。</p>\n<ol>\n<li>\n<p>创建 Curator 客户端</p>\n<p>在 Spring Boot 应用中，可以通过配置 Curator 客户端来管理 ZooKeeper 连接。</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">curator:</span></span><br><span class=\"line\">    <span class=\"attr\">connect-string:</span> <span class=\"string\">localhost:2181</span></span><br><span class=\"line\">    <span class=\"attr\">session-timeout-ms:</span> <span class=\"number\">5000</span></span><br><span class=\"line\">    <span class=\"attr\">connection-timeout-ms:</span> <span class=\"number\">3000</span></span><br><span class=\"line\">    <span class=\"attr\">retry-policy:</span></span><br><span class=\"line\">      <span class=\"attr\">base-sleep-time-ms:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">      <span class=\"attr\">max-retries:</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>配置 Curator 客户端</p>\n<p>在 Spring Boot 应用中，可以通过 @Configuration 类来配置 Curator 客户端。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.curator.RetryPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.curator.framework.CuratorFramework;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.curator.framework.CuratorFrameworkFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.curator.retry.ExponentialBackoffRetry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CuratorConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> CuratorFramework <span class=\"title function_\">curatorFramework</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">RetryPolicy</span> <span class=\"variable\">retryPolicy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ExponentialBackoffRetry</span>(<span class=\"number\">1000</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"type\">CuratorFramework</span> <span class=\"variable\">client</span> <span class=\"operator\">=</span> CuratorFrameworkFactory.builder()</span><br><span class=\"line\">                .connectString(<span class=\"string\">&quot;localhost:2181&quot;</span>)</span><br><span class=\"line\">                .sessionTimeoutMs(<span class=\"number\">5000</span>)</span><br><span class=\"line\">                .connectionTimeoutMs(<span class=\"number\">3000</span>)</span><br><span class=\"line\">                .retryPolicy(retryPolicy)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        client.start();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> client;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>注册 Watcher</p>\n<p>在 Spring Boot 应用中，可以通过 Curator 框架提供的 NodeCache 和 PathChildrenCache 来注册 Watcher。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.curator.framework.CuratorFramework;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.curator.framework.api.ACLProvider;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.curator.framework.recipes.cache.ChildData;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.curator.framework.recipes.cache.NodeCache;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.curator.framework.recipes.cache.NodeCacheListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.curator.framework.recipes.cache.PathChildrenCache;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.curator.framework.recipes.cache.PathChildrenCacheEvent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.curator.framework.recipes.cache.PathChildrenCacheListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.curator.utils.CloseableUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.CreateMode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.Watcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WatcherService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> CuratorFramework curatorFramework;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">watchNodeData</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">NodeCache</span> <span class=\"variable\">nodeCache</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NodeCache</span>(curatorFramework, <span class=\"string\">&quot;/testNode&quot;</span>);</span><br><span class=\"line\">        nodeCache.getListenable().addListener(<span class=\"keyword\">new</span> <span class=\"title class_\">NodeCacheListener</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">nodeChanged</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">                <span class=\"type\">ChildData</span> <span class=\"variable\">currentData</span> <span class=\"operator\">=</span> nodeCache.getCurrentData();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (currentData != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;Node data changed: &quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(currentData.getData()));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        nodeCache.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">watchChildrenChanges</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">PathChildrenCache</span> <span class=\"variable\">childrenCache</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PathChildrenCache</span>(curatorFramework, <span class=\"string\">&quot;/testNode&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        childrenCache.getListenable().addListener(<span class=\"keyword\">new</span> <span class=\"title class_\">PathChildrenCacheListener</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">childEvent</span><span class=\"params\">(CuratorFramework client, PathChildrenCacheEvent event)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">                <span class=\"keyword\">switch</span> (event.getType()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> CHILD_ADDED:</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;Child added: &quot;</span> + event.getData().getPath());</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> CHILD_UPDATED:</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;Child updated: &quot;</span> + event.getData().getPath());</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> CHILD_REMOVED:</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;Child removed: &quot;</span> + event.getData().getPath());</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;Unknown event type: &quot;</span> + event.getType());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        childrenCache.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"zookeeper集群\"><a class=\"markdownIt-Anchor\" href=\"#zookeeper集群\">#</a> Zookeeper 集群</h2>\n<p>Zookeeper 集群是一种分布式协调服务，主要用于解决分布式系统中的一致性问题。它通过一组服务器组成集群，共同维护一个高度一致的状态。</p>\n<p>Zookeeper 集群的组成和角色如下：</p>\n<ol>\n<li>\n<p>领导者（Leader）：</p>\n<p>Leader 是 Zookeeper 集群中的核心角色，负责处理客户端请求并协调其他服务器的状态。</p>\n<ul>\n<li>处理客户端请求：\n<ul>\n<li>Leader 负责接收客户端的所有读写请求，并处理这些请求。</li>\n<li>对于读请求，Leader 可以直接返回结果。</li>\n<li>对于写请求，Leader 会广播给所有 Follower 和 Observer。</li>\n</ul>\n</li>\n<li>数据同步：\n<ul>\n<li>Leader 负责将写请求广播给所有的 Follower，并确保所有 Follower 都正确地执行了写操作。</li>\n<li>Leader 通过事务日志（transaction log）和快照（snapshot）来保证数据的一致性。</li>\n</ul>\n</li>\n<li>选举协调：\n<ul>\n<li>当集群中出现故障或需要重新选举时，Leader 负责协调选举过程。</li>\n<li>Leader 通过投票机制来确定新的 Leader。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>跟随者（Follower）：</p>\n<p>Follower 是 Zookeeper 集群中的重要角色之一，负责接收客户端请求并将请求转发给 Leader。</p>\n<ul>\n<li>接收客户端请求：\n<ul>\n<li>Follower 可以接收客户端的请求，并将请求转发给 Leader。</li>\n<li>Follower 也可以直接处理客户端的读请求。</li>\n</ul>\n</li>\n<li>数据同步：\n<ul>\n<li>Follower 负责同步 Leader 的状态。</li>\n<li>当 Leader 发送写请求时，Follower 会执行相同的写操作，并确认操作完成。</li>\n</ul>\n</li>\n<li>选举参与：\n<ul>\n<li>Follower 参与选举过程，通过投票机制选举新的 Leader。</li>\n<li>当集群中出现故障时，Follower 会参与重新选举。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>观察者（Observer）：</p>\n<p>Observer 是 Zookeeper 集群中的辅助角色，主要用于提高集群的吞吐量。</p>\n<ul>\n<li>接收客户端请求：\n<ul>\n<li>Observer 可以接收客户端的请求，并将请求转发给 Leader。</li>\n<li>Observer 不参与选举过程，因此不会影响选举的结果。</li>\n</ul>\n</li>\n<li>数据同步：\n<ul>\n<li>Observer 负责同步 Leader 的状态。</li>\n<li>当 Leader 发送写请求时，Observer 会执行相同的写操作，并确认操作完成。</li>\n</ul>\n</li>\n<li>提高吞吐量：\n<ul>\n<li>Observer 可以接收更多的客户端请求，从而提高集群的整体吞吐量。</li>\n<li>Observer 不参与选举过程，因此不会增加选举的复杂度。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p>数据一致性：Zookeeper 通过 ZAB 算法保证数据的一致性。</p>\n<ul>\n<li>事务日志：\n<ul>\n<li>每个服务器都会记录事务日志（transaction log），确保数据的一致性。</li>\n<li>在选举过程中，Leader 会根据事务日志同步其他服务器的状态。</li>\n</ul>\n</li>\n<li>快照：\n<ul>\n<li>定期生成快照（snapshot），减少事务日志的大小，提高性能。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"zookeeper的读写流程\"><a class=\"markdownIt-Anchor\" href=\"#zookeeper的读写流程\">#</a> Zookeeper 的读写流程</h2>\n<p>当客户端向 Zookeeper 发送一个数据变更请求时，请求首先到达 Leader 节点。以下是详细的流程：</p>\n<ol>\n<li>写入事务日志\n<ol>\n<li>Leader 收到变更请求：\n<ul>\n<li>Leader 节点首先接收到客户端发送的数据变更请求。</li>\n</ul>\n</li>\n<li>生成事务记录：\n<ul>\n<li>Leader 节点生成一条事务记录，这条记录包含了变更请求的所有细节，例如操作类型（创建、删除、更新）、节点路径、数据等。</li>\n</ul>\n</li>\n<li>写入事务日志：\n<ul>\n<li>Leader 节点将这条事务记录写入事务日志文件中。事务日志文件通常位于磁盘上，以确保数据的持久性。</li>\n<li>事务日志文件通常以 .log 或 .txn 结尾。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>写入内存\n<ol>\n<li>应用变更到内存：\n<ul>\n<li>在事务日志写入完成后，Leader 节点将变更请求应用到内存中的数据树。</li>\n<li>这一步确保了数据的一致性和实时性。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>广播变更请求\n<ol>\n<li>广播变更请求：\n<ul>\n<li>Leader 节点将变更请求广播给所有 Follower 节点。</li>\n<li>Follower 节点接收到变更请求后，同样先写入事务日志，再写入内存。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>确认变更\n<ol>\n<li>Follower 处理变更：\n<ul>\n<li>每个 Follower 节点接收到变更请求后，先将其写入自己的事务日志文件中，然后再应用到内存中的数据树。</li>\n</ul>\n</li>\n<li>多数确认：\n<ul>\n<li>当大多数 Follower 节点确认收到并处理完变更请求后，Leader 节点认为变更成功。</li>\n<li>这一步确保了数据的一致性和可靠性。</li>\n</ul>\n</li>\n<li>返回结果：\n<ul>\n<li>Leader 节点将变更成功的消息返回给客户端。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"zookeeper的选举机制\"><a class=\"markdownIt-Anchor\" href=\"#zookeeper的选举机制\">#</a> Zookeeper 的选举机制</h2>\n<p>Zookeeper 的选举机制基于 Fast Leader Election (FLE) 算法，确保在一个分布式环境中快速且正确地选出领导者。</p>\n<p>Zookeeper 集群中的选举机制通常在以下几种情况下被触发：</p>\n<ul>\n<li>初始启动：当集群中的所有服务器首次启动时，它们需要选举出一个 Leader。</li>\n<li>Leader 故障：当当前的 Leader 发生故障（如宕机或网络分区）时，需要重新选举新的 Leader。</li>\n<li>Leader 步骤落后：当 Leader 的步骤落后于其他服务器时，可能需要重新选举新的 Leader。</li>\n</ul>\n<p>在进行 Zookeeper 集群中，进行选举的节点具有以下状态：</p>\n<ul>\n<li>LOOKING\n<ul>\n<li>定义：节点处于寻找领导者的状态。</li>\n<li>行为：节点会发起投票，并接收来自其他节点的投票信息。一旦收集到足够的投票信息，它会尝试成为领导者或者选择一个合适的领导者。</li>\n</ul>\n</li>\n<li>LEADING\n<ul>\n<li>定义：节点成为领导者。</li>\n<li>行为：负责协调集群中的所有事务操作，并向其他节点发送心跳信息以维持集群的一致性。</li>\n</ul>\n</li>\n<li>FOLLOWING\n<ul>\n<li>定义：节点作为跟随者。</li>\n<li>行为：接收领导者的心跳信息和指令，并执行相应的操作。</li>\n</ul>\n</li>\n<li>OBSERVING\n<ul>\n<li>定义：节点作为观察者。</li>\n<li>行为：观察者可以参与投票过程，但不参与决策制定。观察者主要用于扩展集群的读取能力。</li>\n</ul>\n</li>\n</ul>\n<p>在 ZooKeeper 的选举过程中，投票信息通常包含一个五元组，用于描述候选节点的状态和其他相关信息。这个五元组包括以下五个元素：</p>\n<ul>\n<li>epoch（纪元号）\n<ul>\n<li>定义：纪元号（epoch）是一个整数，用于标识选举周期。每次选举都会有一个新的纪元号。</li>\n<li>作用：纪元号用于区分不同的选举周期，防止旧的投票信息影响新的选举。</li>\n</ul>\n</li>\n<li>zxid（事务 ID）\n<ul>\n<li>定义：事务 ID（zxid）是一个 64 位的整数，用于标识事务的唯一性。</li>\n<li>组成：zxid 由两部分组成：高 32 位是纪元号（epoch），低 32 位是事务编号（transaction number）。</li>\n<li>作用：用于确定哪个节点具有最新的事务信息。</li>\n</ul>\n</li>\n<li>peerId（节点 ID）\n<ul>\n<li>定义：节点 ID（peerId）是一个唯一的标识符，用于标识集群中的每个节点。</li>\n<li>作用：用于识别投票来自哪个节点。</li>\n</ul>\n</li>\n<li>leaderId（Leader ID）\n<ul>\n<li>定义：Leader ID（leaderId）是一个标识符，用于标识当前投票支持的候选 Leader。</li>\n<li>作用：用于确定哪个节点被投票支持作为新的 Leader。</li>\n</ul>\n</li>\n<li>type（投票类型）\n<ul>\n<li>定义：投票类型（type）是一个标识符，用于描述当前投票的类型。</li>\n<li>作用：用于区分不同类型的投票，如 LOOKING、LEADING 或 LEADER。</li>\n</ul>\n</li>\n</ul>\n<p>参与运算的关键变量</p>\n<ul>\n<li>myid\n<ul>\n<li>定义：每个节点的唯一标识符。</li>\n<li>作用：用于区分不同的节点，在选举过程中用于投票。</li>\n</ul>\n</li>\n<li>zxid\n<ul>\n<li>定义：事务 ID，表示最后一次提交的事务编号。</li>\n<li>作用：用于判断节点的状态是否最新。具有更大 zxid 的节点被认为是更 “新” 的节点。</li>\n</ul>\n</li>\n<li>epoch\n<ul>\n<li>定义：选举轮次。</li>\n<li>作用：防止过期的投票信息干扰当前的选举过程。每次选举开始时，epoch 增加。</li>\n</ul>\n</li>\n<li>peerState\n<ul>\n<li>定义：节点的当前状态。</li>\n<li>作用：记录节点当前处于哪种状态（LOOKING, LEADING, FOLLOWING, OBSERVING）。</li>\n</ul>\n</li>\n<li>votesReceived\n<ul>\n<li>定义：节点接收到的投票数量。</li>\n<li>作用：用于统计当前节点是否获得了大多数投票。</li>\n</ul>\n</li>\n<li>lastVote\n<ul>\n<li>定义：节点上一次投票的对象。</li>\n<li>作用：记录上一次投票的对象，避免重复投票。</li>\n</ul>\n</li>\n<li>electionType\n<ul>\n<li>定义：选举类型（例如普通选举或重新选举）。</li>\n<li>作用：用于区分不同类型的选举过程。</li>\n</ul>\n</li>\n</ul>\n<p>详细流程</p>\n<ol>\n<li>初始化状态：当一个节点启动时，它会进入 LOOKING 状态。这意味着它正在寻找或试图成为领导者。</li>\n<li>初始化投票：每个节点在启动时会给自己投一票，并将投票信息（包括 myid 和 zxid）发送给集群中的其他节点。</li>\n<li>接收投票信息：节点会接收到其他节点的投票信息。</li>\n<li>比较和更新投票\n<ol>\n<li>比较 epoch：节点会比较接收到的投票信息中的 epoch 和自己的 epoch。\n<ul>\n<li>当接收到的 epoch 大于自己的 epoch，则更新自己的 epoch，并将新的投票信息再次发送给集群中的所有节点，防止投票过期。</li>\n</ul>\n</li>\n<li>比较 zxid：节点会比较接收到的投票信息中的 zxid 和自己的 zxid。\n<ul>\n<li>如果接收到的投票信息中的 zxid 大于自己的 zxid，则更新自己的投票信息，并将新的投票信息再次发送给集群中的所有节点。</li>\n<li>如果接收到的投票信息中的 zxid 等于自己的 zxid，则比较 myid。\n<ul>\n<li>如果接收到的投票信息中的 myid 大于自己的 myid，则更新自己的投票信息，并将新的投票信息再次发送给集群中的所有节点。</li>\n<li>如果接收到的投票信息中的 myid 小于自己的 myid，则保持当前的投票信息不变。</li>\n</ul>\n</li>\n<li>如果接收到的投票信息中的 zxid 小于自己的 zxid，则保持当前的投票信息不变。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>统计投票结果：每个节点会统计接收到的投票信息。如果一个特定的节点得到了大多数（超过半数）的投票，那么这个节点就被认为是领导者。\n<ul>\n<li>大多数投票：对于奇数个节点的集群，大多数意味着 (N + 1) / 2；对于偶数个节点，则需要 N / 2 + 1 才能构成大多数。</li>\n</ul>\n</li>\n<li>领导者确认：成功获得大多数投票的节点会向集群广播它的领导者身份。<br>\n其他节点接收到这条消息后，会切换到 FOLLOWING 状态，并开始跟随新的领导者。</li>\n<li>故障转移：如果当前的领导者失效了，跟随者会重新进入 LOOKING 状态并开始新一轮的选举。</li>\n</ol>\n<p>示例流程</p>\n<p>假设有一个 Zookeeper 集群，包含三个节点 A、B 和 C：</p>\n<ol>\n<li>初始化状态：A、B 和 C 都进入 LOOKING 状态。</li>\n<li>投票：A、B 和 C 各自给自己投一票，并将投票信息发送给其他节点。假设\n<ul>\n<li>A 的 zxid 是 100。</li>\n<li>B 的 zxid 是 90。</li>\n<li>C 的 zxid 是 110。</li>\n</ul>\n</li>\n<li>接收投票：\n<ul>\n<li>A 收到 B 和 C 的投票信息。</li>\n<li>B 收到 A 和 C 的投票信息。</li>\n<li>C 收到 A 和 B 的投票信息。</li>\n</ul>\n</li>\n<li>比较和更新投票：\n<ul>\n<li>A 发现 C 的 zxid 更大，更新自己的投票信息，并重新发送投票给 B 和 C。</li>\n<li>B 发现 C 的 zxid 更大，更新自己的投票信息，并重新发送投票给 A 和 C。</li>\n<li>C 发现自己的 zxid 最大，保持投票信息不变。</li>\n</ul>\n</li>\n<li>统计投票结果：C 收到 A 和 B 的投票，统计后发现自己的投票数达到 2（超过半数）。</li>\n<li>领导者确认：\n<ul>\n<li>C 向 A 和 B 广播自己成为领导者的信息。</li>\n<li>A 和 B 收到消息后，切换到 FOLLOWING 状态。</li>\n</ul>\n</li>\n<li>故障转移：如果 C 故障，A 和 B 重新进入 LOOKING 状态，重复上述流程。</li>\n</ol>\n<h2 id=\"zookeeper的数据同步机制\"><a class=\"markdownIt-Anchor\" href=\"#zookeeper的数据同步机制\">#</a> Zookeeper 的数据同步机制</h2>\n<p>Zookeeper 使用 ZAB（Zookeeper Atomic Broadcast）协议来保证数据的一致性和高可用性。</p>\n<p>在集群中已经选举出 Leader 后，集群中的其他服务器会通过以下步骤与 Leader 保持同步：</p>\n<ol>\n<li>\n<p>状态同步</p>\n<ul>\n<li>新领导者确定事务状态：新领导者需要确定哪些事务应该保留，哪些事务应该撤销。</li>\n<li>事务日志检查：新领导者检查所有节点的事务日志，找出最新的事务状态。</li>\n</ul>\n</li>\n<li>\n<p>冲突解决</p>\n<ul>\n<li>冲突检测：新领导者检查事务日志，找出冲突的事务。</li>\n<li>冲突解决策略：\n<ul>\n<li>基于事务编号（ZXID）：保留编号较大的事务。</li>\n<li>基于事务时间戳：保留时间戳较新的事务。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Leader 同步</p>\n<p>选举出新的 Leader 后，Leader 会开始与其他 Follower 进行数据同步。具体步骤如下：</p>\n<ol>\n<li>Leader 发送事务日志：\n<ul>\n<li>Leader 将最新的事务日志（transaction log）发送给所有 Follower。</li>\n<li>事务日志包含了所有未提交的事务记录。</li>\n</ul>\n</li>\n<li>Follower 接收事务日志：\n<ul>\n<li>Follower 接收到事务日志后，会将其应用到本地状态上。</li>\n<li>Follower 会确认事务日志的正确性，并将确认信息发送回 Leader。</li>\n</ul>\n</li>\n<li>Leader 确认同步：\n<ul>\n<li>Leader 收到所有 Follower 的确认信息后，会确认数据同步完成。</li>\n<li>Leader 会发送确认信息给所有 Follower，表明数据同步完成。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>Follower 同步</p>\n<p>Follower 在同步过程中需要确保与 Leader 的状态一致。具体步骤如下：</p>\n<ol>\n<li>Leader 发送写请求：\n<ul>\n<li>当 Leader 收到客户端的写请求时，会将写请求广播给所有 Follower。</li>\n<li>写请求包含具体的写操作和事务 ID（zxid）。</li>\n</ul>\n</li>\n<li>Follower 执行写操作：\n<ul>\n<li>Follower 接收到写请求后，会执行相同的写操作，并记录事务日志。</li>\n<li>Follower 会将确认信息发送回 Leader，表明写操作已完成。</li>\n</ul>\n</li>\n<li>Leader 确认写操作：\n<ul>\n<li>Leader 收到所有 Follower 的确认信息后，会确认写操作完成。</li>\n<li>Leader 会发送确认信息给所有 Follower，表明写操作完成。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>Observer 同步</p>\n<p>Observer 不参与选举过程，但需要同步 Leader 的数据以保持最新状态。具体步骤如下：</p>\n<ol>\n<li>Observer 同步数据：\n<ul>\n<li>Observer 从 Leader 获取最新的数据。</li>\n<li>Leader 将最新的事务日志发送给 Observer。</li>\n</ul>\n</li>\n<li>Observer 应用事务日志：\n<ul>\n<li>Observer 接收到事务日志后，会将其应用到本地状态上。</li>\n<li>Observer 会确认事务日志的正确性，并将确认信息发送回 Leader。</li>\n</ul>\n</li>\n<li>Leader 确认同步：\n<ul>\n<li>Leader 收到 Observer 的确认信息后，会确认数据同步完成。</li>\n<li>Leader 会发送确认信息给 Observer，表明数据同步完成。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<p>详细流程示例</p>\n<p>假设集群中有三个服务器：Server A、Server B 和 Server C。Server A 成为 Leader，Server B 和 Server C 作为 Follower。此外，还有一个<br>\n Observer 服务器 Server D。</p>\n<ol>\n<li>Leader 同步：\n<ul>\n<li>Server A 发送最新的事务日志给 Server B 和 Server C。</li>\n<li>Server B 和 Server C 接收到事务日志后，应用到本地状态，并发送确认信息给 Server A。</li>\n<li>Server A 收到所有 Follower 的确认信息后，确认数据同步完成。</li>\n</ul>\n</li>\n<li>Follower 同步：\n<ul>\n<li>当 Server A 收到客户端的写请求时，将写请求广播给 Server B 和 Server C。</li>\n<li>Server B 和 Server C 执行相同的写操作，并记录事务日志。</li>\n<li>Server B 和 Server C 发送确认信息给 Server A。</li>\n<li>Server A 收到所有 Follower 的确认信息后，确认写操作完成。</li>\n</ul>\n</li>\n<li>Observer 同步：\n<ul>\n<li>Server D 从 Server A 获取最新的事务日志。</li>\n<li>Server A 发送最新的事务日志给 Server D。</li>\n<li>Server D 接收到事务日志后，应用到本地状态，并发送确认信息给 Server A。</li>\n<li>Server A 收到 Observer 的确认信息后，确认数据同步完成。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"zookeeper的持久化机制\"><a class=\"markdownIt-Anchor\" href=\"#zookeeper的持久化机制\">#</a> Zookeeper 的持久化机制</h2>\n<p>Zookeeper 的数据持久化机制是其可靠性的关键组成部分之一。为了确保数据在系统崩溃或重启后仍然可用，Zookeeper 采用了多种机制来实现数据持久化。</p>\n<ol>\n<li>\n<p>事务日志（Transaction Log）</p>\n<p>事务日志记录了所有对 Zookeeper 数据树的操作。每次写操作都会被记录在事务日志中，以便在系统崩溃后能够恢复数据。</p>\n<ul>\n<li>\n<p>事务日志的作用</p>\n<ul>\n<li>记录所有写操作：每次写操作（如创建节点、删除节点、更新节点数据等）都会被记录在事务日志中。</li>\n<li>支持数据恢复：在系统崩溃后，可以通过事务日志恢复数据。</li>\n</ul>\n</li>\n<li>\n<p>事务日志的存储</p>\n<ul>\n<li>事务日志通常存储在磁盘上，以确保数据的安全性和持久性。每个 Server 都有自己的事务日志文件，通常位于配置文件<br>\n zoo.cfg<br>\n 中指定的目录下。</li>\n</ul>\n</li>\n<li>\n<p>事务日志的格式</p>\n<p>事务日志文件通常以 .log 或 .txn 结尾。每个事务日志文件包含一系列事务记录，每条记录包含以下信息：</p>\n<ul>\n<li>事务类型：标识操作类型（如 create、delete、setData 等）。</li>\n<li>事务 ID（zxid）：唯一的事务标识符。</li>\n<li>操作详情：具体的操作内容（如节点路径、数据等）。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>快照（Snapshot）</p>\n<p>快照是对 Zookeeper 数据树的一个完整备份。快照定期生成，以减少事务日志的大小，并提高恢复速度。</p>\n<ul>\n<li>\n<p>快照的作用</p>\n<ul>\n<li>快速恢复数据：在系统崩溃后，可以通过快照快速恢复数据。</li>\n<li>减少事务日志大小：定期生成快照可以减少事务日志的大小，提高系统性能。</li>\n</ul>\n</li>\n<li>\n<p>快照的存储</p>\n<p>快照通常也存储在磁盘上，与事务日志文件一起存放在配置文件 zoo.cfg 中指定的目录下。</p>\n</li>\n<li>\n<p>快照的格式</p>\n<p>快照文件通常以 .snapshot 或 .snap 结尾。每个快照文件包含以下信息：</p>\n<ul>\n<li>数据树的完整状态：当前 Zookeeper 数据树的完整状态。</li>\n<li>事务 ID（zxid）：最后一个事务的 ID，用于标识快照的时间点。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>恢复机制</p>\n<p>当 Zookeeper 服务器启动时，需要从磁盘上的事务日志和快照文件中恢复数据。恢复过程如下：</p>\n<ol>\n<li>加载快照：服务器启动时，首先加载最新的快照文件，恢复数据树的基本状态。</li>\n<li>重放事务日志：从最新的快照时间点之后的事务日志开始重放，逐条执行事务日志中的操作，直到最新的事务日志为止。</li>\n<li>检查一致性：服务器会检查数据树的状态是否一致，确保没有遗漏的操作。</li>\n</ol>\n</li>\n</ol>\n",
            "tags": [
                "后端",
                "java",
                "Zookeeper"
            ]
        }
    ]
}