<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Joker • Posts by &#34;spring&#34; category</title>
        <link>https://silvercrow42.github.io/joker.github.io</link>
        <description></description>
        <language>zh-CN,en,default</language>
        <pubDate>Fri, 13 Sep 2024 11:24:41 +0800</pubDate>
        <lastBuildDate>Fri, 13 Sep 2024 11:24:41 +0800</lastBuildDate>
        <category>后端</category>
        <category>操作系统</category>
        <category>Linux</category>
        <category>MQ</category>
        <category>RocketMQ</category>
        <category>java</category>
        <category>Zookeeper</category>
        <category>spring</category>
        <category>数据库</category>
        <category>NoSQL</category>
        <category>缓存</category>
        <category>Redis</category>
        <category>Redisson</category>
        <category>分布式锁</category>
        <item>
            <guid isPermalink="true">https://silvercrow42.github.io/joker.github.io/2024/09/13/%E3%80%90Spring%E3%80%91Spring%E8%AF%A6%E8%A7%A3/</guid>
            <title>【Spring】Spring详解</title>
            <link>https://silvercrow42.github.io/joker.github.io/2024/09/13/%E3%80%90Spring%E3%80%91Spring%E8%AF%A6%E8%A7%A3/</link>
            <category>后端</category>
            <category>java</category>
            <category>spring</category>
            <pubDate>Fri, 13 Sep 2024 11:24:41 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;spring的基本概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring的基本概念&#34;&gt;#&lt;/a&gt; Spring 的基本概念&lt;/h2&gt;
&lt;h3 id=&#34;1-spring-是什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-spring-是什么&#34;&gt;#&lt;/a&gt; 1、Spring 是什么？&lt;/h3&gt;
&lt;p&gt;Spring 是一个轻量级 Java 开发框架，最早有 Rod Johnson 创建，目的是为了解决企业级应用开发的业务逻辑层和其他各层的耦合问题。它是一个分层的&lt;br&gt;
 JavaSE/JavaEE full-stack（一站式）轻量级开源框架，为开发 Java 应用程序提供全面的基础架构支持。Spring 负责基础架构，因此 Java&lt;br&gt;
 开发者可以专注于应用程序的开发。Spring 最根本的使命是解决企业级应用开发的复杂性，即简化 Java 开发。&lt;/p&gt;
&lt;h3 id=&#34;2-spring-带来哪些好处&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-spring-带来哪些好处&#34;&gt;#&lt;/a&gt; 2、Spring 带来哪些好处？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基于 POJO 的轻量级和最小侵入性编程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DI 机制将对象之间的依赖关系交由框架处理，减低组件间的耦合性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于 AOP 技术支持将一些通用任务，如安全、事务、日志、权限等进行集中式管理，从而提供更好的复用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于主流的应用框架提供了集成支持。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-说说-spring-有哪些模块&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-说说-spring-有哪些模块&#34;&gt;#&lt;/a&gt; 3、说说 Spring 有哪些模块？&lt;/h3&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/13/%E3%80%90Spring%E3%80%91Spring%E8%AF%A6%E8%A7%A3/26e3bd5f237ab05ae63f5a697805b33b.png&#34; class=&#34;&#34; title=&#34;Spring模块&#34;&gt;
&lt;p&gt;上图对应的是 Spring 4.x 版本的架构图，主要包括以下八个模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Spring Core&lt;/strong&gt;：基础，提供 IOC 和 DI 能力，可以说 Spring 其他所有的功能都依赖于该类库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Spring Aspects&lt;/strong&gt;：该模块为集成 AspectJ 提供支持。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Spring AOP&lt;/strong&gt;：提供面向方面的编程实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Spring JDBC&lt;/strong&gt;：Java 数据库连接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Spring JMS&lt;/strong&gt;：Java 消息服务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Spring ORM&lt;/strong&gt;：用于支持 Hibernate、Mybatis 等 ORM 工具。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Spring Web&lt;/strong&gt;：为创建 Web 应用程序提供支持。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Spring Test&lt;/strong&gt;：提供了对 JUnit 和 TestNG 测试框架的支持。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-spring-中使用了哪些设计模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-spring-中使用了哪些设计模式&#34;&gt;#&lt;/a&gt; 4、Spring 中使用了哪些设计模式？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;工厂模式&lt;/strong&gt;：包括简单工厂和工厂方法，如通过 BeanFactory 或 ApplicationContext 创建 Bean 对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;单例模式&lt;/strong&gt;：Spring 中的 Bean 对象默认就是单例模式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;代理模式&lt;/strong&gt;：Spring AOP 就是基于代理实现的，包括 JDK 动态代理和 CGlib 技术。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;模板方法模式&lt;/strong&gt;：Spring 中 jdbcTemplate 等以 Template 结尾对数据库操作的类就使用到模板模式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;观察者模式&lt;/strong&gt;：Spring 事件驱动模型就是观察者模式很经典的应用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;适配器模式&lt;/strong&gt;：Spring MVC 中，DispatcherServlet 根据请求解析到对应的 Handler（也就是我们常说的 Controller）后，开始由&lt;br&gt;
 HandlerAdapter 适配器处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;装饰者模式&lt;/strong&gt;：使用 DataSource 在不改动代码情况下切换数据源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;策略模式&lt;/strong&gt;：Spring 对资源的访问，如 Resource 接口。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-spring-中有哪些不同类型事件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-spring-中有哪些不同类型事件&#34;&gt;#&lt;/a&gt; 5、Spring 中有哪些不同类型事件？&lt;/h3&gt;
&lt;p&gt;Spring 提供了以下 5 种标准的事件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;上下文更新事件（ContextRefreshedEvent）&lt;/strong&gt;：在调用 ConfigurableApplicationContext 接口中的 refresh () 方法时被触发。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;上下文开始事件（ContextStartedEvent）&lt;/strong&gt;：当容器调用 ConfigurableApplicationContext 的 Start () 方法开始 / 重新开始容器时触发该事件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;上下文停止事件（ContextStoppedEvent）&lt;/strong&gt;：当容器调用 ConfigurableApplicationContext 的 Stop () 方法停止容器时触发该事件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;上下文关闭事件（ContextClosedEvent）&lt;/strong&gt;：当 ApplicationContext 被关闭时触发该事件。容器被关闭时，其管理的所有单例 Bean 都被销毁。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;请求处理事件（RequestHandledEvent）&lt;/strong&gt;：在 Web 应用中，当一个 http 请求（request）结束触发该事件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至于如果监听这些事件：&lt;/p&gt;
&lt;p&gt;一个 Bean 实现了 ApplicationListener 接口，当一个 ApplicationEvent 被发布以后，Bean 会自动被通知。&lt;/p&gt;
&lt;h2 id=&#34;spring-ioc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring-ioc&#34;&gt;#&lt;/a&gt; Spring IOC&lt;/h2&gt;
&lt;h3 id=&#34;1-什么是-ioc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-什么是-ioc&#34;&gt;#&lt;/a&gt; 1、什么是 IOC？&lt;/h3&gt;
&lt;p&gt;IOC 是 Inversion of Control 的缩写，即控制反转。IOC 不是一项技术，而是一种设计思想。在 Java 开发中，Ioc 意味着你可以将设计好的对象交给&lt;br&gt;
 IOC 容器，完成初始化和管理，当你需要时由容器提供控制。&lt;/p&gt;
&lt;p&gt;Spring IOC 可谓是 Spring 的核心，对于 Spring 框架而言，所谓 IOC 就是由 Spring&lt;br&gt;
 来负责控制对象的生命周期和对象间的关系。正这个控制过程中，需要动态的向某个对象提供它所需要的其他对象，这一点是通过&lt;br&gt;
 DI（Dependency Injection，依赖注入）来实现的。&lt;/p&gt;
&lt;h3 id=&#34;2-ioc-的作用或好处&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-ioc-的作用或好处&#34;&gt;#&lt;/a&gt; 2、IOC 的作用或好处？&lt;/h3&gt;
&lt;p&gt;实现对象间的解耦，同时降低应用开发的代码量和复杂度，使开发人员更专注业务。&lt;/p&gt;
&lt;h3 id=&#34;3-ioc-的实现原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-ioc-的实现原理&#34;&gt;#&lt;/a&gt; 3、IOC 的实现原理？&lt;/h3&gt;
&lt;p&gt;Spring 的 IOC 是基于工厂设计模式在加上反射实现。&lt;/p&gt;
&lt;h3 id=&#34;4-spring-有哪些容器类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-spring-有哪些容器类&#34;&gt;#&lt;/a&gt; 4、Spring 有哪些容器类？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;BeanFactory&lt;/strong&gt;：这是一个最简单的容器，它主要的功能是为依赖注入（DI）提供支持。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ApplicationContext&lt;/strong&gt;：Application Context 是 Spring 中的高级容器。和 BeanFactory 类似，它可以加载和管理配置文件中定义的&lt;br&gt;
 Bean。 另外，它还增加了企业所需要的功能，比如，从属性文件中解析文本信息和将事件传递给所指定的监听器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一些常被使用的 ApplicationContext 实现类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;FileSystemXmlApplicationContext&lt;/strong&gt;：该容器从 XML 文件中加载已被定义的 Bean， 需要提供 XML 文件的完整路径。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ClassPathXmlApplicationContext&lt;/strong&gt;：同样从 XML 文件中加载已被定义的 Bean，但无需提供完整路径，因为它会从 CLASSPATH&lt;br&gt;
 中搜索配置文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WebXmlApplicationContext&lt;/strong&gt;：该容器会在一个 Web 应用程序的范围内加载在 XML 文件中已被定义的 Bean。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-beanfactory-和-applicationcontext-的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-beanfactory-和-applicationcontext-的区别&#34;&gt;#&lt;/a&gt; 5、BeanFactory 和 ApplicationContext 的区别？&lt;/h3&gt;
&lt;p&gt;二者都是 Spring 框架的两大核心接口，都可以当做 Spring 的容器。其中 ApplicationContext 是 BeanFactory 的子接口。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BeanFactory 是 Spring 里面最底层的接口，包含了各种 Bean 的定义，读取配置文档，管理 Bean 的加载、实例化，控制 Bean&lt;br&gt;
 的生命周期，维护对象之间的依赖关系等功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ApplicationContext 接口作为 BeanFactory 的派生，除了提供 BeanFactory 所具有的功能外，还提供了更完整的框架功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;继承 MessageSource，支持国际化。&lt;/li&gt;
&lt;li&gt;统一的资源文件访问方式。&lt;/li&gt;
&lt;li&gt;提供在监听器中注册 Bean 的事件。&lt;/li&gt;
&lt;li&gt;支持同时加载多个配置文件。&lt;/li&gt;
&lt;li&gt;载入多个（有继承关系）上下文，使得每一个上下文都专注于一个特定的层次，如应用的 Web 层。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;具体区别体现在以下三个方面：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;加载方式不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BeanFactroy 采用的懒加载方式注入 Bean，即只有在使用到某个 Bean 时才对该 Bean 实例化。这样，我们就不能在程序启动时发现一些存在的&lt;br&gt;
 Spring 的配置问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ApplicationContext 是在启动时一次性创建了所有的 Bean。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建方式不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BeanFactory 通常以编程的方式被创建。&lt;/li&gt;
&lt;li&gt;ApplicationContext 还能以声明的方式创建，如使用 ContextLoader。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注册方式不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二者都支持 BeanPostProcessor、BeanFactoryPostProcessor 的使用，但 BeanFactory 需要手动注册，而 ApplicationContext&lt;br&gt;
 则是自动注册。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;6-有哪些注入方式以及区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-有哪些注入方式以及区别&#34;&gt;#&lt;/a&gt; 6、有哪些注入方式以及区别？&lt;/h3&gt;
&lt;p&gt;Spring 支持多种依赖注入的方式，包括但不限于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构造器注入（Constructor Injection）&lt;/li&gt;
&lt;li&gt;属性注入（Property or Setter Injection）&lt;/li&gt;
&lt;li&gt;字段注入（Field Injection）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;构造器注入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#构造器注入&#34;&gt;#&lt;/a&gt; 构造器注入&lt;/h4&gt;
&lt;p&gt;构造器注入是指通过构造器参数来传递依赖项。这种方式可以确保依赖项在对象创建时就已经存在，有助于提高对象的不可变性和稳定性。&lt;/p&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SomeService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; SomeDependency dependency;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;SomeService&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(SomeDependency dependency)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.dependency = Objects.requireNonNull(dependency, &lt;span class=&#34;string&#34;&gt;&amp;quot;dependency must not be null&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 Spring Boot 中，可以使用 @Autowired 注解来标记构造器，表明这是一个需要依赖注入的构造器。如果类中有多个构造器，那么需要显式地使用 @Autowired 注解来标注哪个构造器是注入构造器。&lt;/p&gt;
&lt;h4 id=&#34;属性注入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#属性注入&#34;&gt;#&lt;/a&gt; 属性注入&lt;/h4&gt;
&lt;p&gt;属性注入是通过对象的 setter 方法来注入依赖项。这是最常用的一种方式，因为它允许在对象创建后注入依赖项，增加了灵活性。&lt;/p&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SomeService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; SomeDependency dependency;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;setDependency&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(SomeDependency dependency)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.dependency = Objects.requireNonNull(dependency, &lt;span class=&#34;string&#34;&gt;&amp;quot;dependency must not be null&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;字段注入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字段注入&#34;&gt;#&lt;/a&gt; 字段注入&lt;/h4&gt;
&lt;p&gt;字段注入是通过直接在类成员变量上使用 @Autowired 注解来注入依赖项。这种方式简洁，但是不如构造器注入或属性注入那样清晰地表达依赖关系。&lt;/p&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SomeService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; SomeDependency dependency;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;一些使用上的规约&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一些使用上的规约&#34;&gt;#&lt;/a&gt; 一些使用上的规约&lt;/h4&gt;
&lt;p&gt;尽管 Spring 支持上述所有依赖注入方式，但 Spring 团队推荐使用构造器注入，特别是对于必填依赖项。构造器注入有助于确保依赖项在对象创建时已经就位，并且有助于提高对象的不可变性。此外，构造器注入使得依赖关系更加明确，便于阅读和理解代码。&lt;br&gt;
对于可选依赖项，可以使用属性注入或字段注入。然而，无论选择哪种方式，都应该遵循一些最佳实践：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免使用字段注入：除非你有非常明确的理由使用字段注入，否则应尽量避免使用。字段注入可能会导致依赖关系不明确，难以维护。&lt;/li&gt;
&lt;li&gt;使用构造器注入：对于必填依赖项，应该优先使用构造器注入。&lt;/li&gt;
&lt;li&gt;使用断言确保依赖项不为空：在构造器或 setter 方法中使用 Objects.requireNonNull () 或类似方法来确保依赖项不是空的。&lt;/li&gt;
&lt;li&gt;考虑使用 @Required 注解：虽然 Spring 现在主要使用 @Autowired，但在某些情况下，@Required 注解仍然有用，它可以用来标记 setter 方法，表示该方法必须被 Spring 的自动装配机制调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些依赖注入方式的选择取决于具体的应用场景和个人偏好。构造器注入通常被认为是更安全、更清晰的选择，而字段注入虽然简单，但在某些情况下可能会导致代码难以理解和维护。&lt;/p&gt;
&lt;h2 id=&#34;spring-bean&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring-bean&#34;&gt;#&lt;/a&gt; Spring Bean&lt;/h2&gt;
&lt;h3 id=&#34;1-spring-bean-有哪些作用域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-spring-bean-有哪些作用域&#34;&gt;#&lt;/a&gt; 1、Spring Bean 有哪些作用域？&lt;/h3&gt;
&lt;p&gt;Spring 提供以下五种 Bean 的作用域：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Singleton：单例模式，默认的作用域。在整个 Spring IoC 容器中，一个 Bean 定义对应一个实例。&lt;/li&gt;
&lt;li&gt;Prototype：原型模式。每次从容器中请求该 Bean 时都会创建一个新的实例。&lt;/li&gt;
&lt;li&gt;Request：对于每一个 HTTP 请求，都会创建一个新的 Bean 实例。这个作用域仅在 Web 环境中可用。&lt;/li&gt;
&lt;li&gt;Session：在一个 HTTP Session 中，一个 Bean 定义对应一个实例。这个作用域同样仅在 Web 环境中可用。&lt;/li&gt;
&lt;li&gt;Global-session：在一个全局的 HTTP Session 中，一个 Bean 定义对应一个实例。这个作用域主要用于 Portlet 环境。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;值的注意的是：使用 Prototype 作用域时需要慎重的思考，因为频繁创建和销毁 Bean 会带来很大的性能开销。&lt;/p&gt;
&lt;h4 id=&#34;spring-bean-作用域配置方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring-bean-作用域配置方式&#34;&gt;#&lt;/a&gt; Spring Bean 作用域配置方式&lt;/h4&gt;
&lt;p&gt;Spring 提供了三种配置 Bean 作用域的方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;XML 配置&lt;/p&gt;
&lt;p&gt;使用基于 XML 的配置文件时，可以通过&lt;bean&gt;标签的 scope 属性来指定 Bean 的作用域。&lt;/p&gt;
&lt;p&gt;例如，配置一个原型模式的 Bean：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;bean id=&lt;span class=&#34;string&#34;&gt;&amp;quot;exampleBean&amp;quot;&lt;/span&gt;class=&lt;span class=&#34;string&#34;&gt;&amp;quot;com.example.ExampleBean&amp;quot;&lt;/span&gt;scope=&lt;span class=&#34;string&#34;&gt;&amp;quot;prototype&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java 配置类配置&lt;/p&gt;
&lt;p&gt;使用 Java 配置类（通过 @Configuration 和 @Bean 注解）时，可以在 Bean 定义的方法上使用 @Scope 注解来指定作用域。&lt;/p&gt;
&lt;p&gt;例如，定义一个原型模式的 Bean：&lt;/p&gt;
  &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppConfig&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Scope(&amp;quot;prototype&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ExampleBean &lt;span class=&#34;title function_&#34;&gt;exampleBean&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ExampleBean&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ExampleSingletonBean &lt;span class=&#34;title function_&#34;&gt;exampleSingletonBean&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ExampleSingletonBean&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java 注解配置&lt;/p&gt;
&lt;p&gt;使用注解的方式配置 Bean 的作用域也很常见，特别是在组件扫描（Component Scanning）的情况下。可以直接在类或者方法级别使用 @Scope 注解。&lt;/p&gt;
&lt;p&gt;例如将一个 Service 组件设置为原型模式：&lt;/p&gt;
  &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Service&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Scope(&amp;quot;prototype&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ExampleBean&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-spring-的单例是否线程安全&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-spring-的单例是否线程安全&#34;&gt;#&lt;/a&gt; 2、Spring 的单例是否线程安全？&lt;/h3&gt;
&lt;p&gt;Spring 框架中的 Bean 默认是单例模式（Singleton），这意味着在整个应用上下文中只会存在一个 Bean 实例。&lt;/p&gt;
&lt;p&gt;对于无状态的服务层 Bean 来说，Spring 的单例模式本身是线程安全的，因为它们不保存任何实例变量的状态，所有操作都是基于输入参数进行计算。&lt;/p&gt;
&lt;p&gt;但是，如果单例 Bean 有实例变量，并且这些变量在多个线程间共享并且被修改，则可能会出现线程安全问题。&lt;/p&gt;
&lt;p&gt;如何保证线程安全&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免使用可变对象：尽量使用不可变对象或者确保对象在初始化之后不再改变其状态。&lt;/li&gt;
&lt;li&gt;同步访问：如果必须维护一些可变状态，可以通过同步方法或同步代码块来保证同一时间只有一个线程可以访问和修改这些状态。&lt;/li&gt;
&lt;li&gt;使用并发工具类：利用 Java 并发库中的工具类如 ConcurrentHashMap 等来管理共享资源。&lt;/li&gt;
&lt;li&gt;将 Bean 设计为原型模式：如果每个请求确实都需要独立的数据结构或状态，可以将 Bean 的作用域设置为&lt;br&gt;
 prototype，这样每次请求都会创建一个新的 Bean 实例，这样可能导致性能降低，但可以避免线程安全问题。&lt;/li&gt;
&lt;li&gt;使用 ThreadLocal：对于某些特定场景，可以使用 ThreadLocal 来实现线程之间的隔离，确保每个线程都有自己的独立副本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-spring-bean-的生命周期&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-spring-bean-的生命周期&#34;&gt;#&lt;/a&gt; 3、Spring Bean 的生命周期？&lt;/h3&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/13/%E3%80%90Spring%E3%80%91Spring%E8%AF%A6%E8%A7%A3/0cb7664ed7f4ec62270c528f298e03a3.png&#34; class=&#34;&#34; title=&#34;Spring Bean 生命周期&#34;&gt;
&lt;p&gt;Bean 在 Spring 容器中从创建到销毁经历了若干阶段，每一阶段都可以进行个性化定制。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Spring 对 Bean 进行实例化；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring 将配置和 Bean 的引用注入到对应的属性中；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 Bean 实现了 BeanNameAware 接口，Spring 将 Bean 的 ID 传递给 setBeanName () 方法；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 Bean 实现了 BeanFactoryAware 接口，Spring 将调用 setBeanFactory () 方法将 BeanFactory 容器实例传入；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 Bean 实现了 ApplicationContextAware 接口，Spring 将调用 setApplicationContext () 方法将 Bean 所在的应用上下文的引用传入进来；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 Bean 实现了 BeanPostProcessor 接口，Spring 将调用它们的 postProcessBeforeInitialization () 方法；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 Bean 实现了 InitializingBean 接口，Spring 将调用它们的 afterPropertiesSet () 方法。类似地，如果 Bean 使用 initmethod&lt;br&gt;
 声明了初始化方法，该方法也会被调用；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 Bean 实现了 BeanPostProcessor 接口，Spring 将调用它们的 postProcessAfterInitialization () 方法；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;此时，Bean 已经准备就绪，可以被应用程序使用了，它们将一直驻留在应用上下文中，直到该应用上下文被销毁；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 Bean 实现了 DisposableBean 接口，Spring 将调用它的 destroy () 接口方法。同样，如果使用 destroymethod&lt;br&gt;
 声明了销毁方法，该方法也会被调用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;spring-aop&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring-aop&#34;&gt;#&lt;/a&gt; Spring AOP&lt;/h2&gt;
&lt;h3 id=&#34;1-什么是-aop-以及作用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-什么是-aop-以及作用&#34;&gt;#&lt;/a&gt; 1、什么是 AOP 以及作用？&lt;/h3&gt;
&lt;p&gt;AOP（Aspect Oriented Programming）是面向切面编程，是 OOP 的一个补充，它允许我们通过引入新的模块，来分离业务逻辑与非业务逻辑，从而实现代码复用。&lt;/p&gt;
&lt;p&gt;传统的 OOP 开发中代码逻辑是至上而下的过程中会长生一些横切性问题（大量与业务无关的重复代码），这些横切问题会散落在代码的各个地方且难以维护。AOP&lt;br&gt;
 的编程思想就是把业务逻辑和横切的问题进行分离，从而达到解耦的目的，使代码的重用性和开发效率高（目的是重用代码，把公共的代码抽取出来）。&lt;/p&gt;
&lt;p&gt;即 AOP 的作用是对业务逻辑的各个部分进行隔离，降低业务逻辑的耦合性，提高程序的可重用型和开发效率。&lt;/p&gt;
&lt;h3 id=&#34;2-有哪些应用场景&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-有哪些应用场景&#34;&gt;#&lt;/a&gt; 2、有哪些应用场景？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;事务管理：在多个服务或方法调用中需要统一管理事务的开始、提交或回滚。Spring AOP 可以通过声明式事务管理（例如使用&lt;br&gt;
 @Transactional 注解）来简化事务的控制逻辑。&lt;/li&gt;
&lt;li&gt;日志记录：对系统中的关键方法或接口的日志记录，包括方法调用前后的日志打印，以及异常捕获时的日志记录。这可以通过定义一个切面，在方法执行前后插入日志记录的逻辑来实现。&lt;/li&gt;
&lt;li&gt;权限验证：在调用某些敏感操作之前，需要进行权限验证。通过 AOP 可以在方法调用前进行权限检查，从而确保只有授权用户才能访问特定功能。&lt;/li&gt;
&lt;li&gt;性能监控：监控应用程序中方法的执行时间和资源消耗情况，这对于性能瓶颈分析非常有用。可以定义一个切面来记录方法执行的开始时间和结束时间，并计算执行时间。&lt;/li&gt;
&lt;li&gt;缓存操作：对数据访问操作的结果进行缓存，以减少数据库访问次数，提高响应速度。使用 AOP&lt;br&gt;
 可以在方法执行前检查缓存，如果缓存中有数据则直接返回，否则执行方法并将结果存入缓存。&lt;/li&gt;
&lt;li&gt;输入输出参数校验：在方法执行前对传入的参数进行校验，确保参数的有效性；在方法执行后对返回值进行校验，确保返回值的正确性。&lt;/li&gt;
&lt;li&gt;资源锁定：在多线程环境中，为了防止资源竞争，可以使用 AOP 来添加锁定逻辑，确保资源的一致性和完整性。&lt;/li&gt;
&lt;li&gt;自定义注解：定义自定义注解，并通过 AOP 处理这些注解，实现特定的行为，如日志记录、性能统计等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-切面-切点-连接点-通知以及四者的关系&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-切面-切点-连接点-通知以及四者的关系&#34;&gt;#&lt;/a&gt; 3、切面、切点、连接点、通知以及四者的关系？&lt;/h3&gt;
&lt;p&gt;在 Spring AOP 中，切面（Aspect）、切点（Pointcut）、连接点（Joinpoint）和通知（Advice）是核心概念，它们共同协作来实现面向切面编程的功能。下面是这些概念之间的关系：&lt;/p&gt;
&lt;h4 id=&#34;1连接点-joinpoint&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1连接点-joinpoint&#34;&gt;#&lt;/a&gt; 1）连接点 (Joinpoint)&lt;/h4&gt;
&lt;h5 id=&#34;概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#概念&#34;&gt;#&lt;/a&gt; 概念&lt;/h5&gt;
&lt;p&gt;连接点是指程序执行过程中的某个特定点，比如方法执行、字段访问等。&lt;/p&gt;
&lt;h5 id=&#34;示例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#示例&#34;&gt;#&lt;/a&gt; 示例&lt;/h5&gt;
&lt;p&gt;在代码中，连接点的具体表现形式通常是方法的调用。当你定义了一个方法，并且这个方法被 Spring AOP 所管理，那么这个方法的执行就是一个连接点。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SomeService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;doSomething&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 业务逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在这个例子中，doSomething () 方法的执行就是一个连接点。&lt;/p&gt;
&lt;p&gt;不是所有的连接点都可以被切面所使用，只有那些被切点表达式匹配上的连接点才是 AOP 能够织入的连接点。&lt;/p&gt;
&lt;h4 id=&#34;2切点-pointcut&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2切点-pointcut&#34;&gt;#&lt;/a&gt; 2）切点 (Pointcut)&lt;/h4&gt;
&lt;h5 id=&#34;概念-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#概念-2&#34;&gt;#&lt;/a&gt; 概念&lt;/h5&gt;
&lt;p&gt;切点（Pointcut）是 AOP 中的一个重要概念，它定义了哪些连接点（Joinpoint）会被切面（Aspect）所关注，确定哪些方法或类应该被切面所拦截。&lt;br&gt;
一个切点可以匹配多个连接点，而一个连接点也可以被多个切点所匹配。&lt;/p&gt;
&lt;p&gt;在 Spring AOP 中，切点的表现形式通常包括以下几个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法执行切点：最常用的形式，用于指定特定的方法执行。&lt;/li&gt;
&lt;li&gt;类执行切点：用于指定特定类的所有方法执行。&lt;/li&gt;
&lt;li&gt;异常切点：用于指定方法抛出特定异常时的切点。&lt;/li&gt;
&lt;li&gt;构造函数切点：用于指定构造函数的执行。&lt;/li&gt;
&lt;li&gt;字段访问切点：用于指定字段的访问或修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spring AOP 支持使用 AspectJ 的切点表达式语法来定义切点。基本语法如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;execution(modifier-pattern?ret-type-pattern declaring-type-pattern?name-pattern(param-pattern)&lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt;-pattern?)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;modifiers-pattern：修饰符模式（可选）。&lt;/li&gt;
&lt;li&gt;ret-type-pattern：返回类型模式。&lt;/li&gt;
&lt;li&gt;declaring-type-pattern：声明类型模式（可选）。&lt;/li&gt;
&lt;li&gt;name-pattern：方法名称模式。&lt;/li&gt;
&lt;li&gt;param-pattern：参数模式。&lt;/li&gt;
&lt;li&gt;throws-pattern：抛出异常模式（可选）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;示例-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#示例-2&#34;&gt;#&lt;/a&gt; 示例&lt;/h5&gt;
&lt;p&gt;假设我们有一个 UserService 类，包含一个 login 方法：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;UserService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;login&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String username, String password)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 登录逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以通过注解表达式来定义切点：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Aspect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LoggingAspect&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Before(&amp;quot;execution(* com.example.service.UserService.login(..))&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;logBefore&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(JoinPoint joinPoint)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Logging before login&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Pointcut(&amp;quot;execution(* com.example.service.UserService.*(..))&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;userServiceMethods&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Before(&amp;quot;userServiceMethods()&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;logBeforeAllUserServiceMethods&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(JoinPoint joinPoint)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Logging before all UserService methods&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个例子中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;execution(* com.example.service.UserService.login(..))&lt;/code&gt; ：表示拦截 UserService 类中的 login 方法。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execution(* com.example.service.UserService.*(..))&lt;/code&gt; ：表示拦截 UserService 类中的所有方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;通知-advice&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#通知-advice&#34;&gt;#&lt;/a&gt; 通知 (Advice)&lt;/h4&gt;
&lt;h5 id=&#34;概念-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#概念-3&#34;&gt;#&lt;/a&gt; 概念&lt;/h5&gt;
&lt;p&gt;通知（Advice）是 Spring AOP&lt;br&gt;
 中的一个核心概念，它定义了在切点（Pointcut）匹配的连接点（Joinpoint）上执行的动作。通知可以分为多种类型，每种类型在不同的时机执行不同的逻辑。下面详细介绍通知的类型及其具体表现形式。&lt;/p&gt;
&lt;p&gt;Spring AOP 支持以下几种主要的通知类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;前置通知（Before Advice）：在方法执行前执行（关键字: Before）。&lt;/li&gt;
&lt;li&gt;后置通知（After Returning Advice）：仅当方法正常返回时执行（关键字: AfterReturning）。&lt;/li&gt;
&lt;li&gt;最终通知（After Advice）：无论方法是否抛出异常，都会在方法执行后执行（关键字: After）。&lt;/li&gt;
&lt;li&gt;异常通知（After Throwing Advice）：仅当方法抛出异常时执行（关键字: AfterThrowing）。&lt;/li&gt;
&lt;li&gt;环绕通知（Around Advice）：环绕通知，在方法执行前后都可执行，并且可以决定是否继续执行方法（关键字: Around）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不同类型的 AOP 通知适用于不同的场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;前置通知：适用于日志记录、权限验证、资源准备等。&lt;/li&gt;
&lt;li&gt;后置通知：适用于日志记录、资源释放、结果处理等。&lt;/li&gt;
&lt;li&gt;最终通知：适用于资源释放、日志记录等。&lt;/li&gt;
&lt;li&gt;异常通知：适用于异常记录、错误处理、资源释放等。&lt;/li&gt;
&lt;li&gt;环绕通知：适用于性能监控、事务管理、权限验证、资源控制等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;示例-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#示例-3&#34;&gt;#&lt;/a&gt; 示例&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;前置通知（Before Advice）&lt;/p&gt;
&lt;p&gt;前置通知是在方法执行前执行的通知。它可以用来进行一些准备工作，如日志记录、权限验证等。&lt;br&gt;
示例代码：&lt;/p&gt;
 &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Aspect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LoggingAspect&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Before(&amp;quot;execution(* com.example.service.UserService.*(..))&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;logBefore&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(JoinPoint joinPoint)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;MethodSignature&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;signature&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (MethodSignature) joinPoint.getSignature();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; signature.getMethod();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Executing: &amp;quot;&lt;/span&gt; + method.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Object[] args = joinPoint.getArgs();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (Object arg : args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Argument: &amp;quot;&lt;/span&gt; + arg);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个例子中，logBefore 方法是一个前置通知，它会在 UserService 类中的所有方法执行前被调用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后置通知（After Returning Advice）&lt;/p&gt;
&lt;p&gt;后置通知是在方法正常返回后执行的通知。它可以用来进行一些清理工作，如关闭资源、记录日志等。&lt;br&gt;
示例代码：&lt;/p&gt;
 &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Aspect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LoggingAspect&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@AfterReturning(pointcut = &amp;quot;execution(* com.example.service.UserService.*(..))&amp;quot;, returning = &amp;quot;result&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;logAfterReturning&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(JoinPoint joinPoint, Object result)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;MethodSignature&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;signature&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (MethodSignature) joinPoint.getSignature();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; signature.getMethod();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Method &amp;quot;&lt;/span&gt; + method.getName() + &lt;span class=&#34;string&#34;&gt;&amp;quot; returned: &amp;quot;&lt;/span&gt; + result);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个例子中，logAfterReturning 方法是一个后置通知，它会在 UserService 类中的所有方法正常返回后被调用，并接收方法的返回值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最终通知（After Advice）&lt;/p&gt;
&lt;p&gt;最终通知是在方法执行后（无论方法是否正常返回或抛出异常）都会执行的通知。它可以用来进行一些必要的清理工作，如关闭资源等。&lt;br&gt;
示例代码：&lt;/p&gt;
 &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Aspect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LoggingAspect&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@After(&amp;quot;execution(* com.example.service.UserService.*(..))&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;logFinally&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(JoinPoint joinPoint)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;MethodSignature&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;signature&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (MethodSignature) joinPoint.getSignature();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; signature.getMethod();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Method &amp;quot;&lt;/span&gt; + method.getName() + &lt;span class=&#34;string&#34;&gt;&amp;quot; has been executed.&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个例子中，logFinally 方法是一个最终通知，它会在 UserService 类中的所有方法执行后被调用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;异常通知（After Throwing Advice）&lt;/p&gt;
&lt;p&gt;异常通知是在方法抛出异常后执行的通知。它可以用来记录异常信息、发送报警等。&lt;br&gt;
示例代码：&lt;/p&gt;
 &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Aspect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LoggingAspect&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@AfterThrowing(pointcut = &amp;quot;execution(* com.example.service.UserService.*(..))&amp;quot;, throwing = &amp;quot;ex&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;logAfterThrowing&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(JoinPoint joinPoint, Exception ex)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;MethodSignature&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;signature&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (MethodSignature) joinPoint.getSignature();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; signature.getMethod();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Method &amp;quot;&lt;/span&gt; + method.getName() + &lt;span class=&#34;string&#34;&gt;&amp;quot; threw exception: &amp;quot;&lt;/span&gt; + ex.getMessage());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个例子中，logAfterThrowing 方法是一个异常通知，它会在 UserService 类中的所有方法抛出异常后被调用，并接收异常对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;环绕通知（Around Advice）&lt;/p&gt;
&lt;p&gt;环绕通知是在方法执行前后都可执行的通知。它可以完全控制方法的执行流程，包括是否继续执行方法、如何执行等。&lt;br&gt;
示例代码：&lt;/p&gt;
 &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Aspect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LoggingAspect&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Around(&amp;quot;execution(* com.example.service.UserService.*(..))&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;title function_&#34;&gt;logAround&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ProceedingJoinPoint joinPoint)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Throwable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;MethodSignature&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;signature&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (MethodSignature) joinPoint.getSignature();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; signature.getMethod();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Before executing: &amp;quot;&lt;/span&gt; + method.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; joinPoint.proceed(); &lt;span class=&#34;comment&#34;&gt;// 继续执行方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;After executing: &amp;quot;&lt;/span&gt; + method.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Method &amp;quot;&lt;/span&gt; + method.getName() + &lt;span class=&#34;string&#34;&gt;&amp;quot; threw exception: &amp;quot;&lt;/span&gt; + e.getMessage());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; e;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个例子中，logAround 方法是一个环绕通知，它会在 UserService 类中的所有方法执行前后都被调用，并且可以控制方法的执行流程。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;切面-aspect&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#切面-aspect&#34;&gt;#&lt;/a&gt; 切面 (Aspect)&lt;/h4&gt;
&lt;h5 id=&#34;概念-4&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#概念-4&#34;&gt;#&lt;/a&gt; 概念&lt;/h5&gt;
&lt;p&gt;切面（Aspect）是 Spring AOP 中的核心概念之一，它将横切关注点（Cross-cutting&lt;br&gt;
Concern）模块化为独立的组件。切面包含了多个通知（Advice）和切点（Pointcut），并通过这些通知和切点来实现特定的功能。下面详细介绍切面的概念、组成以及具体的应用场景。&lt;/p&gt;
&lt;p&gt;切面通常由以下几个部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;切点（Pointcut）：定义了哪些连接点（Joinpoint）会被切面所关注。&lt;/li&gt;
&lt;li&gt;通知（Advice）：定义了在切点匹配的连接点上执行的动作。&lt;/li&gt;
&lt;li&gt;引入（Introduction）：允许向现有类添加新的方法或属性。&lt;/li&gt;
&lt;li&gt;织入（Weaving）：将切面与应用程序的其他部分结合起来的过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;示例-4&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#示例-4&#34;&gt;#&lt;/a&gt; 示例&lt;/h5&gt;
&lt;p&gt;在 Spring AOP 中，切面通常通过 @Aspect 注解来定义，并且可以包含多个切点和通知。&lt;br&gt;
示例代码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Aspect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LoggingAspect&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 前置通知&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Before(&amp;quot;execution(* com.example.service.UserService.*(..))&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;logBefore&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(JoinPoint joinPoint)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;MethodSignature&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;signature&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (MethodSignature) joinPoint.getSignature();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; signature.getMethod();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Executing: &amp;quot;&lt;/span&gt; + method.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Object[] args = joinPoint.getArgs();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (Object arg : args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Argument: &amp;quot;&lt;/span&gt; + arg);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 后置通知&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@AfterReturning(pointcut = &amp;quot;execution(* com.example.service.UserService.*(..))&amp;quot;, returning = &amp;quot;result&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;logAfterReturning&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(JoinPoint joinPoint, Object result)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;MethodSignature&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;signature&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (MethodSignature) joinPoint.getSignature();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; signature.getMethod();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Method &amp;quot;&lt;/span&gt; + method.getName() + &lt;span class=&#34;string&#34;&gt;&amp;quot; returned: &amp;quot;&lt;/span&gt; + result);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 最终通知&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@After(&amp;quot;execution(* com.example.service.UserService.*(..))&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;logFinally&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(JoinPoint joinPoint)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;MethodSignature&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;signature&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (MethodSignature) joinPoint.getSignature();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; signature.getMethod();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Method &amp;quot;&lt;/span&gt; + method.getName() + &lt;span class=&#34;string&#34;&gt;&amp;quot; has been executed.&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 异常通知&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@AfterThrowing(pointcut = &amp;quot;execution(* com.example.service.UserService.*(..))&amp;quot;, throwing = &amp;quot;ex&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;logAfterThrowing&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(JoinPoint joinPoint, Exception ex)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;MethodSignature&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;signature&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (MethodSignature) joinPoint.getSignature();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; signature.getMethod();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Method &amp;quot;&lt;/span&gt; + method.getName() + &lt;span class=&#34;string&#34;&gt;&amp;quot; threw exception: &amp;quot;&lt;/span&gt; + ex.getMessage());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 环绕通知&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Around(&amp;quot;execution(* com.example.service.UserService.*(..))&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;title function_&#34;&gt;logAround&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ProceedingJoinPoint joinPoint)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Throwable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;MethodSignature&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;signature&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (MethodSignature) joinPoint.getSignature();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; signature.getMethod();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Before executing: &amp;quot;&lt;/span&gt; + method.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;startTime&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; System.currentTimeMillis();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; joinPoint.proceed(); &lt;span class=&#34;comment&#34;&gt;// 继续执行方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;endTime&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; System.currentTimeMillis();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;After executing: &amp;quot;&lt;/span&gt; + method.getName() + &lt;span class=&#34;string&#34;&gt;&amp;quot; (Time: &amp;quot;&lt;/span&gt; + (endTime - startTime) + &lt;span class=&#34;string&#34;&gt;&amp;quot;ms)&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Method &amp;quot;&lt;/span&gt; + method.getName() + &lt;span class=&#34;string&#34;&gt;&amp;quot; threw exception: &amp;quot;&lt;/span&gt; + e.getMessage());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; e;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;4-aop-的实现原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-aop-的实现原理&#34;&gt;#&lt;/a&gt; 4、AOP 的实现原理？&lt;/h3&gt;
&lt;p&gt;AOP 是基于代理实现的，Spring 提供了 JDK 动态代理和 CGlib 两种方式来生成代理对象。&lt;/p&gt;
&lt;p&gt;Spring AOP 会根据目标对象是否实现了接口来决定使用哪种代理策略：&lt;br&gt;
如果目标对象实现了接口，则使用 JDK 动态代理。&lt;br&gt;
如果目标对象没有实现任何接口，则使用 CGLIB 代理。&lt;br&gt;
这种策略使得 Spring AOP 能够灵活地适应不同的情况，并且保证了代理对象能够正确地执行增强逻辑。&lt;/p&gt;
&lt;p&gt;以下介绍两种不同的代理策略原理。&lt;/p&gt;
&lt;h4 id=&#34;jdk-动态代理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#jdk-动态代理&#34;&gt;#&lt;/a&gt; JDK 动态代理&lt;/h4&gt;
&lt;p&gt;JDK 动态代理是基于 Java 语言反射机制实现的。它要求被代理的对象必须实现一个或多个接口。Spring AOP 会利用这个特性，当目标对象实现了接口时，就会使用&lt;br&gt;
 JDK 动态代理来创建代理对象。&lt;/p&gt;
&lt;p&gt;工作原理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当一个对象实现了某个接口时，Spring 会通过 java.lang.reflect.Proxy 类来创建一个代理对象。&lt;/li&gt;
&lt;li&gt;这个代理对象实现了相同的接口，并且其内部持有对原始对象的引用。&lt;/li&gt;
&lt;li&gt;代理对象通过 InvocationHandler 接口来处理方法调用，这样可以在方法调用前后添加额外的行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 假设有一个接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Service&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;doSomething&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 实现类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ServiceImpl&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Service&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;doSomething&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Doing something...&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 创建代理对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Service&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ServiceImpl&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Service&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;proxy&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (Service) Proxy.newProxyInstance(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Service.class.getClassLoader(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Class&lt;/span&gt;&amp;lt;?&amp;gt;[]&amp;#123;Service.class&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;InvocationHandler&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;title function_&#34;&gt;invoke&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object proxy, Method method, Object[] args)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Throwable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Before method call&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; method.invoke(service, args);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;After method call&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;proxy.doSomething();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;cglib&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cglib&#34;&gt;#&lt;/a&gt; CGlib&lt;/h4&gt;
&lt;p&gt;CGLIB（Code Generation Library）是一个高性能的字节码生成库，它可以在运行时动态生成一个目标类的子类。这意味着即使目标对象没有实现任何接口，也可以通过&lt;br&gt;
 CGLIB 来创建代理对象。&lt;br&gt;
工作原理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CGLIB 通过继承目标类来创建一个新的子类对象。&lt;/li&gt;
&lt;li&gt;在这个子类中，对父类的方法进行增强，也就是在方法调用前后添加额外的行为。&lt;/li&gt;
&lt;li&gt;这种方式不需要目标类实现任何接口，因此更加灵活。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 假设有一个未实现接口的类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Service&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;doSomething&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Doing something...&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 创建代理对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Enhancer&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;enhancer&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Enhancer&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;enhancer.setSuperclass(Service.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        enhancer.setCallback(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MethodInterceptor&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;title function_&#34;&gt;intercept&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object obj,Method method,Object[]args,MethodProxy proxy)&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Throwable&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Before method call&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Object result=proxy.invokeSuper(obj,args);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;After method call&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Service service=(Service)enhancer.create();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        service.doSomething();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
    </channel>
</rss>
