<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Joker • Posts by &#34;rocketmq&#34; tag</title>
        <link>https://silvercrow42.github.io/joker.github.io</link>
        <description></description>
        <language>zh-CN,en,default</language>
        <pubDate>Mon, 09 Sep 2024 13:06:48 +0800</pubDate>
        <lastBuildDate>Mon, 09 Sep 2024 13:06:48 +0800</lastBuildDate>
        <category>后端</category>
        <category>数据库</category>
        <category>NoSQL</category>
        <category>缓存</category>
        <category>Redis</category>
        <category>MQ</category>
        <category>RocketMQ</category>
        <category>java</category>
        <category>spring</category>
        <category>Redisson</category>
        <category>Zookeeper</category>
        <category>分布式锁</category>
        <item>
            <guid isPermalink="true">https://silvercrow42.github.io/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91SpringBoot%E6%95%B4%E5%90%88%E4%B8%8E%E4%BD%BF%E7%94%A8RocketMQ/</guid>
            <title>【RocketMQ】SpringBoot整合与使用RocketMQ（Windows）</title>
            <link>https://silvercrow42.github.io/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91SpringBoot%E6%95%B4%E5%90%88%E4%B8%8E%E4%BD%BF%E7%94%A8RocketMQ/</link>
            <category>后端</category>
            <category>MQ</category>
            <category>RocketMQ</category>
            <pubDate>Mon, 09 Sep 2024 13:06:48 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;由于是开发相关的文档，因此默认读者已经具备有 IDE，编者使用的是 IDEA 2022.1.3 以该版本作为演示基础。&lt;/p&gt;
&lt;h1 id=&#34;spring引入rocketmq&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring引入rocketmq&#34;&gt;#&lt;/a&gt; Spring 引入 RocketMQ&lt;/h1&gt;
&lt;p&gt;在适配 Spring 生态方面，RocketMQ 由于本身就是 Java 语言开发并且开源，拥有 Spring 开发基础就能够参照源码进行调试，并且其本身也提供了可直接用于 SpringBoot 整合的父项目，pom.xml 中通过如下配置即可引入该父项目。&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.rocketmq&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;rocketmq-spring-boot-starter&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;学习springrocketmq范例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#学习springrocketmq范例&#34;&gt;#&lt;/a&gt; 学习 SpringRocketMQ 范例&lt;/h1&gt;
&lt;p&gt;RocketMQ 对于 Spring 拥有良好的适配，并且拥有对应的参考项目，接下来我们借助该项目了解一下 RocketMQ 的架构及用法。&lt;/p&gt;
&lt;h2 id=&#34;基本概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基本概念&#34;&gt;#&lt;/a&gt; 基本概念&lt;/h2&gt;
&lt;p&gt;首先，为了方便理解，我们需要了解一下 RocketMQ 中的一些基本概念、运行逻辑与名词，方便后续理解掌握。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该章节整理自文章&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9hcnRpY2xlLzc4MDk2OA==&#34;&gt; RocketMQ 简介 - 阿里云开发者社区 (aliyun.com) &lt;/span&gt;原文更加详细，可通过链接了解详情。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;专有名词&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#专有名词&#34;&gt;#&lt;/a&gt; 专有名词&lt;/h3&gt;
&lt;h4 id=&#34;基本&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基本&#34;&gt;#&lt;/a&gt; 基本&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NameServer&lt;/strong&gt;：注册中心，相当于 ZooKeeper，不过 RocketMQ 进行了另外的实现，比较轻便。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Broker&lt;/strong&gt;：消息的管理中心，其负责管理 Topic 与保存传入的消息，并且会将自己注册到 NameServer 中供其调度，其由 RocketMQ 实现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Producer&lt;/strong&gt;：也称为消息发布者，负责产生消息，需要我们自行产生消息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consumer&lt;/strong&gt;：也称为消息订阅者，负责接收消息并处理消息，需要我们自行处理消息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;消息属性相关&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消息属性相关&#34;&gt;#&lt;/a&gt; 消息属性相关&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Topic&lt;/strong&gt;：消息主题，一级消息类型，生产者向其发送消息，消费者从中取出消息进行消费。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Message&lt;/strong&gt;：生产者向 Topic 发送并最终传送给消费者的数据消息体。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Message ID&lt;/strong&gt;：消息的全局唯一标识，由消息队列 RocketMQ 系统自动生成，唯一标识某条消息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Message Key&lt;/strong&gt;：消息的业务标识，由消息生产者（Producer）自行设置，可作为标识符使用标识一类业务逻辑，也可不提供。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tag&lt;/strong&gt;：消息标签，二级消息类型，由消息生产者（Producer）自行设置，用来进一步区分某个 Topic 下的消息&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;运行逻辑相关&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#运行逻辑相关&#34;&gt;#&lt;/a&gt; 运行逻辑相关&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;分区&lt;/strong&gt;：即 Topic Partition，物理上的概念。每个 Topic 包含一个或多个分区，由 RocketMQ 实现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;消费位点&lt;/strong&gt;：每个 Topic 会有多个分区，每个分区会统计当前消息的总条数，这个称为最大位点 MaxOffset；分区的起始位置对应的位置叫做起始位点 MinOffset。&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;Group&#34;&gt;&lt;strong&gt;Group&lt;/strong&gt;&lt;/a&gt;：对生产者或消费者进行分组，同一组的生产者或消费者通常仅生产或消费同一类消息，且消息发布或订阅的逻辑一致，因此通常需要保证同组中的生产者与生产者之间或者消费者与消费者之间业务逻辑一致。在&lt;a href=&#34;#%E9%9B%86%E7%BE%A4%E6%B6%88%E8%B4%B9&#34;&gt; 集群消费 &lt;/a&gt;模式下，该设计方式能够方便地对于生产者与消费者进行拓展。比如当某组中任务负载较大时，给组中额外增加多个生产者与消费者来分担该组的任务，降低负载。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Group ID&lt;/strong&gt;：Group 的唯一标识，用于定位 Group，可以自行定制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;队列&lt;/strong&gt;：一个 Topic 下会由一到多个队列来存储消息，其由 RocketMQ 实现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exactly-Once 投递语义&lt;/strong&gt;：Exactly-Once 投递语义是指发送到消息系统的消息只能被 Consumer 处理且仅处理一次，即使 Producer 重试消息发送导致某消息重复投递，该消息在 Consumer 也只被消费一次。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;消息收发相关&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消息收发相关&#34;&gt;#&lt;/a&gt; 消息收发相关&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span id=&#34;集群消费&#34;&gt;&lt;strong&gt;集群消费&lt;/strong&gt;&lt;/span&gt;：一个 Group ID 所标识的所有 Consumer 平均分摊消费消息。例如某个 Topic 有 9 条消息，一个 Group ID 有 3 个 Consumer 实例，那么在集群消费模式下每个实例平均分摊，只消费其中的 3 条消息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;广播消费&lt;/strong&gt;：一个 Group ID 所标识的所有 Consumer 都会各自消费某条消息一次。例如某个 Topic 有 9 条消息，一个 Group ID 有 3 个 Consumer 实例，那么在广播消费模式下每个实例都会各自消费 9 条消息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定时消息&lt;/strong&gt;：Producer 将消息发送到消息队列 RocketMQ 服务端，但并不期望这条消息立马投递，而是推迟到在当前时间点之后的某一个时间投递到 Consumer 进行消费，该消息即定时消息。&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;延时消息&#34;&gt;&lt;strong&gt;延时消息&lt;/strong&gt;&lt;/a&gt;：Producer 将消息发送到消息队列 RocketMQ 服务端，但并不期望这条消息立马投递，而是延迟一定时间后才投递到 Consumer 进行消费，该消息即延时消息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事务消息&lt;/strong&gt;：RocketMQ 提供类似 X/Open XA 的分布事务功能，通过消息队列 RocketMQ 的事务消息能达到分布式事务的最终一致。&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;顺序消息&#34;&gt;&lt;strong&gt;顺序消息&lt;/strong&gt;&lt;/a&gt;：RocketMQ 提供的一种按照顺序进行发布和消费的消息类型，分为全局顺序消息和分区顺序消息。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;全局顺序消息&lt;/strong&gt;：对于指定的一个 Topic，所有消息按照严格的先入先出（FIFO）的顺序进行发布和消费。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分区顺序消息&lt;/strong&gt;：对于指定的一个 Topic，所有消息根据 Sharding Key 进行区块分区。同一个分区内的消息按照严格的 FIFO 顺序进行发布和消费。Sharding Key 是顺序消息中用来区分不同分区的关键字段，和普通消息的 Message Key 是完全不同的概念。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;概念相关&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#概念相关&#34;&gt;#&lt;/a&gt; 概念相关&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;消息堆积&lt;/strong&gt;：Producer 已经将消息发送到消息队列 RocketMQ 的服务端，但由于 Consumer 消费能力有限，未能在短时间内将所有消息正确消费掉，此时在消息队列 RocketMQ 的服务端保存着未被消费的消息，该状态即消息堆积。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;消息过滤&lt;/strong&gt;：Consumer 可以根据消息标签（Tag）对消息进行过滤，确保 Consumer 最终只接收被过滤后的消息类型。消息过滤在消息队列 RocketMQ 的服务端完成。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;消息轨迹&lt;/strong&gt;：在一条消息从 Producer 发出到 Consumer 消费处理过程中，由各个相关节点的时间、地点等数据汇聚而成的完整链路信息。通过消息轨迹，您能清晰定位消息从 Producer 发出，经由消息队列 RocketMQ 服务端，投递给 Consumer 的完整链路，方便定位排查问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重置消费位点&lt;/strong&gt;：以时间轴为坐标，在消息持久化存储的时间范围内（默认 3 天），重新设置 Consumer 对已订阅的 Topic 的消费进度，设置完成后 Consumer 将接收设定时间点之后由 Producer 发送到消息队列 RocketMQ 服务端的消息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;死信队列&lt;/strong&gt;：死信队列用于处理无法被正常消费的消息。当一条消息初次消费失败，消息队列 RocketMQ 会自动进行消息重试；达到最大重试次数后，若消费依然失败，则表明 Consumer 在正常情况下无法正确地消费该消息。此时，消息队列 RocketMQ 不会立刻将消息丢弃，而是将这条消息发送到该 Consumer 对应的特殊队列中。&lt;br&gt;
消息队列 RocketMQ 将这种正常情况下无法被消费的消息称为死信消息（Dead-Letter Message），将存储死信消息的特殊队列称为死信队列（Dead-Letter Queue）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;消息流转模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消息流转模型&#34;&gt;#&lt;/a&gt; 消息流转模型&lt;/h3&gt;
&lt;p&gt;消息队列 RocketMQ 支持发布和订阅模型，消息生产者应用创建 Topic 并将消息发送到 Topic。消费者应用创建对 Topic 的订阅以便从其接收消息。通信可以是一对多（扇出）、多对一（扇入）和多对多。具体通信如下图所示。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91SpringBoot%E6%95%B4%E5%90%88%E4%B8%8E%E4%BD%BF%E7%94%A8RocketMQ/8c2f59ab52f03f20d7a859e7c8bb82b4.png&#34; class=&#34;&#34; title=&#34;消息流转模型&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;生产者集群&lt;/strong&gt;：用来表示发送消息应用，一个生产者集群下包含多个生产者实例，可以是多台机器，也可以是一台机器的多个进程，或者一个进程的多个生产者对象。&lt;br&gt;
一个生产者集群可以发送多个 Topic 消息。发送分布式事务消息时，如果生产者中途意外宕机，消息队列 RocketMQ 服务端会主动回调生产者集群的任意一台机器来确认事务状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;消费者集群&lt;/strong&gt;：用来表示消费消息应用，一个消费者集群下包含多个消费者实例，可以是多台机器，也可以是多个进程，或者是一个进程的多个消费者对象。&lt;br&gt;
一个消费者集群下的多个消费者以均摊方式消费消息。如果设置的是广播方式，那么这个消费者集群下的每个实例都消费全量数据。&lt;br&gt;
一个消费者集群对应一个 Group ID，一个 Group ID 可以订阅多个 Topic，如上图中的 Group 2 所示。Group 和 Topic 的订阅关系可以通过直接在程序中设置即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;获取范例项目&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取范例项目&#34;&gt;#&lt;/a&gt; 获取范例项目&lt;/h2&gt;
&lt;p&gt;在安装文档中涉及到的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9yb2NrZXRtcS1leHRlcm5hbHM=&#34;&gt; GitHub - apache/rocketmq-externals&lt;/span&gt; 项目 ReadMe 中也提及到了一个关联 Spring 的 RocketMQ 项目。&lt;br&gt;
&lt;img data-src=&#34;3dff3ecbdea41baddb69e24f1b1508d0.png&#34; alt=&#34;拓展项目&#34;&gt;&lt;/p&gt;
&lt;p&gt;项目地址如下&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9yb2NrZXRtcS1zcHJpbmc=&#34;&gt; GitHub - apache/rocketmq-spring&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;7f17ece34decafc3f316002155feaace.png&#34; alt=&#34;拓展项目2&#34;&gt;&lt;/p&gt;
&lt;p&gt;在&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9yb2NrZXRtcS1zcHJpbmcvdHJlZS9tYXN0ZXIvcm9ja2V0bXEtc3ByaW5nLWJvb3Qtc2FtcGxlcw==&#34;&gt; rocketmq-spring-boot-samples&lt;/span&gt; 中则是基于 Spring 搭建的 RocketMQ 的范例项目，包含生产者与消费者 demo，可以进行参考学习。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;00ec143cf8ed26fc1976f7b12d66bc0d.png&#34; alt=&#34;拓展项目3&#34;&gt;&lt;/p&gt;
&lt;p&gt;由于该项目未依赖父项目，可以单独将其拉下来运行，也可以将该 rocketmq-spring 项目完整拉取下来使用。&lt;/p&gt;
&lt;h3 id=&#34;span-id单独拉取单独拉取span&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#span-id单独拉取单独拉取span&#34;&gt;#&lt;/a&gt; &lt;span id=&#34;单独拉取&#34;&gt;单独拉取&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;项目拉取下来后使用 IDE 打开，IDEA 会自动加载 rocketmq-spring-boot-starter 的依赖，此时可能会出现依赖版本问题。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1855df2c2cc50f3a51b2be2fbcec82b3.png&#34; alt=&#34;下载样例项目&#34;&gt;&lt;/p&gt;
&lt;p&gt;当前版本的 pom，此处给 rocketmq-spring-boot-starter 配置的是 2.2.3 快照版本，但是在 maven 仓库中已经修改 2.2.3 为正式的版本号，rocketmq-spring-boot-starter 源码版本也已经定义为 2.2.4-SNAPSHOT，此处应该是版本升级的疏漏。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;c6b66903f7110483a2f6fbb565e1611f.png&#34; alt=&#34;下载样例项目2&#34;&gt;&lt;/p&gt;
&lt;p&gt;对应修改一下版本号即可，修改为 2.2.3 直接重新运行一下 maven 导入。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;829c1285ceee1dc98d4b41a5f7df3182.png&#34; alt=&#34;下载样例项目3&#34;&gt;&lt;/p&gt;
&lt;p&gt;子项目均被解析为 maven 项目（项目图标右下角带蓝色小方格即表示已被解析为 maven 项目，且其中的文件结构不再是普通的文件夹结构，而是已包结构排列，并且特定的文件夹具有特定图标，如 java、resources、test 等），并且依赖项不报红，代表项目导入成功。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;cc2e1fedcb6a16cd07d8f3765e39c30a.png&#34; alt=&#34;下载样例项目4&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;完整拉取&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#完整拉取&#34;&gt;#&lt;/a&gt; 完整拉取&lt;/h3&gt;
&lt;p&gt;项目拉取下来之后使用 IDE 打开，等待其安装依赖项，防止依赖项安装失败，或者找不到依赖项可以使用阿里的 maven 镜像。&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;mirrors&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;mirror&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;alimaven&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;aliyun maven&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;url&lt;/span&gt;&amp;gt;&lt;/span&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;url&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;mirrorOf&lt;/span&gt;&amp;gt;&lt;/span&gt;central&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;mirrorOf&lt;/span&gt;&amp;gt;&lt;/span&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;mirror&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;mirrors&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;项目导入成功。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;33ebac62954c73bc818a6b382c3fa99b.png&#34; alt=&#34;下载样例项目5&#34;&gt;&lt;/p&gt;
&lt;p&gt;编者此处 samples 并没有被解析为 maven，是由于在根目录的 pom.xml 中，该模块被默认注释掉了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;6131a66f3f3e5ef5034e7b983c52b9e4.png&#34; alt=&#34;下载样例项目6&#34;&gt;&lt;/p&gt;
&lt;p&gt;将 module 标签处的注释放开然后重新跑 maven 一遍，maven 就会去解析 rocketmq-spring-boot-samples 下的 pom.xml 文件。此时可能会遇到与上文&lt;a href=&#34;#%E5%8D%95%E7%8B%AC%E6%8B%89%E5%8F%96&#34;&gt; 单独拉取 &lt;/a&gt;时相同的情况，进入到 rocketmq-spring-boot-samples 下的 pom 中采用相同方式解决即可。&lt;/p&gt;
&lt;h2 id=&#34;补充说明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#补充说明&#34;&gt;#&lt;/a&gt; 补充说明&lt;/h2&gt;
&lt;p&gt;此处补充一些范例项目中出现的不常见的且不涉及 RocketMQ 逻辑的代码的解析，方便对范例项目进行理解。&lt;/p&gt;
&lt;h3 id=&#34;commandlinerunner&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#commandlinerunner&#34;&gt;#&lt;/a&gt; CommandLineRunner&lt;/h3&gt;
&lt;p&gt;在生产者与消费者项目中都使用了 CommandLineRunner 接口。这里来探究以下该接口的效果。&lt;/p&gt;
&lt;p&gt;在启动 spring 应用时，会使用到如下的基本的 spring 启动代码 &lt;code&gt;SpringApplication.run(ProducerApplication.class, args)&lt;/code&gt; ，进入到该方法中可以看到在经过多个默认的 run 方法后最终调用到了一个 run 方法中。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;2a07379410e7944edce47ae2826160c1.png&#34; alt=&#34;run&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到在该方法中 spring 进行了一系列环境的初始化操作，将 spring 环境运行起来。这部分的逻辑都不重要。&lt;/p&gt;
&lt;p&gt;在 try 代码段的末尾，我们可以看到其调用了一段 &lt;code&gt;callRunners(context, applicationArguments)&lt;/code&gt;  方法，传入了 spring 容器对象以及通过启动参数 args 构造出来的 ApplicationArguments 参数对象。&lt;/p&gt;
&lt;p&gt;进入到该方法中可以看到如下方法体。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;8b8970858a59e8a0e33e6f90dc0713f3.png&#34; alt=&#34;run2&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以推出该方法的逻辑是将 ApplicationRunner.class 与 CommandLineRunner.class 构造出来的 Bean 添加到 runners 列表中，排序后依次将运行参数传入然后进行调用。&lt;/p&gt;
&lt;p&gt;简而言之，在启动 Spring 应用后，会在应用装配完毕时，运行 CommandLineRunner 与 ApplicationRunner 中的代码。并且该运行时机是要晚于 InitializingBean 的，能够确保所有 Bean 均已加载完毕。可以用来作为 Spring 应用启动后的初始化数据的方案，因为 bean 已装填完毕，可以正常使用 Spring 的功能。&lt;/p&gt;
&lt;p&gt;需要注意的是此处的代码是影响到 Spring 主线程的，如果出现异常会打断 Spring 应用的启动过程。&lt;/p&gt;
&lt;p&gt;在 demo 中的效果就是，对应的方法仅仅在启动时运行一遍，里面涉及到的就是一些演示代码。&lt;/p&gt;
&lt;h2 id=&#34;理解范例项目&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#理解范例项目&#34;&gt;#&lt;/a&gt; 理解范例项目&lt;/h2&gt;
&lt;h3 id=&#34;生产者producer&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#生产者producer&#34;&gt;#&lt;/a&gt; 生产者（Producer）&lt;/h3&gt;
&lt;h4 id=&#34;extrocketmqtemplateconfiguration&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#extrocketmqtemplateconfiguration&#34;&gt;#&lt;/a&gt; @ExtRocketMQTemplateConfiguration&lt;/h4&gt;
&lt;p&gt;该类是一个注解类，其携带了 Spring 中的 @Component 类，因此被该注解修饰的类会被 Spring 解析为一个 bean 组件，可以直接通过 spring bean 的一些方式来使用。&lt;/p&gt;
&lt;p&gt;很容易就能看出，该注解是用来修饰 RocketMQTemplate 及其拓展类，并且主要修饰发送方，即生产者端的 RocketMQTemplate。该注解能够为 RocketMQTemplate 及其拓展类规定一些默认的运行参数，生产者 demo 中就使用了其中的 nameServer 参数用于指定目标 NameServer 地址，使用了 tlsEnable 用于指定是否开启 tls 加密，使用 instanceName 指定实例名称。&lt;/p&gt;
&lt;h4 id=&#34;rocketmqtemplate&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rocketmqtemplate&#34;&gt;#&lt;/a&gt; RocketMQTemplate&lt;/h4&gt;
&lt;p&gt;在生产者 demo 中，使用了该类中非常多种的发送方法，并且该类大多数方法都是用于生产者发送消息。因此将该类放到生产者部分讲解。需要注意的是对于每一类功能逻辑而言，应该单独拓展一个 RocketMQTemplate 子类，因为&lt;a id=&#34;当使用事务消息时&#34;&gt;当使用事务消息时&lt;/a&gt;，事务监听器是直接与 RocketMQTemplate 类进行绑定的，因此为了防止事务状态紊乱出错，推荐每个功能模块单独拓展一个 RocketMQTemplate 子类，后续会进行详述。因为该类中的方法众多，为了节省篇幅且便于拓展理解，这里对其进行大概的分类解释，便于自行了解这些方法的含义。&lt;/p&gt;
&lt;h5 id=&#34;常见参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常见参数&#34;&gt;#&lt;/a&gt; 常见参数&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;destination：用来定位当前参数需要发送到哪个 Topic，以及携带什么 Tag，标准格式为 &lt;code&gt;topicName:tags&lt;/code&gt; （文档注释中此处为 tags，但是据查生产者是无法为消息指定多个 tag 的）。&lt;br&gt;
例如：“test:tag1”，表示当前消息将会发送到名为 test 的 Topic 中，并且 tag 为 tag1。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;payload：消息载体，可以接收任何类对象，在发送前一般都会经过 MessageBuilder.withPayload (payload) 转化为 Message 对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;message/messages：一般是 Message 类对象，发送动作主要就是通过该类对象来进行，可以通过 MessageBuilder 获得&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;timeout：发送超时时间，单位毫秒，当不指定时一般默认为 3 秒。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;delayLevel：延时级别，该参数不支持任意时间精度，仅支持特定的 level，例如定时 5s,10s,1m 等。其中 level=0 级表示不延时，level=1 表示 1 级延时，level=2 表示 2 级延时，以此类推。&lt;br&gt;
延时级别的配置在 broker 配置（ROCKETMQ 根路径 /conf/broker.conf）中 &lt;code&gt;messageDelayLevel=1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h&lt;/code&gt; 。时间单位支持：s、m、h、d，分别表示秒、分、时、天。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;delayTime：延时时间，可以详细指定延时时间，默认单位为毫秒。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;deliverTimeMills：交付时间，可以详细指定延时时间，默认单位为毫秒。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mode：与 delayTime 或 deliverTimeMills 同时出现，接收 DelayMode 枚举对象。具有三种值，分别是 DELAY_SECONDS，DELAY_MILLISECONDS，DELIVER_TIME_MILLISECONDS。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单独使用 deliverTimeMills 时，mode 默认为 DelayMode.DELIVER_TIME_MILLISECONDS&lt;/li&gt;
&lt;li&gt;单独使用 delayTime 时，默认 mode 为 DELAY_MILLISECONDS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;未查到二者的详细说明可能为新增 api，判断二者区别可能在于延时投递的方式不同。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hashKey：用于为消息进行定位和排序。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;type：一般出现于同步消息时，用于规定返回消息的类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sendCallback/rocketMQLocalRequestCallback：用于异步消息时的回调。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sendCallback：为 SendCallback 对象，其中接收返回值时使用的是 SendResult 对象，内部以 byte 数组保存信息。&lt;/li&gt;
&lt;li&gt;rocketMQLocalRequestCallback：为 RocketMQLocalRequestCallback&amp;lt;T&amp;gt; 对象，返回值可以直接用泛型 T 接收，内部会自动转换成 T。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;同步与异步&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#同步与异步&#34;&gt;#&lt;/a&gt; 同步与异步&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;带 sync 的方法：表示同步方法，调用该方法之后会阻塞当前线程，直达该方法成功完成、超时或抛错。&lt;br&gt;
例如：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;SendResult&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;sendResult&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; rocketMQTemplate.syncSend(springTopic, &lt;span class=&#34;string&#34;&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;syncSend1 to topic %s sendResult=%s %n&amp;quot;&lt;/span&gt;, springTopic, sendResult);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里必须要等到 syncSend 返回了 SendResult 后才会来到下方的 printf。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;带 async 的方法：表示异步方法，其中需要定义对应的回调，即 SendCallback。调用该方法后并不会阻塞当前线程，当该方法处理成功或者失败是则会自行运行 SendCallback 中对应的代码块。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;rocketMQTemplate.asyncSend(orderPaidTopic, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;OrderPaidEvent&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;T_001&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BigDecimal&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;88.00&amp;quot;&lt;/span&gt;)), &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SendCallback&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;onSuccess&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(SendResult var1)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;async onSucess SendResult=%s %n&amp;quot;&lt;/span&gt;, var1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;onException&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Throwable var1)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;async onException Throwable=%s %n&amp;quot;&lt;/span&gt;, var1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里该方法并没有返回值，该 async 方法会启用另外一个线程去发送消息，开始发送后放行主线程，由该线程完成剩下的接收并回调 SendCallback 操作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;发送模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#发送模式&#34;&gt;#&lt;/a&gt; 发送模式&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;send：普通的发送方法，发送一条普通消息并通过 SendResult 接收返回消息，其中的数据形式为序列化后的 byte 数组形式，不可直接使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;convertAndSend：来自 Spring 的默认实现 AbstractMessageSendingTemplate 提供的方法，该方法会调用配置好的 MessageConverter 为消息载体进行转化，转化成 Message 对象后再进行发送，效果上与 send 并无不同。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sendAndReceive：发送并接收远端的响应，同步与异步方式均可用。该可以将远端的响应反序列化成指定类型的对象，同步方式下需要提供 Type 对象来表明返回值类型，而异步方式下则需要提供 &lt;code&gt;RocketMQLocalRequestCallback&amp;lt;T&amp;gt;&lt;/code&gt;  对象用来异步回调，该对象回调时则是通过其所提供的泛型来确定返回值类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;oneWay：发送消息，但是不追踪其返回，也就无法判断是否发送成功，拥有较高的运行性能，但是通过该方式发送可能会出现消息丢失的情况。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;delay：发送延时消息，需要提供一个延时，其他与普通消息一致，基本逻辑同上方对&lt;a href=&#34;#%E5%BB%B6%E6%97%B6%E6%B6%88%E6%81%AF&#34;&gt; 延时消息 &lt;/a&gt;的表述一致。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;orderly：发送顺序消息，需要为消息提供一个 hashKey，用于对消息的排序，其他与普通消息一致，基本逻辑同上方对&lt;a href=&#34;#%E9%A1%BA%E5%BA%8F%E6%B6%88%E6%81%AF&#34;&gt; 顺序消息 &lt;/a&gt;的表述一致。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;发送事务消息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#发送事务消息&#34;&gt;#&lt;/a&gt; 发送事务消息&lt;/h5&gt;
&lt;p&gt;sendMessageInTransaction 用于发送事务消息，在构造消息时，可以通过 &lt;code&gt;setHeader(RocketMQHeaders.TRANSACTION_ID, [事务id])&lt;/code&gt;  的方式向 header 中设置事务 id 用作事务标识，后续也可以从 header 中取出来使用。&lt;/p&gt;
&lt;h6 id=&#34;事务监听器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务监听器&#34;&gt;#&lt;/a&gt; 事务监听器&lt;/h6&gt;
&lt;p&gt;在使用事务前，我们需要为事务实现一个事务监听器，节省篇幅，我们这里使用 demo 中较简单的监听器示例来讲解。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RocketMQTransactionListener(rocketMQTemplateBeanName = &amp;quot;extRocketMQTemplate&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ExtTransactionListenerImpl&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RocketMQLocalTransactionListener&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; RocketMQLocalTransactionState &lt;span class=&#34;title function_&#34;&gt;executeLocalTransaction&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Message msg, Object arg)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;ExtTransactionListenerImpl executeLocalTransaction and return UNKNOWN. \n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; RocketMQLocalTransactionState.UNKNOWN;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; RocketMQLocalTransactionState &lt;span class=&#34;title function_&#34;&gt;checkLocalTransaction&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Message msg)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;ExtTransactionListenerImpl checkLocalTransaction and return COMMIT. \n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; RocketMQLocalTransactionState.COMMIT;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实现事务监听器后，需要通过 @RocketMQTransactionListener 注解将监听器与 rocketMQTemplate 的 bean 进行关联，参数 rocketMQTemplateBeanName 用来确定需要关联的 RocketMQTemplate 的 bean 的名称，其默认值为 rocketMQTemplate。其与 RocketMQTemplate 是一一对应的关系，这也就是为什么上文提到&lt;a href=&#34;#%E5%BD%93%E4%BD%BF%E7%94%A8%E4%BA%8B%E5%8A%A1%E6%B6%88%E6%81%AF%E6%97%B6&#34;&gt;当使用事务消息时&lt;/a&gt;，最好单独拓展一个 rocketMQTemplate。&lt;/p&gt;
&lt;p&gt;并且该监听器也会被注册为 bean，并通过 org.apache.rocketmq.spring.autoconfigure.RocketMQTransactionConfiguration 类中的以下方法将 bean 对象与对应的 rocketMQTemplate 的 bean 对象进行关联。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;afterSingletonsInstantiated&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Map&amp;lt;String, Object&amp;gt; beans = &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.applicationContext.getBeansWithAnnotation(RocketMQTransactionListener.class)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .entrySet().stream().filter(entry -&amp;gt; !ScopedProxyUtils.isScopedTarget(entry.getKey()))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    beans.forEach(&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;::registerTransactionListener);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;registerTransactionListener&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String beanName, Object bean)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Class&amp;lt;?&amp;gt; clazz = AopProxyUtils.ultimateTargetClass(bean);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!RocketMQLocalTransactionListener.class.isAssignableFrom(bean.getClass())) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;IllegalStateException&lt;/span&gt;(clazz + &lt;span class=&#34;string&#34;&gt;&amp;quot; is not instance of &amp;quot;&lt;/span&gt; + RocketMQLocalTransactionListener.class.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;RocketMQTransactionListener&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;annotation&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; clazz.getAnnotation(RocketMQTransactionListener.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;RocketMQTemplate&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;rocketMQTemplate&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (RocketMQTemplate) applicationContext.getBean(annotation.rocketMQTemplateBeanName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (((TransactionMQProducer) rocketMQTemplate.getProducer()).getTransactionListener() != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;IllegalStateException&lt;/span&gt;(annotation.rocketMQTemplateBeanName() + &lt;span class=&#34;string&#34;&gt;&amp;quot; already exists RocketMQLocalTransactionListener&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ((TransactionMQProducer) rocketMQTemplate.getProducer()).setExecutorService(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ThreadPoolExecutor&lt;/span&gt;(annotation.corePoolSize(), annotation.maximumPoolSize(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                                                                                       annotation.keepAliveTime(), annotation.keepAliveTimeUnit(), &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LinkedBlockingDeque&lt;/span&gt;&amp;lt;&amp;gt;(annotation.blockingQueueSize())));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ((TransactionMQProducer) rocketMQTemplate.getProducer()).setTransactionListener(RocketMQUtil.convert((RocketMQLocalTransactionListener) bean));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    log.debug(&lt;span class=&#34;string&#34;&gt;&amp;quot;RocketMQLocalTransactionListener &amp;#123;&amp;#125; register to &amp;#123;&amp;#125; success&amp;quot;&lt;/span&gt;, clazz.getName(), annotation.rocketMQTemplateBeanName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也就是说最终事务中使用到的监听器，是注入到 spring 容器中的监听器 bean，并不是新创建的，设计上需要注意。&lt;/p&gt;
&lt;h6 id=&#34;监听器的用处&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#监听器的用处&#34;&gt;#&lt;/a&gt; 监听器的用处&lt;/h6&gt;
&lt;p&gt;在事务监听器中包含两个方法，分别是&lt;a id=&#34;executeLocalTransaction&#34;&gt; &lt;code&gt;executeLocalTransaction&lt;/code&gt; &lt;/a&gt;和&lt;a id=&#34;checkLocalTransaction&#34;&gt; &lt;code&gt;checkLocalTransaction&lt;/code&gt; &lt;/a&gt;。，从事务的运行逻辑顺序入手，来探究一下这些方法的作用。以下给出事务的运行逻辑。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图片引用自文章&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzaDIwNTAvYXJ0aWNsZS9kZXRhaWxzLzEyNDUxNzM1NQ==&#34;&gt; RocketMQ 事务消息机制_rocketmqtransactionlistener&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;c2eb61b0adcdc503d4314ecc070e2f25.png&#34; alt=&#34;引用图片&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在调用 Transaction 相关方法后，会先将消息发送出去，此时采用的是同步方式，即当前线程会被阻塞，直到获取到远端返回过来的发送结果。此时来到远端 broker 中的事务消息并不是一个可用消息，而是一个半消息，是无法被消费者消费的 **（此处对应图中第 1 步）**。&lt;/li&gt;
&lt;li&gt;根据发送结果的状态来进行，最终会提供一个 LocalTransactionState 来作为最终事务处理的依据：
&lt;ol&gt;
&lt;li&gt;当状态为 SEND_OK 时 **（此处对应图中第 2 步）&lt;strong&gt;，就会来到&lt;a href=&#34;#executeLocalTransaction&#34;&gt; executeLocalTransaction&lt;/a&gt; 方法将此前发送的消息传入作为参数传入，由其进行本地事务的后续处理，然后提供一个事务状态 RocketMQLocalTransactionState 枚举。其中包含三种值并最终与 LocalTransactionState 相对应&lt;/strong&gt;（此处对应图中第 3 步）**。
&lt;ul&gt;
&lt;li&gt;COMMIT 对应 LocalTransactionState 的&lt;a href=&#34;#%E6%8F%90%E4%BA%A4&#34;&gt;提交&lt;/a&gt;态&lt;/li&gt;
&lt;li&gt;ROLLBACK 对应 LocalTransactionState 的&lt;a href=&#34;#%E5%9B%9E%E6%BB%9A&#34;&gt;回滚&lt;/a&gt;态&lt;/li&gt;
&lt;li&gt;UNKNOWN 对应 LocalTransactionState 的&lt;a href=&#34;#%E6%9C%AA%E7%9F%A5&#34;&gt;未知&lt;/a&gt;态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当状态为 FLUSH_DISK_TIMEOUT，FLUSH_SLAVE_TIMEOUT 或者 SLAVE_NOT_AVAILABLE 时，LocalTransactionState 将被置为&lt;a href=&#34;#%E5%9B%9E%E6%BB%9A&#34;&gt;回滚&lt;/a&gt;态。&lt;/li&gt;
&lt;li&gt;其他情况下，状态默认为&lt;a href=&#34;#%E6%9C%AA%E7%9F%A5&#34;&gt;未知&lt;/a&gt;态。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;最后根据 LocalTransactionState 来对事务进行处理：
&lt;ul&gt;
&lt;li&gt;&lt;a id=&#34;提交&#34;&gt;提交&lt;/a&gt;，告知 Broker 将当前事务消息置为可用，可以提供给消费者消费 **（此处对应图中第 4 步 Commit）**。&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;回滚&#34;&gt;回滚&lt;/a&gt;，告知 Broker 回滚当前事务，删除对应的事务消息 **（此处对应图中第 4 步 Rollback）**。&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;未知&#34;&gt;未知&lt;/a&gt;，可能当前事务应故（网络断开，回传消息受阻等）未能获取到消息的发送状态，或者由 executeLocalTransaction 提供了 UNKNOWN 的状态，接下来等待固定的时间后，broker 发起对事务的回查请求回查事务状态 **（此处对应图中第 5 步）&lt;strong&gt;。&lt;br&gt;
消费者此时正常响应后，会进入到事务监听器的&lt;a href=&#34;#checkLocalTransaction&#34;&gt; &lt;code&gt;checkLocalTransaction&lt;/code&gt; &lt;/a&gt; 中来给出一个事务状态，判断事务接下来的处理方式&lt;/strong&gt;（此处对应图中第 6 步）&lt;strong&gt;。最后发送给 broker 进行响应处理&lt;/strong&gt;（此处对应图中第 7 步）**&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可见监听器的主要用处，就是让开发者能够自行决定事务的提交和回滚，自定义实现消息的事务流程。发送事务消息的默认实现来自于 &lt;code&gt;org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl#sendMessageInTransaction&lt;/code&gt;  方法，可以自行跟踪查看。&lt;/p&gt;
&lt;h6 id=&#34;demo理解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#demo理解&#34;&gt;#&lt;/a&gt; demo 理解&lt;/h6&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RocketMQTransactionListener(rocketMQTemplateBeanName = &amp;quot;extRocketMQTemplate&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ExtTransactionListenerImpl&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RocketMQLocalTransactionListener&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; RocketMQLocalTransactionState &lt;span class=&#34;title function_&#34;&gt;executeLocalTransaction&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Message msg, Object arg)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;ExtTransactionListenerImpl executeLocalTransaction and return UNKNOWN. \n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; RocketMQLocalTransactionState.UNKNOWN;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; RocketMQLocalTransactionState &lt;span class=&#34;title function_&#34;&gt;checkLocalTransaction&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Message msg)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;ExtTransactionListenerImpl checkLocalTransaction and return COMMIT. \n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; RocketMQLocalTransactionState.COMMIT;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再看 demo 中的监听器梳理逻辑，就不难看出，该监听器关联名称为 &lt;code&gt;extRocketMQTemplate&lt;/code&gt;  的 bean 组件，当我们通过使用该组件的 &lt;code&gt;sendMessageInTransaction&lt;/code&gt;  方法发送事务消息时。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;消息发送成功后首先进入到 &lt;code&gt;executeLocalTransaction&lt;/code&gt;  方法中，此处返回 UNKNOWN，也就是此时 broker 并不能确定当前事务需要如何处理，因此 broker 仍然将消息置为半消息状态，保存消息但是该消息不能被访问。&lt;/li&gt;
&lt;li&gt;再一段时间后，broker 再次尝试回查事务状态，此时来到 &lt;code&gt;checkLocalTransaction&lt;/code&gt;  方法，此处返回 COMMIT，表示可以提交消息了，于是 broker 将消息置为可用状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;消费者consumer&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消费者consumer&#34;&gt;#&lt;/a&gt; 消费者（Consumer）&lt;/h3&gt;
&lt;p&gt;对于消费者而言，消费消息具有两种模式，一种是 PUSH 模式，即当队列中存在消息，则 RocketMQ 服务端便将该消息 push 给对应消费该消息的消费者，即消费者被动消费消息，一种是 PULL 模式，即消费者通过 PULL 主动从 RocketMQ 服务端中获取未被消费的所有消息进行消费，即消费者主动消费。接下来讲解一下这两种模式的实现。&lt;/p&gt;
&lt;h4 id=&#34;push模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#push模式&#34;&gt;#&lt;/a&gt; PUSH 模式&lt;/h4&gt;
&lt;p&gt;push 模式下比较简单，消费者被动消费消息，只需要实现对应的监听器即可，由 RocketMQ 自行管理推送的逻辑。&lt;/p&gt;
&lt;h5 id=&#34;rocketmqmessagelistener&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rocketmqmessagelistener&#34;&gt;#&lt;/a&gt; @RocketMQMessageListener&lt;/h5&gt;
&lt;p&gt;该类是一个注解类 ，用于添加到消费者监听器上，为该监听器指定一些对应的运行参数。例如&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RocketMQMessageListener(nameServer = &amp;quot;$&amp;#123;demo.rocketmq.myNameServer&amp;#125;&amp;quot;, topic = &amp;quot;$&amp;#123;demo.rocketmq.topic.user&amp;#125;&amp;quot;, consumerGroup = &amp;quot;user_consumer&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里为监听器指定了 NameServer 地址，并且指定了对应订阅的 topic，同时也可以通过 selectorType（默认值为 SelectorType.TAG）与 selectorExpression 为监听器指定对应的 tag 等分类信息，consumerGroup 为消费者指定了对应的&lt;a href=&#34;#Group&#34;&gt;消费者组&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;需要注意的是，该注解并不包含 Component 注解，因此不会将对应的监听器注册为 Spring bean 组件，需要自己另行注册或添加对应注解。&lt;/p&gt;
&lt;h5 id=&#34;rocketmqlistener&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rocketmqlistener&#34;&gt;#&lt;/a&gt; RocketMQListener&lt;/h5&gt;
&lt;p&gt;该类为一个接口，是作为消费者需要实现的监听器接口之一，其接口代码为：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RocketMQListener&lt;/span&gt;&amp;lt;T&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;onMessage&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(T message)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该接口接受一个泛型参数，该泛型参数用于指定接受到的消息类型，当接受到对应的消息时，对应的消息内容会被转换为 T 所指定的类型传入到参数 message 中。&lt;/p&gt;
&lt;p&gt;demo 样例：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RocketMQMessageListener(nameServer = &amp;quot;$&amp;#123;demo.rocketmq.myNameServer&amp;#125;&amp;quot;, topic = &amp;quot;$&amp;#123;demo.rocketmq.topic.user&amp;#125;&amp;quot;, consumerGroup = &amp;quot;user_consumer&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;UserConsumer&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RocketMQListener&lt;/span&gt;&amp;lt;User&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;onMessage&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(User message)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;######## user_consumer received: %s ; age: %s ; name: %s \n&amp;quot;&lt;/span&gt;, message, message.getUserAge(), message.getUserName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该监听器会自动接收配置项 demo.rocketmq.topic.user 中的消息，当接收到消息时，会将消息中的二进制码部分反序列化为 User 对象作为 message 传入然后进行消费。&lt;/p&gt;
&lt;h5 id=&#34;rocketmqreplylistener&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rocketmqreplylistener&#34;&gt;#&lt;/a&gt; RocketMQReplyListener&lt;/h5&gt;
&lt;p&gt;该类为一个接口，是作为消费者需要实现的监听器接口之一，其接口代码为：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RocketMQReplyListener&lt;/span&gt;&amp;lt;T, R&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    R &lt;span class=&#34;title function_&#34;&gt;onMessage&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(T message)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实现该接口的监听器就支持对传入的消息回传进行对应的响应结果。该类接受的两个类型泛型 T、R 中，T 表示接受到的消息类型，效果同 RocketMQListener 中的 T；R 表示回传的响应数据的类型。&lt;/p&gt;
&lt;p&gt;demo 样例：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RocketMQMessageListener(topic = &amp;quot;$&amp;#123;demo.rocketmq.objectRequestTopic&amp;#125;&amp;quot;, consumerGroup = &amp;quot;$&amp;#123;demo.rocketmq.objectRequestConsumer&amp;#125;&amp;quot;, selectorExpression = &amp;quot;$&amp;#123;demo.rocketmq.tag&amp;#125;&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ObjectConsumerWithReplyUser&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RocketMQReplyListener&lt;/span&gt;&amp;lt;User, User&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; User &lt;span class=&#34;title function_&#34;&gt;onMessage&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(User user)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;------- ObjectConsumerWithReplyUser received: %s \n&amp;quot;&lt;/span&gt;, user);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;replyUser&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;User&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        replyUser.setUserAge((&lt;span class=&#34;type&#34;&gt;byte&lt;/span&gt;) &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        replyUser.setUserName(&lt;span class=&#34;string&#34;&gt;&amp;quot;replyUserName&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; replyUser;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该监听器能够接收配置项 demo.rocketmq.objectRequestTopic 指定的 topic 中具有由配置项 demo.rocketmq.tag 指定的 tag 的消息，当接收到消息时，会将消息中的二进制码部分反序列化为 User 对象作为 message 传入然后进行消费，完毕后构造了一个新的 User 对象作为响应返回，RocketMQ 将会将该返回值回传给消费者。&lt;/p&gt;
&lt;h4 id=&#34;pull模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#pull模式&#34;&gt;#&lt;/a&gt; PULL 模式&lt;/h4&gt;
&lt;p&gt;PULL 模式需要使用到此前提到的 RocketMQTemplate 类中的 receive 方法。&lt;/p&gt;
&lt;h5 id=&#34;extrocketmqconsumerconfiguration&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#extrocketmqconsumerconfiguration&#34;&gt;#&lt;/a&gt; @ExtRocketMQConsumerConfiguration&lt;/h5&gt;
&lt;p&gt;该类是一个注解类，同 @ExtRocketMQTemplateConfiguration 注解类似，作用于 RocketMQTemplate 子类上，不过主要用于提供给消费者主动拉取消息。例如&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@ExtRocketMQConsumerConfiguration(topic = &amp;quot;$&amp;#123;demo.rocketmq.topic&amp;#125;&amp;quot;, group = &amp;quot;string_consumer&amp;quot;, tlsEnable = &amp;quot;$&amp;#123;demo.ext.consumer.tlsEnable&amp;#125;&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里为 RocketMQTemplate 指定了拉取的 topic，并指定了当前的消费者组，指定了是否开启 tls 加密。&lt;br&gt;
ser 对象作为响应返回，RocketMQ 将会将该返回值回传给消费者。&lt;/p&gt;
&lt;h4 id=&#34;pull模式-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#pull模式-2&#34;&gt;#&lt;/a&gt; PULL 模式&lt;/h4&gt;
&lt;p&gt;PULL 模式需要使用到此前提到的 RocketMQTemplate 类中的 receive 方法。&lt;/p&gt;
&lt;h5 id=&#34;extrocketmqconsumerconfiguration-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#extrocketmqconsumerconfiguration-2&#34;&gt;#&lt;/a&gt; @ExtRocketMQConsumerConfiguration&lt;/h5&gt;
&lt;p&gt;该类是一个注解类，同 @ExtRocketMQTemplateConfiguration 注解类似，作用于 RocketMQTemplate 子类上，不过主要用于提供给消费者主动拉取消息。例如&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@ExtRocketMQConsumerConfiguration(topic = &amp;quot;$&amp;#123;demo.rocketmq.topic&amp;#125;&amp;quot;, group = &amp;quot;string_consumer&amp;quot;, tlsEnable = &amp;quot;$&amp;#123;demo.ext.consumer.tlsEnable&amp;#125;&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里为 RocketMQTemplate 指定了拉取的 topic，并指定了当前的消费者组，指定了是否开启 tls 加密。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://silvercrow42.github.io/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2%EF%BC%88Windows%EF%BC%89/</guid>
            <title>【RocketMQ】安装与部署（Windows）</title>
            <link>https://silvercrow42.github.io/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2%EF%BC%88Windows%EF%BC%89/</link>
            <category>后端</category>
            <category>MQ</category>
            <category>RocketMQ</category>
            <pubDate>Mon, 09 Sep 2024 11:46:16 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;准备工作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#准备工作&#34;&gt;#&lt;/a&gt; 准备工作&lt;/h1&gt;
&lt;h2 id=&#34;下载&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#下载&#34;&gt;#&lt;/a&gt; 下载&lt;/h2&gt;
&lt;p&gt;可以在官网上下载&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yb2NrZXRtcS5hcGFjaGUub3JnL3poLw==&#34;&gt; RocketMQ・官方网站 | RocketMQ (apache.org)&lt;/span&gt;&lt;br&gt;
 或者直接到 Apache 的文件站点下&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hcmNoaXZlLmFwYWNoZS5vcmcvZGlzdC9yb2NrZXRtcS8=&#34;&gt; Index of /dist/rocketmq (apache.org)&lt;/span&gt; 找到对应版本下载。&lt;/p&gt;
&lt;p&gt;这里以编写时的最新版本为例，选择 Binary 版本下载，该版本为编译后的版本，可以直接使用。&lt;/p&gt;
&lt;p&gt;Source 下载获取的是源码，需要经过编译后才可以使用，不过比较方便自行扩展，有扩展需求可以使用该版本自行编译。&lt;br&gt;
&lt;img data-src=&#34;c687d3c664944954288c48a951b7aa5e.png&#34; alt=&#34;官网下载页&#34;&gt;&lt;br&gt;
下载完成后解压出来是如下的文件结构。&lt;br&gt;
&lt;img data-src=&#34;7e6608c24fb49bcd9982d9b25fa9c819.png&#34; alt=&#34;下载后的文件结构&#34;&gt;&lt;br&gt;
以下以 windows 为环境演示。&lt;/p&gt;
&lt;p&gt;RocketMQ 依赖的是 Java 的运行环境，因此系统上应该安装 Java 并且拥有对应的环境变量 JAVA_HOME.&lt;/p&gt;
&lt;p&gt;RocketMQ 使用的 java 环境是 java8，对于高版本环境可能需要进行一些适配性的改动。&lt;/p&gt;
&lt;p&gt;在 RocketMQ 目录下的 bin 文件夹中有对应的服务启动脚本，包含 Linux 可运行的 sh 文件以及 Windows 可运行的 cmd 文件。&lt;/p&gt;
&lt;h2 id=&#34;环境变量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#环境变量&#34;&gt;#&lt;/a&gt; 环境变量&lt;/h2&gt;
&lt;p&gt;解压完毕后需要手动添加名为 ROCKETMQ_HOME 的环境变量，索引到 RocketMQ 的解压目录即可，设置完毕后需要重启电脑。&lt;br&gt;
&lt;img data-src=&#34;b9d692cbe18a30e8c27f757d0208f0ec.png&#34; alt=&#34;环境变量设置&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;nameserver&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nameserver&#34;&gt;#&lt;/a&gt; NameServer&lt;/h1&gt;
&lt;p&gt;打开 cmd 命令行后，通过 cd 命令进入到解压目录的 bin 目录下。然后使用 &lt;code&gt;start mqnamesrv.cmd &lt;/code&gt; 命令新开一个命令行窗口启动 NameServer&lt;br&gt;
&lt;img data-src=&#34;31d4e322a0dd35ade7d8198071115f27.png&#34; alt=&#34;新窗口启动NameServer&#34;&gt;&lt;br&gt;
 或者直接使用 &lt;code&gt;mqnamesrv.cmd&lt;/code&gt;  在当前命令行中启动。&lt;/p&gt;
&lt;p&gt;其本质是通过此前设置的环境变量找到 RocketMQ 的 bin 路径，再通过该路径下的 runserver.cmd 脚本文件实现运行的，因此启动项配置其实来自 runserver.cmd 中。&lt;/p&gt;
&lt;p&gt;出现 The Name Server boot success 提示则表示 NameServer 服务启动成功，启动成功后不要关闭该命令窗口。&lt;/p&gt;
&lt;h2 id=&#34;可能出现的问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#可能出现的问题&#34;&gt;#&lt;/a&gt; 可能出现的问题&lt;/h2&gt;
&lt;h3 id=&#34;please-set-the-rocketmq_home-variable-in-your-environment&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#please-set-the-rocketmq_home-variable-in-your-environment&#34;&gt;#&lt;/a&gt; Please set the ROCKETMQ_HOME variable in your environment!&lt;/h3&gt;
&lt;p&gt;这个问题提示其实不够准确，并不一定是在我们没有设置环境变量时出现。&lt;br&gt;
&lt;img data-src=&#34;45ac5254ebbaf057393dc8743474c119.png&#34; alt=&#34;问题定位1&#34;&gt;&lt;br&gt;
 因为在运行过程中，脚本文件是通过环境变量来定位到 runserver.cmd 的位置再通过该脚本来启动应用的，因此在当 runserver.cmd 文件定位不到时才会出现该问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;处理方法&lt;/strong&gt;：可以重新打开一个命令行，然后通过 &lt;code&gt;echo %ROCKETMQ_HOME%&lt;/code&gt; &lt;br&gt;
 打印一下环境变量出来检查一下环境变量是否有误。同时这种方式也能够让环境变量刷新，如果此前曾经修改过环境变量而没有重启电脑，则这种方式能够让环境变量刷新成修改后的值。&lt;/p&gt;
&lt;p&gt;如果仍然没有解决，则可以进入到该对应路径下看看是否缺失了 runserver.cmd 文件，到这一步也都没有发现问题，那就只能重启一下试试，可能环境变量的更改并没有生效。&lt;/p&gt;
&lt;h3 id=&#34;unrecognized-vm-option&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#unrecognized-vm-option&#34;&gt;#&lt;/a&gt; Unrecognized VM option&lt;/h3&gt;
&lt;p&gt;在通过 runserver.cmd 运行时，如果以高于 java8 的版本作为环境运行可能会出现如下错误：&lt;strong&gt;Unrecognized VM option ’&lt;br&gt;
UseConcMarkSweepGC’&lt;/strong&gt;&lt;br&gt;
&lt;img data-src=&#34;41367fb287fe7a305b9b51f4c0fc252b.png&#34; alt=&#34;问题定位2-1&#34;&gt;&lt;br&gt;
 这是因为在运行脚本中，包含了一些对 CMSGC 的一些调优参数。&lt;br&gt;
&lt;img data-src=&#34;32ef686e52b0f1c87d1ef0640b87d779.png&#34; alt=&#34;问题定位2-2&#34;&gt;&lt;br&gt;
 据查在 java9 中使用 G1 来作为 GC 的默认实现，从而废弃了 CMS 相关的一些参数。因此启动时需要进行一些相关参数的改动，或者将 java 降级，指定特定的 jre8 来作为虚拟机运行。&lt;/p&gt;
&lt;p&gt;在 sh 版本的 runserver 脚本中对 java 的版本进行了专门的适配，可以识别 java 版本采用特定的指令。如果使用 cmd 脚本时仍需要在 Java 高版本环境中运行，也可以参照 sh 版本脚本修改一下对应的虚拟机参数。&lt;br&gt;
&lt;img data-src=&#34;3e12c58e5dd33d6864284ce2a5f8b783.png&#34; alt=&#34;问题定位2-3&#34;&gt;&lt;br&gt;
&lt;strong&gt; 处理方法&lt;/strong&gt;：这里提供一个根据 sh 脚本修改过来的适配高版本 java 的 cmd 脚本，使用高版本运行时用该脚本替代原本的 runserver.cmd 即可。&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@&lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; off&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem Licensed to the Apache Software Foundation (ASF) under one or more&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem contributor license agreements.  See the NOTICE file distributed with&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem this work &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; additional information regarding copyright ownership.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem The ASF licenses this file to You under the Apache License, Version &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem (the &lt;span class=&#34;string&#34;&gt;&amp;quot;License&amp;quot;&lt;/span&gt;); you may not use this file except &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; compliance with&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem the License.  You may obtain a &lt;span class=&#34;built_in&#34;&gt;copy&lt;/span&gt; of the License at&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem     http://www.apache.org/licenses/LICENSE&lt;span class=&#34;literal&#34;&gt;-2&lt;/span&gt;.&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem Unless required by applicable law or agreed to &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; writing, software&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem distributed under the License is distributed on an &lt;span class=&#34;string&#34;&gt;&amp;quot;AS IS&amp;quot;&lt;/span&gt; BASIS,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem See the License &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; the specific language governing permissions and&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem limitations under the License.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; not exist &lt;span class=&#34;string&#34;&gt;&amp;quot;%JAVA_HOME%\bin\java.exe&amp;quot;&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; Please &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; the JAVA_HOME variable &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; your environment, We need java(x64)! &amp;amp; &lt;span class=&#34;keyword&#34;&gt;EXIT&lt;/span&gt; /B &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA=%JAVA_HOME%\bin\java.exe&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;setlocal&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; BASE_DIR=%~dp0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; BASE_DIR=%BASE_DIR:~&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;literal&#34;&gt;-1&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; %%d &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; (%BASE_DIR%) &lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; BASE_DIR=%%~dpd&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; CLASSPATH=.;%BASE_DIR%conf;%BASE_DIR%lib\*;%CLASSPATH%&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPT=%JAVA_OPT% -server -Xms4g -Xmx4g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPT=%JAVA_OPT% -XX:+UseG1GC -XX:G1HeapRegionSize=16m -XX:G1ReservePercent=25 -XX:InitiatingHeapOccupancyPercent=30 -XX:SoftRefLRUPolicyMSPerMB=0&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPT=%JAVA_OPT% -verbose:gc -Xloggc:&amp;quot;&lt;/span&gt;%USERPROFILE%\rmq_srv_gc.log&lt;span class=&#34;string&#34;&gt;&amp;quot; -XX:+PrintGCDetails&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPT=%JAVA_OPT% -XX:-OmitStackTraceInFastThrow&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPT=%JAVA_OPT% -XX:-UseLargePages&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPT=%JAVA_OPT% %JAVA_OPT_EXT% -cp &amp;quot;&lt;/span&gt;%CLASSPATH%&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; %*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;%JAVA%&amp;quot;&lt;/span&gt; %JAVA_OPT% %*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;为什么不对 cmd 脚本进行适配呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;sh 脚本中的 java 版本适配其本质上，是通过运行  &lt;code&gt;java -version&lt;/code&gt;  命令&lt;br&gt;
获取到控制台输出的完整 java 版本信息。再通过字符串匹配的方式来获取 java 版本号，再去以 8 为基准去匹配对应的运行参数。&lt;/p&gt;
&lt;p&gt;经过测试，windows 平台下的 java -version 获取到的版本字符串通过命令行是无法捕获到的。&lt;br&gt;
&lt;img data-src=&#34;b7e356d6851105053394a790c1b7de7f.png&#34; alt=&#34;问题定位2-4&#34;&gt;&lt;br&gt;
&lt;img data-src=&#34;f051b72f858d696bb84b1f1c4eed0d5b.png&#34; alt=&#34;问题定位2-5&#34;&gt;&lt;br&gt;
&lt;img data-src=&#34;1c6676e01f035d76dad63ad38e9526d7.png&#34; alt=&#34;问题定位2-6&#34;&gt;&lt;br&gt;
 推测也就是这个原因 windows 导致没有办法单独通过命令行来确定 java 版本号，也自然就没有办法参照其进行适配了。&lt;/p&gt;
&lt;h3 id=&#34;找不到或无法加载主类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#找不到或无法加载主类&#34;&gt;#&lt;/a&gt; 找不到或无法加载主类&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;1e4aced6e93a87a20cd4152794c4fe3b.png&#34; alt=&#34;问题定位3-1&#34;&gt;&lt;br&gt;
 该问题的主要诱因是环境变量中存在空格。导致解析命令时环境变量被分割成了两个命令。&lt;br&gt;
&lt;img data-src=&#34;7ac4047b712f71097b7aff8518a1ec40.png&#34; alt=&#34;问题定位3-2&#34;&gt;&lt;br&gt;
&lt;strong&gt; 处理方法&lt;/strong&gt;：最好的解决办法是变更目录，在 RocketMQ 的路径中不要存在空格。&lt;/p&gt;
&lt;p&gt;还有，其实当命令中存在不需要被分割的空格时，只需要使用 双引号 &amp;quot;&amp;quot; 将对应的命令包裹起来即可。&lt;br&gt;
&lt;img data-src=&#34;3de37e56ef97c4035b99d58bca794e1a.png&#34; alt=&#34;问题定位3-3&#34;&gt;&lt;br&gt;
 但是此处经过尝试后发现，该处被错误分割的情况消失，但是仍然存在问题，可能在 runserver 中的 BASE_DIR 与 CLASSPATH 等变量也需要加上双引号防止错误分割，解决起来较为麻烦，而且不清楚后续会不会造成其他问题，因此不再对这种情况进行处理。&lt;br&gt;
&lt;img data-src=&#34;58845da6a693a14c8060ad228ef530fa.png&#34; alt=&#34;问题定位3-4&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;broker&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#broker&#34;&gt;#&lt;/a&gt; Broker&lt;/h1&gt;
&lt;h2 id=&#34;启动&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#启动&#34;&gt;#&lt;/a&gt; 启动&lt;/h2&gt;
&lt;p&gt;在启动前需要先添加一个环境变量 NAMESRV_ADDR，用来指向 nameServer 服务的地址。因为测试部署时服务部署在本机，所以使用 localhost 地址，加上此前默认的端口 9876 作为环境变量值。&lt;br&gt;
&lt;img data-src=&#34;66fc0e9db8f6c85a73f5ccd3f895102c.png&#34; alt=&#34;broker环境变量&#34;&gt;&lt;br&gt;
打开 cmd 命令行后，通过 cd 命令进入到 RocketMQ 解压目录的 bin 目录下，运行命令 &lt;code&gt;start mqbroker.cmd autoCreateTopicEnable=true&lt;/code&gt;  启动服务。&lt;br&gt;
&lt;img data-src=&#34;5ddf87816c70d2451863102cdf413784.png&#34; alt=&#34;broker启动&#34;&gt;&lt;br&gt;
出现 The broker […] boot success 提示则表示 broker 服务启动成功，启动成功后同样不要关闭该命令窗口。&lt;/p&gt;
&lt;h3 id=&#34;可能出现的问题-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#可能出现的问题-2&#34;&gt;#&lt;/a&gt; 可能出现的问题&lt;/h3&gt;
&lt;p&gt;因为运行逻辑类似，因此也会出现上述情况类似的问题，此处不过多阐述，对照着修改即可。&lt;/p&gt;
&lt;p&gt;关于 java 版本适配的问题，此处也提供一个高版本可用的运行脚本:&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@&lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; off&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem Licensed to the Apache Software Foundation (ASF) under one or more&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem contributor license agreements.  See the NOTICE file distributed with&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem this work &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; additional information regarding copyright ownership.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem The ASF licenses this file to You under the Apache License, Version &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem (the &lt;span class=&#34;string&#34;&gt;&amp;quot;License&amp;quot;&lt;/span&gt;); you may not use this file except &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; compliance with&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem the License.  You may obtain a &lt;span class=&#34;built_in&#34;&gt;copy&lt;/span&gt; of the License at&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem     http://www.apache.org/licenses/LICENSE&lt;span class=&#34;literal&#34;&gt;-2&lt;/span&gt;.&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem Unless required by applicable law or agreed to &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; writing, software&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem distributed under the License is distributed on an &lt;span class=&#34;string&#34;&gt;&amp;quot;AS IS&amp;quot;&lt;/span&gt; BASIS,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem See the License &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; the specific language governing permissions and&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem limitations under the License.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; not exist &lt;span class=&#34;string&#34;&gt;&amp;quot;%JAVA_HOME%\bin\java.exe&amp;quot;&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; Please &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; the JAVA_HOME variable &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; your environment, We need java(x64)! &amp;amp; &lt;span class=&#34;keyword&#34;&gt;EXIT&lt;/span&gt; /B &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA=%JAVA_HOME%\bin\java.exe&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;setlocal&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; BASE_DIR=%~dp0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; BASE_DIR=%BASE_DIR:~&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;literal&#34;&gt;-1&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; %%d &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; (%BASE_DIR%) &lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; BASE_DIR=%%~dpd&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; CLASSPATH=.;%BASE_DIR%conf;%BASE_DIR%lib\*;%CLASSPATH%&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem ===========================================================================================&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem  JVM Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem ===========================================================================================&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPT=%JAVA_OPT% -server -Xms2g -Xmx2g&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPT=%JAVA_OPT% -XX:+UseG1GC -XX:G1HeapRegionSize=16m -XX:G1ReservePercent=25 -XX:InitiatingHeapOccupancyPercent=30 -XX:SoftRefLRUPolicyMSPerMB=0 -XX:SurvivorRatio=8&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPT=%JAVA_OPT% -verbose:gc -Xlog:gc*:file=%USERPROFILE%/mq_gc.log:time,tags:filecount=5,filesize=30M&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPT=%JAVA_OPT% -XX:-OmitStackTraceInFastThrow&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPT=%JAVA_OPT% -XX:+AlwaysPreTouch&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPT=%JAVA_OPT% -XX:MaxDirectMemorySize=15g&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPT=%JAVA_OPT% -XX:-UseLargePages -XX:-UseBiasedLocking&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPT=%JAVA_OPT% -Drocketmq.client.logUseSlf4j=true&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPT=%JAVA_OPT% %JAVA_OPT_EXT% -cp %CLASSPATH%&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;%JAVA%&amp;quot;&lt;/span&gt; %JAVA_OPT% %*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用其取代 runbroker.cmd 即可。&lt;/p&gt;
&lt;h4 id=&#34;导包问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#导包问题&#34;&gt;#&lt;/a&gt; 导包问题&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;java.lang.IllegalAccessError: &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;org&lt;/span&gt;.apache.rocketmq.common.UtilAll (in unnamed &lt;span class=&#34;keyword&#34;&gt;module&lt;/span&gt; @&lt;span class=&#34;number&#34;&gt;0x4bde3f8a&lt;/span&gt;) cannot access &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;sun&lt;/span&gt;.nio.ch.DirectBuffer (in &lt;span class=&#34;keyword&#34;&gt;module&lt;/span&gt; java.base) because &lt;span class=&#34;keyword&#34;&gt;module&lt;/span&gt; java.base does not export sun.nio.ch to unnamed &lt;span class=&#34;keyword&#34;&gt;module&lt;/span&gt; @&lt;span class=&#34;number&#34;&gt;0x4bde3f8a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在启动参数中额外添加一句 &lt;code&gt;--add-exports=java.base/sun.nio.ch=ALL-UNNAMED&lt;/code&gt;  即可.。&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;%JAVA%&amp;quot;&lt;/span&gt; %JAVA_OPT% %*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更改为&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;%JAVA%&amp;quot;&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;--add-exports&lt;/span&gt;=java.base/sun.nio.ch=ALL&lt;span class=&#34;literal&#34;&gt;-UNNAMED&lt;/span&gt;  %JAVA_OPT% %*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;控制台&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#控制台&#34;&gt;#&lt;/a&gt; 控制台&lt;/h1&gt;
&lt;p&gt;上述服务搭建成功后服务就已经可用了，但是为了便于管理其中的数据，我们需要搭建一个控制台，用来提供一个前端页面供我们管理数据。&lt;/p&gt;
&lt;h2 id=&#34;获取源码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取源码&#34;&gt;#&lt;/a&gt; 获取源码&lt;/h2&gt;
&lt;p&gt;在早些时候，控制台项目隶属于&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9yb2NrZXRtcS1leHRlcm5hbHM=&#34;&gt; GitHub - apache/rocketmq-externals&lt;/span&gt;&lt;br&gt;
 项目下，位于其中的 rocketmq-console 中，其中还包含一些其他的 RocketMQ 的拓展项目，可以参考使用。后来控制台项目单独独立了出来，我们可以在&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9yb2NrZXRtcS1kYXNoYm9hcmQ=&#34;&gt; GitHub - apache/rocketmq-dashboard&lt;/span&gt;&lt;br&gt;
 仓库中找到。&lt;/p&gt;
&lt;p&gt;首先将其源码通过以下 git 指令克隆到本地。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;git clone https://github.com/apache/rocketmq-dashboard.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;安装依赖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#安装依赖&#34;&gt;#&lt;/a&gt; 安装依赖&lt;/h2&gt;
&lt;p&gt;克隆完毕后因为还需要处理依赖，有条件的话可以直接使用 JAVA 编译器打开，使用 IDEA 导入为 maven 项目的话会自动加载依赖，其本质上就是 java&lt;br&gt;
spring 的项目。如果依赖下载较慢可以使用阿里的 maven 仓库作为中央仓库，因为本来就是阿里的项目，应该不会存在依赖版本等的问题。&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;mirrors&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;mirror&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;alimaven&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;aliyun maven&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;url&lt;/span&gt;&amp;gt;&lt;/span&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;url&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;mirrorOf&lt;/span&gt;&amp;gt;&lt;/span&gt;central&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;mirrorOf&lt;/span&gt;&amp;gt;&lt;/span&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;mirror&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;mirrors&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不借助编译器处理依赖的话可以 cd 到项目目录下，自行使用 mvn 的指令去处理依赖。&lt;/p&gt;
&lt;h2 id=&#34;启动-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#启动-2&#34;&gt;#&lt;/a&gt; 启动&lt;/h2&gt;
&lt;p&gt;在依赖安装完成之后，在运行之前先要修改一下配置。其实配置项的功能描述在 application.yml 中都有，没有的大多是 spring 的基本配置，查 spring 对应的配置项即可。此处只包括影响到应用启动的配置。&lt;/p&gt;
&lt;h3 id=&#34;配置nameserver地址&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置nameserver地址&#34;&gt;#&lt;/a&gt; 配置 NameServer 地址&lt;/h3&gt;
&lt;p&gt;在 application.yml 中，需要配置一下此前的 NameServer 的 ip 地址，因为源码中的配置文件中 NameServer 地址配置多了一个 127.0.0.2:&lt;br&gt;
9876 地址，运行过程中连接不上可能会报错，删掉即可。&lt;br&gt;
&lt;img data-src=&#34;ab64039c47990f681af7755c6bd38b34.png&#34; alt=&#34;配置控制台1&#34;&gt;&lt;br&gt;
 此处可以配置一个，也可以配置多个，使用 yml 的数组写法即可，即在每一项数组元素均使用 “-” 开头。&lt;/p&gt;
&lt;p&gt;如果在 properties 文件中数组则是类似于通常数组的写法，只不过每个元素都要单独写一项，比较麻烦。&lt;/p&gt;
&lt;figure class=&#34;highlight properties&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;rocketmq.config.namesrvAddrs[0]&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;127.0.0.1:9876&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;rocketmq.config.namesrvAddrs[1]&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;127.0.0.2:9876&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;配置启动端口&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置启动端口&#34;&gt;#&lt;/a&gt; 配置启动端口&lt;/h3&gt;
&lt;p&gt;也可以配置一下当前控制台的启动使用的访问端口，随意一个空闲端口即可。&lt;br&gt;
&lt;img data-src=&#34;b8fde91e184e69dc9ff077345526cc86.png&#34; alt=&#34;配置控制台2&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;启动-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#启动-3&#34;&gt;#&lt;/a&gt; 启动&lt;/h3&gt;
&lt;p&gt;使用编译器启动，通过 &lt;code&gt;mvn spring-boot:run&lt;/code&gt;  启动或者通过 maven 打包成 jar 包然后运行 jar 包均可，运行成功后如下图。&lt;/p&gt;
&lt;h2 id=&#34;部署&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#部署&#34;&gt;#&lt;/a&gt; 部署&lt;/h2&gt;
&lt;p&gt;部署时可以参照传统的 maven 项目进行打包部署，另外官方也提供了 docker 镜像来便捷部署，根据 ReadMe 中描述，通过以下 docker 指令拉取 docker 镜像。&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker pull apacherocketmq/rocketmq&lt;span class=&#34;literal&#34;&gt;-dashboard&lt;/span&gt;:latest&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后通过以下指令修改参数后运行即可&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker run &lt;span class=&#34;literal&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;--name&lt;/span&gt; rocketmq&lt;span class=&#34;literal&#34;&gt;-dashboard&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;-e&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPTS=-Drocketmq.namesrv.addr=127.0.0.1:9876&amp;quot;&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;8080&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;8080&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;-t&lt;/span&gt; apacherocketmq/rocketmq&lt;span class=&#34;literal&#34;&gt;-dashboard&lt;/span&gt;:latest&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中 rockermq.namesrv.addr 的值为此前部署的 NameServer 的地址，-p 参数冒号前的值为应用在虚拟机中的启动端口，后面的值应该映射到宿主机开放给该服务的端口。&lt;/p&gt;
&lt;h2 id=&#34;访问&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#访问&#34;&gt;#&lt;/a&gt; 访问&lt;/h2&gt;
&lt;p&gt;启动后通过部署的 ip+port 端口的形式访问即可。&lt;br&gt;
&lt;img data-src=&#34;3dad91ef206cef1c546745174e4bf0ea.png&#34; alt=&#34;控制台界面&#34;&gt;&lt;br&gt;
需要中文界面的话可以通过 ChangeLanguage 来切换语言。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;017a22bd9ca7d08ef9fe8bfd5559ad35.png&#34; alt=&#34;英文&#34;&gt;&lt;br&gt;
&lt;img data-src=&#34;de23f48aafc56e32495a4e8b2ef513b7.png&#34; alt=&#34;汉语&#34;&gt;&lt;br&gt;
多语化文件放置在源码目录下的 &lt;code&gt;src/main/resources/static/src/i18n&lt;/code&gt;  文件夹中，可参照前端的 i18n 标准自行修改翻译或者添加其他语言。&lt;br&gt;
&lt;img data-src=&#34;cf3c5cd85f377a8d290e097b17e8dadd.png&#34; alt=&#34;多语&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
