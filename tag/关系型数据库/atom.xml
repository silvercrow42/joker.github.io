<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://silvercrow42.github.io/joker.github.io</id>
    <title>Joker • Posts by &#34;关系型数据库&#34; tag</title>
    <link href="https://silvercrow42.github.io/joker.github.io" />
    <updated>2024-10-09T01:58:28.000Z</updated>
    <category term="后端" />
    <category term="数据库" />
    <category term="关系型数据库" />
    <category term="Mysql" />
    <category term="MQ" />
    <category term="RocketMQ" />
    <category term="操作系统" />
    <category term="Linux" />
    <category term="java" />
    <category term="多线程" />
    <category term="NoSQL" />
    <category term="缓存" />
    <category term="Redis" />
    <category term="Zookeeper" />
    <category term="spring" />
    <category term="Redisson" />
    <category term="分布式锁" />
    <entry>
        <id>https://silvercrow42.github.io/joker.github.io/2024/10/09/%E3%80%90Mysql%E3%80%91Mysql%E8%AF%A6%E8%A7%A3/</id>
        <title>【Mysql】Mysql详解</title>
        <link rel="alternate" href="https://silvercrow42.github.io/joker.github.io/2024/10/09/%E3%80%90Mysql%E3%80%91Mysql%E8%AF%A6%E8%A7%A3/"/>
        <content type="html">&lt;h2 id=&#34;什么是mysql&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是mysql&#34;&gt;#&lt;/a&gt; 什么是 Mysql&lt;/h2&gt;
&lt;p&gt;MySQL 是一个广泛使用的开源关系型数据库管理系统（RDBMS），由 MySQL AB 公司开发，后来被 Sun Microsystems 收购，最终成为 Oracle&lt;br&gt;
 公司的一部分。MySQL 被广泛应用于 Web 应用、企业应用和个人项目中。以下是关于 MySQL 的一些详细介绍：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高性能：MySQL 提供了高效的查询处理机制，能够处理大量的并发请求。&lt;/li&gt;
&lt;li&gt;易于使用：安装简单，配置容易，支持多种操作系统（如 Windows、Linux 和 macOS）。&lt;/li&gt;
&lt;li&gt;安全性：提供了丰富的安全特性，包括用户认证、权限管理、数据加密等。&lt;/li&gt;
&lt;li&gt;扩展性：支持多种存储引擎（如 InnoDB、MyISAM 等），可以根据不同的应用场景选择合适的存储引擎。&lt;/li&gt;
&lt;li&gt;开源免费：作为开源软件，MySQL 可以免费使用，适用于各种规模的应用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据库结构&lt;br&gt;
 MySQL 使用标准的关系模型，包括表、视图、索引等基本组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表：存储数据的基本单位，由行和列组成。&lt;/li&gt;
&lt;li&gt;视图：虚拟表，基于一个或多个表的查询结果。&lt;/li&gt;
&lt;li&gt;索引：用于加快数据检索速度的特殊数据结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存储引擎&lt;br&gt;
 MySQL 支持多种存储引擎，其中最常用的是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;InnoDB：支持事务处理、外键约束和行级锁定。&lt;/li&gt;
&lt;li&gt;MyISAM：不支持事务处理，但性能较高，适合读取密集型应用。&lt;/li&gt;
&lt;li&gt;Memory：将数据存储在内存中，提供极高的读写速度，但不适合持久化存储。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;mysql的数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mysql的数据类型&#34;&gt;#&lt;/a&gt; Mysql 的数据类型&lt;/h2&gt;
&lt;h3 id=&#34;数值类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数值类型&#34;&gt;#&lt;/a&gt; 数值类型&lt;/h3&gt;
&lt;p&gt;MySQL 支持所有标准 SQL 数值数据类型。&lt;/p&gt;
&lt;p&gt;这些类型包括严格数值数据类型 (INTEGER、SMALLINT、DECIMAL 和 NUMERIC)，以及近似数值数据类型 (FLOAT、REAL 和 DOUBLE PRECISION)。&lt;/p&gt;
&lt;p&gt;关键字 INT 是 INTEGER 的同义词，关键字 DEC 是 DECIMAL 的同义词。&lt;/p&gt;
&lt;p&gt;BIT 数据类型保存位字段值，并且支持 MyISAM、MEMORY、InnoDB 和 BDB 表。&lt;/p&gt;
&lt;p&gt;作为 SQL 标准的扩展，MySQL 也支持整数类型 TINYINT、MEDIUMINT 和 BIGINT。下面的表显示了需要的每个整数类型的存储和范围。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;大小 (bytes)&lt;/th&gt;
&lt;th&gt;范围（有符号）&lt;/th&gt;
&lt;th&gt;范围（无符号）&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;TINYINT&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;(-128，127)&lt;/td&gt;
&lt;td&gt;(0，255)&lt;/td&gt;
&lt;td&gt;小整数值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SMALLINT&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;(-32 768，32 767)&lt;/td&gt;
&lt;td&gt;(0，65 535)&lt;/td&gt;
&lt;td&gt;大整数值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MEDIUMINT&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;(-8 388 608，8 388 607)&lt;/td&gt;
&lt;td&gt;(0，16 777 215)&lt;/td&gt;
&lt;td&gt;大整数值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;INT 或 INTEGER&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;(-2 147 483 648，2 147 483 647)&lt;/td&gt;
&lt;td&gt;(0，4 294 967 295)&lt;/td&gt;
&lt;td&gt;大整数值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BIGINT&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)&lt;/td&gt;
&lt;td&gt;(0，18 446 744 073 709 551 615)&lt;/td&gt;
&lt;td&gt;极大整数值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FLOAT&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)&lt;/td&gt;
&lt;td&gt;0，(1.175 494 351 E-38，3.402 823 466 E+38)&lt;/td&gt;
&lt;td&gt;单精度浮点数值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DOUBLE&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)&lt;/td&gt;
&lt;td&gt;0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)&lt;/td&gt;
&lt;td&gt;双精度浮点数值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DECIMAL&lt;/td&gt;
&lt;td&gt;对 DECIMAL (M,D) ，如果 M&amp;gt;D，为 M+2 否则为 D+2&lt;/td&gt;
&lt;td&gt;依赖于 M 和 D 的值&lt;/td&gt;
&lt;td&gt;依赖于 M 和 D 的值&lt;/td&gt;
&lt;td&gt;小数值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;日期和时间类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#日期和时间类型&#34;&gt;#&lt;/a&gt; 日期和时间类型&lt;/h3&gt;
&lt;p&gt;表示时间值的日期和时间类型为 DATETIME、DATE、TIMESTAMP、TIME 和 YEAR。&lt;/p&gt;
&lt;p&gt;每个时间类型有一个有效值范围和一个 &amp;quot;零&amp;quot; 值，当指定不合法的 MySQL 不能表示的值时使用 &amp;quot;零&amp;quot; 值。&lt;/p&gt;
&lt;p&gt;TIMESTAMP 类型有专有的自动更新特性，将在后面描述。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;大小 (bytes)&lt;/th&gt;
&lt;th&gt;范围&lt;/th&gt;
&lt;th&gt;格式&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;DATE&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1000-01-01/9999-12-31&lt;/td&gt;
&lt;td&gt;YYYY-MM-DD&lt;/td&gt;
&lt;td&gt;日期值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TIME&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;‘-838:59:59’/‘838:59:59’&lt;/td&gt;
&lt;td&gt;HH:MM:SS&lt;/td&gt;
&lt;td&gt;时间值或持续时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;YEAR&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1901/2155&lt;/td&gt;
&lt;td&gt;YYYY&lt;/td&gt;
&lt;td&gt;年份值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DATETIME&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;‘1000-01-01 00:00:00’ 到 ‘9999-12-31 23:59:59’&lt;/td&gt;
&lt;td&gt;YYYY-MM-DD hh:mm:ss&lt;/td&gt;
&lt;td&gt;混合日期和时间值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TIMESTAMP&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;‘1970-01-01 00:00:01’ UTC 到 ‘2038-01-19 03:14:07’ UTC 结束时间是第 2147483647 秒，北京时间 2038-1-19 11:14:07，格林尼治时间 2038 年 1 月 19 日 凌晨 03:14:07&lt;/td&gt;
&lt;td&gt;YYYY-MM-DD hh:mm:ss&lt;/td&gt;
&lt;td&gt;混合日期和时间值，时间戳&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;字符串类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串类型&#34;&gt;#&lt;/a&gt; 字符串类型&lt;/h3&gt;
&lt;p&gt;字符串类型指 CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM 和 SET。该节描述了这些类型如何工作以及如何在查询中使用这些类型。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;大小 (bytes)&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CHAR&lt;/td&gt;
&lt;td&gt;0-255&lt;/td&gt;
&lt;td&gt;定长字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VARCHAR&lt;/td&gt;
&lt;td&gt;0-65535&lt;/td&gt;
&lt;td&gt;变长字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TINYBLOB&lt;/td&gt;
&lt;td&gt;0-255&lt;/td&gt;
&lt;td&gt;不超过 255 个字符的二进制字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TINYTEXT&lt;/td&gt;
&lt;td&gt;0-255&lt;/td&gt;
&lt;td&gt;短文本字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BLOB&lt;/td&gt;
&lt;td&gt;0-65 535&lt;/td&gt;
&lt;td&gt;二进制形式的长文本数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TEXT&lt;/td&gt;
&lt;td&gt;0-65 535&lt;/td&gt;
&lt;td&gt;长文本数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MEDIUMBLOB&lt;/td&gt;
&lt;td&gt;0-16 777 215&lt;/td&gt;
&lt;td&gt;二进制形式的中等长度文本数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MEDIUMTEXT&lt;/td&gt;
&lt;td&gt;0-16 777 215&lt;/td&gt;
&lt;td&gt;中等长度文本数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LONGBLOB&lt;/td&gt;
&lt;td&gt;0-4 294 967 295&lt;/td&gt;
&lt;td&gt;二进制形式的极大文本数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LONGTEXT&lt;/td&gt;
&lt;td&gt;0-4 294 967 295&lt;/td&gt;
&lt;td&gt;极大文本数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注意：char (n) 和 varchar (n) 中括号中 n 代表字符的个数，并不代表字节个数，比如 CHAR (30) 就可以存储 30 个字符。&lt;/p&gt;
&lt;p&gt;CHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。&lt;/p&gt;
&lt;p&gt;BINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。&lt;/p&gt;
&lt;p&gt;BLOB 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 BLOB 类型：TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。它们区别在于可容纳存储范围不同。&lt;/p&gt;
&lt;p&gt;有 4 种 TEXT 类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4 种 BLOB 类型，可存储的最大长度不同，可根据实际情况选择。&lt;/p&gt;
&lt;h3 id=&#34;枚举与集合类型enumeration-and-set-types&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#枚举与集合类型enumeration-and-set-types&#34;&gt;#&lt;/a&gt; 枚举与集合类型（Enumeration and Set Types）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ENUM: 枚举类型，用于存储单一值，可以选择一个预定义的集合。&lt;/li&gt;
&lt;li&gt;SET: 集合类型，用于存储多个值，可以选择多个预定义的集合。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;空间数据类型spatial-data-types&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#空间数据类型spatial-data-types&#34;&gt;#&lt;/a&gt; 空间数据类型（Spatial Data Types）&lt;/h3&gt;
&lt;p&gt;GEOMETRY, POINT, LINESTRING, POLYGON, MULTIPOINT, MULTILINESTRING, MULTIPOLYGON, GEOMETRYCOLLECTION:&lt;br&gt;
 用于存储空间数据（地理信息、几何图形等）。&lt;/p&gt;
&lt;h2 id=&#34;索引&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#索引&#34;&gt;#&lt;/a&gt; 索引&lt;/h2&gt;
&lt;p&gt;MySQL 中的索引是一种数据结构，它可以帮助数据库系统更快地检索数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从物理结构上可以分为聚集索引和非聚集索引两类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;聚簇索引指索引的键值的逻辑顺序与表中相应行的物理顺序一致，即每张表只能有一个聚簇索引，也就是我们常说的主键索引；
&lt;ul&gt;
&lt;li&gt;默认情况下，InnoDB 表的主键就是聚簇索引。&lt;/li&gt;
&lt;li&gt;如果没有显式定义主键，则 InnoDB 会自动创建一个隐藏的主键作为聚簇索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非聚簇索引的逻辑顺序则与数据行的物理顺序不一致。
&lt;ul&gt;
&lt;li&gt;非聚簇索引（也称为二级索引）只存储索引键值和指向实际数据行的指针。&lt;/li&gt;
&lt;li&gt;当通过非聚簇索引查找数据时，首先找到索引条目，然后通过指针访问实际的数据行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从应用上可以划分为一下几类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;普通索引：MySQL 中的基本索引类型，没有什么限制，允许在定义索引的列中插入重复值和空值，纯粹为了提高查询效率。通过 ALTER&lt;br&gt;
TABLE&lt;br&gt;
table_name ADD INDEX index_name (column) 创建；&lt;/li&gt;
&lt;li&gt;唯一索引：索引列中的值必须是唯一的，但是允许为空值。通过 ALTER TABLE table_name ADD UNIQUE index_name (column) 创建；&lt;/li&gt;
&lt;li&gt;主键索引：特殊的唯一索引，也成聚簇索引，不允许有空值，并由数据库帮我们自动创建；&lt;/li&gt;
&lt;li&gt;组合索引：组合表中多个字段创建的索引，遵守最左前缀匹配规则；&lt;/li&gt;
&lt;li&gt;全文索引：只有在 MyISAM 引擎上才能使用，同时只支持 CHAR、VARCHAR、TEXT 类型字段上使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hash-索引&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#hash-索引&#34;&gt;#&lt;/a&gt; Hash 索引&lt;/h3&gt;
&lt;p&gt;在 MySQL 中，哈希索引（Hash Index）是一种特殊的索引类型，主要用于快速查找数据。哈希索引利用哈希算法将索引键值映射到一个固定大小的哈希表中，从而实现快速定位数据。&lt;/p&gt;
&lt;p&gt;哈希索引的基本实现原理如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;哈希算法：
&lt;ul&gt;
&lt;li&gt;哈希算法将索引键值转换为一个固定长度的哈希值。&lt;/li&gt;
&lt;li&gt;这个哈希值被用作索引表中的索引项。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;哈希表：
&lt;ul&gt;
&lt;li&gt;哈希表是一个数组，每个数组元素对应一个哈希值。&lt;/li&gt;
&lt;li&gt;查找时，通过计算键值的哈希值可以直接定位到对应的数组元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;MySQL 中各引擎的的哈希索引实现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;InnoDB 存储引擎&lt;br&gt;
在 InnoDB 存储引擎中，哈希索引主要用于内部结构，例如辅助索引和临时表。InnoDB 并不支持用户级别的哈希索引。&lt;/li&gt;
&lt;li&gt;MyISAM 存储引擎&lt;br&gt;
 MyISAM 存储引擎支持用户级别的哈希索引，主要用于全表扫描和快速查找。&lt;/li&gt;
&lt;li&gt;MEMORY 存储引擎&lt;br&gt;
 MEMORY 存储引擎（以前称为 HEAP 存储引擎）支持哈希索引，主要用于临时表和内存中的数据存储。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;哈希索引的优点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快速查找：
&lt;ul&gt;
&lt;li&gt;哈希索引可以实现常数时间复杂度 O (1) 的查找，非常快。&lt;/li&gt;
&lt;li&gt;特别适用于简单的等值查询（例如 WHERE name = ‘Alice’）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内存效率：
&lt;ul&gt;
&lt;li&gt;哈希索引通常用于内存中的数据存储，适合临时表和小数据量的场景。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;哈希索引的缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不支持范围查询：哈希索引不支持范围查询（例如 WHERE name BETWEEN ‘A’ AND ‘Z’）。&lt;/li&gt;
&lt;li&gt;不支持排序：哈希索引无法用于排序操作，因为哈希值之间没有顺序关系。&lt;/li&gt;
&lt;li&gt;哈希冲突：哈希冲突可能导致性能下降，特别是在高并发场景下。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;btree索引&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#btree索引&#34;&gt;#&lt;/a&gt; B+Tree 索引&lt;/h3&gt;
&lt;p&gt;在 MySQL 中，B+Tree 索引是一种常用的索引类型，它被广泛地用于各种存储引擎，如 MyISAM、InnoDB 和 Memory。B+Tree&lt;br&gt;
 索引提供了高效的范围查询、前缀查询和排序功能。&lt;br&gt;
B+Tree 索引是在 B-Tree 基础上，通过引入指针来优化存储和检索数据。在介绍 B+Tree 索引之前，先介绍下 B-Tree 索引。&lt;/p&gt;
&lt;h4 id=&#34;b-tree索引&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#b-tree索引&#34;&gt;#&lt;/a&gt; B-Tree 索引&lt;/h4&gt;
&lt;p&gt;B-Tree 结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B-Tree（平衡二叉查找树）是一种自平衡的树形数据结构。&lt;/li&gt;
&lt;li&gt;每个节点最多包含 M 个子节点，其中 M 是一个固定的参数，称为阶数。&lt;/li&gt;
&lt;li&gt;每个节点包含 M-1 个键值和相应的指针。&lt;/li&gt;
&lt;/ul&gt;
&lt;img data-src=&#34;/joker.github.io/2024/10/09/%E3%80%90Mysql%E3%80%91Mysql%E8%AF%A6%E8%A7%A3/v2-9a8025fcd8ffdb921a6a124713fa0f7f_r.png&#34; class=&#34;&#34; title=&#34;v2-9a8025fcd8ffdb921a6a124713fa0f7f_r.png&#34;&gt;
&lt;p&gt;节点结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根节点：树的顶部节点。&lt;/li&gt;
&lt;li&gt;内部节点：包含多个键值和指针，用于指向子节点。&lt;/li&gt;
&lt;li&gt;叶子节点：包含实际的数据行或数据行的指针。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;键值顺序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B-Tree 中的键值是按顺序存储的，每个节点内的键值也是有序的。&lt;/li&gt;
&lt;li&gt;所有的叶子节点都位于同一层，并且通过双向链表连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;B-Tree 索引的特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高效查询：
&lt;ul&gt;
&lt;li&gt;B-Tree 索引支持范围查询、前缀查询和等值查询。&lt;/li&gt;
&lt;li&gt;查询时可以通过键值快速定位到相应的叶子节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自平衡：
&lt;ul&gt;
&lt;li&gt;B-Tree 在插入和删除操作时能够保持自平衡，确保树的高度较小，从而提高查询效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支持范围查询：
&lt;ul&gt;
&lt;li&gt;通过遍历叶子节点实现范围查询。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支持前缀查询：
&lt;ul&gt;
&lt;li&gt;通过遍历叶子节点实现前缀查询。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;btree-索引&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#btree-索引&#34;&gt;#&lt;/a&gt; B+Tree 索引&lt;/h4&gt;
&lt;p&gt;B+Tree 结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B+Tree 是一种改进的 B-Tree，特别适用于文件系统和数据库索引。&lt;/li&gt;
&lt;li&gt;每个节点最多包含 M 个子节点，其中 M 是一个固定的参数，称为阶数。&lt;/li&gt;
&lt;li&gt;所有数据行都存储在叶子节点中。&lt;/li&gt;
&lt;/ul&gt;
&lt;img data-src=&#34;/joker.github.io/2024/10/09/%E3%80%90Mysql%E3%80%91Mysql%E8%AF%A6%E8%A7%A3/v2-9a8025fcd8ffdb921a6a124713fa0f7f_r.png&#34; class=&#34;&#34; title=&#34;v2-9a8025fcd8ffdb921a6a124713fa0f7f_r.png&#34;&gt;
&lt;p&gt;节点结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根节点：树的顶部节点。&lt;/li&gt;
&lt;li&gt;内部节点：仅包含键值和指针，用于指向子节点。&lt;/li&gt;
&lt;li&gt;叶子节点：包含实际的数据行，并通过双向链表连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;键值顺序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B+Tree 中的键值是按顺序存储的，所有叶子节点位于同一层，并通过双向链表连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;B+Tree 索引的特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高效查询：
&lt;ul&gt;
&lt;li&gt;支持等值查询、范围查询和前缀查询。&lt;/li&gt;
&lt;li&gt;查询时可以通过键值快速定位到相应的叶子节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自平衡：
&lt;ul&gt;
&lt;li&gt;在插入和删除操作时能够保持自平衡，确保树的高度较小，从而提高查询效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支持范围查询：
&lt;ul&gt;
&lt;li&gt;通过遍历叶子节点实现范围查询，所有叶子节点通过双向链表连接，便于遍历。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支持前缀查询：
&lt;ul&gt;
&lt;li&gt;通过遍历叶子节点实现前缀查询。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支持排序：
&lt;ul&gt;
&lt;li&gt;所有数据行都存储在叶子节点中，通过双向链表连接，便于排序和遍历。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;btree索引和b-tree索引的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#btree索引和b-tree索引的区别&#34;&gt;#&lt;/a&gt; B+Tree 索引和 B-Tree 索引的区别&lt;/h4&gt;
&lt;p&gt;数据存储位置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B-Tree：数据可以存储在内部节点和叶子节点中。&lt;/li&gt;
&lt;li&gt;B+Tree：所有数据只存储在叶子节点中，内部节点只包含键值和指针。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查询性能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B-Tree：查询可能需要访问多个层级的节点，直到找到叶子节点。&lt;/li&gt;
&lt;li&gt;B+Tree：查询总是需要访问到叶子节点，但叶子节点通过双向链表连接，便于遍历。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;范围查询：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;B-Tree：范围查询需要遍历多个层级的节点，直到找到所有符合条件的叶子节点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;B+Tree：范围查询只需要遍历叶子节点即可，因为所有叶子节点通过双向链表连接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据冗余：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B-Tree：数据存储在内部节点和叶子节点中，可能存在数据冗余。&lt;/li&gt;
&lt;li&gt;B+Tree：数据只存储在叶子节点中，避免了数据冗余。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;磁盘访问优化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B-Tree：每次查询可能需要多次磁盘访问。&lt;/li&gt;
&lt;li&gt;B+Tree：查询总是需要访问到叶子节点，但叶子节点通过双向链表连接，减少了磁盘访问次数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;为什么要使用btree索引&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#为什么要使用btree索引&#34;&gt;#&lt;/a&gt; 为什么要使用 B+Tree 索引？&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;数据存储在叶子节点&lt;/p&gt;
&lt;p&gt;在 B+Tree 中，所有数据行都存储在叶子节点中，而内部节点只包含键值和指针。这种结构有以下几个优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;减少磁盘 I/O 次数：在磁盘访问中，每次读取或写入一个块都需要一次 I/O 操作。由于所有数据都存储在叶子节点中，查询时只需要访问叶子节点，减少了磁盘&lt;br&gt;
 I/O 次数。&lt;/li&gt;
&lt;li&gt;数据一致性：所有数据存储在叶子节点中，避免了数据冗余，确保数据的一致性和完整性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高效的范围查询&lt;/p&gt;
&lt;p&gt;B+Tree 的叶子节点通过双向链表连接，这使得范围查询更加高效：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;范围查询：当执行范围查询（如 WHERE id BETWEEN 10 AND 20）时，只需要遍历叶子节点即可。由于叶子节点通过双向链表连接，可以快速遍历整个范围。&lt;/li&gt;
&lt;li&gt;排序查询：当执行排序查询（如 ORDER BY id ASC）时，同样可以通过遍历叶子节点来实现排序。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自平衡性&lt;/p&gt;
&lt;p&gt;B+Tree 具有自平衡性，能够在插入和删除操作时保持树的高度较小，从而提高查询效率：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自平衡：在插入或删除操作时，B+Tree 会自动调整节点，确保树的高度保持较小，从而提高查询效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更好的磁盘访问优化&lt;/p&gt;
&lt;p&gt;B+Tree 在磁盘访问方面具有更好的优化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;减少磁盘 I/O：由于所有数据都存储在叶子节点中，查询时只需要访问叶子节点，减少了磁盘 I/O 次数。&lt;/li&gt;
&lt;li&gt;高效的数据块利用：B+Tree 的节点可以容纳更多的键值和指针，提高了数据块的利用率，减少了磁盘空间浪费。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持联合索引&lt;/p&gt;
&lt;p&gt;B+Tree 支持联合索引（复合索引），可以同时使用多个字段进行索引：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;联合索引：例如，可以创建一个联合索引 (col1, col2)，在查询时可以使用这两个字段进行快速定位。&lt;/li&gt;
&lt;li&gt;多列排序：联合索引还可以用于多列排序，提高排序查询的效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更好的并发控制&lt;/p&gt;
&lt;p&gt;B+Tree 在并发控制方面也表现出色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;锁定机制：在并发操作中，B+Tree 可以通过锁定机制来保证数据的一致性和完整性。&lt;/li&gt;
&lt;li&gt;事务处理：B+Tree 在事务处理中能够更好地支持并发操作，提高事务处理的效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更好的扩展性&lt;/p&gt;
&lt;p&gt;B+Tree 在扩展性方面具有优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;易于扩展：由于所有数据都存储在叶子节点中，B+Tree 在扩展时更容易进行数据分布和分区。&lt;/li&gt;
&lt;li&gt;分布式系统：在分布式数据库系统中，B+Tree 更容易实现数据的水平分割和分布。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内存和缓存友好&lt;/p&gt;
&lt;p&gt;B+Tree 的结构更适合内存和缓存：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存利用：B+Tree 的内部节点只包含键值和指针，占用较少的内存空间，适合内存缓存。&lt;/li&gt;
&lt;li&gt;缓存命中率：由于所有数据都在叶子节点中，缓存命中率更高，减少了从磁盘读取数据的次数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;btree-索引的自平衡&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#btree-索引的自平衡&#34;&gt;#&lt;/a&gt; B+Tree 索引的自平衡&lt;/h4&gt;
&lt;p&gt;B+Tree 的自平衡主要通过以下几种方式实现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;节点分裂&lt;/p&gt;
&lt;p&gt;当向 B+Tree 中插入一个新的键值时，如果当前节点已满，则需要将该节点分裂成两个节点。节点分裂的具体步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确定分裂点：
&lt;ul&gt;
&lt;li&gt;如果当前节点已满（即包含 M-1 个键值），则需要将其分裂成两个节点。&lt;/li&gt;
&lt;li&gt;将中间的键值作为新的中间节点的键值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;创建新节点：
&lt;ul&gt;
&lt;li&gt;创建一个新的节点，将原节点的一部分键值移动到新节点中。&lt;/li&gt;
&lt;li&gt;新节点包含大约一半的键值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;更新父节点：
&lt;ul&gt;
&lt;li&gt;在父节点中插入一个新的键值，指向新创建的节点。&lt;/li&gt;
&lt;li&gt;如果父节点已满，则继续向上分裂。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;p&gt;假设 B+Tree 的阶数为 M=3，每个节点最多包含 2 个键值。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始状态： &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;插入键值 4：
&lt;ol&gt;
&lt;li&gt;当前节点已满，需要分裂。&lt;/li&gt;
&lt;li&gt;将中间的键值 2 提升到父节点，创建两个新节点 [1] 和 [3, 4]。&lt;/li&gt;
&lt;li&gt;更新父节点：&lt;/li&gt;
&lt;/ol&gt;
 &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; [&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; / \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] [&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;插入键值 5：
&lt;ol&gt;
&lt;li&gt;当前节点已满，需要分裂。&lt;/li&gt;
&lt;li&gt;将中间的键值 4 提升到父节点，创建两个新节点 [3] 和 [5]。&lt;/li&gt;
&lt;li&gt;更新父节点：&lt;/li&gt;
&lt;/ol&gt;
 &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;  [&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  / \ / \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] [&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;] [&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;节点合并&lt;/p&gt;
&lt;p&gt;当从 B+Tree 中删除一个键值时，如果某个节点的键值数量少于最小键值数量（即小于 M/2），则需要进行节点合并。节点合并的具体步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确定合并条件：
&lt;ul&gt;
&lt;li&gt;如果当前节点的键值数量少于 M/2，则需要与相邻的兄弟节点合并。&lt;/li&gt;
&lt;li&gt;选择一个相邻的兄弟节点，将其中一个键值移动到当前节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;合并节点：
&lt;ul&gt;
&lt;li&gt;将相邻节点的一个键值移动到当前节点，使当前节点的键值数量达到 M/2。&lt;/li&gt;
&lt;li&gt;更新父节点中的键值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;更新父节点：
&lt;ul&gt;
&lt;li&gt;如果父节点的键值数量少于 M/2，则继续向上合并。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;p&gt;假设 B+Tree 的阶数为 M=3，每个节点最多包含 2 个键值。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始状态：&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;  [&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  / \ / \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] [&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;] [&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;删除键值 4：
&lt;ol&gt;
&lt;li&gt;删除键值 4 后，节点 [3] 的键值数量少于 M/2，需要与相邻节点合并。&lt;/li&gt;
&lt;li&gt;将 [2] 和 [3] 合并，更新父节点：&lt;/li&gt;
&lt;/ol&gt;
 &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;  [&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  / \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] [&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;什么情况下无法使用索引&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么情况下无法使用索引&#34;&gt;#&lt;/a&gt; 什么情况下无法使用索引&lt;/h3&gt;
&lt;p&gt;在 MySQL 中，索引可以显著提高查询性能，但并不是所有的查询都能有效地利用索引。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 LIKE 操作符时
&lt;ul&gt;
&lt;li&gt;情况描述：当 LIKE 操作符的模式以通配符（如 %）开头时，索引通常无法被有效利用。例如，SELECT * FROM table WHERE column&lt;br&gt;
LIKE ‘%abc%’。&lt;/li&gt;
&lt;li&gt;原因：索引通常是按照键值顺序存储的，而以通配符开头的模式会导致 MySQL 无法直接定位到特定的位置，因此需要进行全表扫描。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用函数或表达式
&lt;ul&gt;
&lt;li&gt;情况描述：当查询条件中包含函数或表达式时，索引通常无法被利用。例如，SELECT * FROM table WHERE UPPER (column) = ‘ABC’ 或&lt;br&gt;
 SELECT * FROM table WHERE column + 1 = 5。&lt;/li&gt;
&lt;li&gt;原因：函数或表达式改变了索引键值的形式，导致索引无法直接匹配。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 OR 连接多个条件
&lt;ul&gt;
&lt;li&gt;情况描述：当查询条件中包含多个 OR 逻辑时，索引可能无法被有效利用。例如，SELECT * FROM table WHERE column1 = ‘A’ OR&lt;br&gt;
column2 = ‘B’。&lt;/li&gt;
&lt;li&gt;原因：多个 OR 条件可能导致 MySQL 需要扫描多个索引或进行全表扫描。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 NOT IN 或 NOT EXISTS
&lt;ul&gt;
&lt;li&gt;情况描述：当查询条件中包含 NOT IN 或 NOT EXISTS 时，索引可能无法被有效利用。例如，SELECT * FROM table WHERE column NOT&lt;br&gt;
IN (‘A’, ‘B’, ‘C’) 或 SELECT * FROM table WHERE NOT EXISTS (SELECT 1&lt;br&gt;
FROM other_table WHERE other_table.id = &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3RhYmxlLmlk&#34;&gt;table.id&lt;/span&gt;)。&lt;/li&gt;
&lt;li&gt;原因：NOT IN 和 NOT EXISTS 可能导致 MySQL 需要进行多次查找或全表扫描。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 IS NULL 或 IS NOT NULL
&lt;ul&gt;
&lt;li&gt;情况描述：当查询条件中包含 IS NULL 或 IS NOT NULL 时，索引可能无法被有效利用。例如，SELECT * FROM table WHERE column&lt;br&gt;
IS NULL 或 SELECT * FROM table WHERE column IS NOT NULL。&lt;/li&gt;
&lt;li&gt;原因：索引通常不包含 NULL 值，因此在这种情况下索引无法直接定位到特定的位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 IN 语句且参数较多
&lt;ul&gt;
&lt;li&gt;情况描述：当查询条件中包含 IN 语句且参数较多时，索引可能无法被有效利用。例如，SELECT * FROM table WHERE column IN (’&lt;br&gt;
A’, ‘B’, ‘C’, …, ‘Z’)。&lt;/li&gt;
&lt;li&gt;原因：大量的 IN 参数可能导致 MySQL 需要进行多次查找或全表扫描。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 ORDER BY 或 GROUP BY 未覆盖索引
&lt;ul&gt;
&lt;li&gt;情况描述：当查询条件中包含 ORDER BY 或 GROUP BY 但未覆盖索引时，索引可能无法被有效利用。例如，SELECT * FROM table&lt;br&gt;
ORDER BY column1, column2。&lt;/li&gt;
&lt;li&gt;原因：如果索引没有包含所有排序或分组的列，MySQL 可能需要额外的排序操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 LIMIT 但未指定排序
&lt;ul&gt;
&lt;li&gt;情况描述：当查询条件中包含 LIMIT 但未指定排序时，索引可能无法被有效利用。例如，SELECT * FROM table LIMIT 10。&lt;/li&gt;
&lt;li&gt;原因：如果没有指定排序，MySQL 可能需要全表扫描来获取前几条记录。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 JOIN 但未指定合适的索引
&lt;ul&gt;
&lt;li&gt;情况描述：当查询条件中包含 JOIN 但未指定合适的索引时，索引可能无法被有效利用。例如，SELECT * FROM table1 JOIN table2&lt;br&gt;
ON &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3RhYmxlMS5pZA==&#34;&gt;table1.id&lt;/span&gt; = &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3RhYmxlMi5pZA==&#34;&gt;table2.id&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;原因：如果没有合适的索引，MySQL 可能需要进行全表扫描或多次查找。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 BETWEEN 但未覆盖索引
&lt;ul&gt;
&lt;li&gt;情况描述：当查询条件中包含 BETWEEN 但未覆盖索引时，索引可能无法被有效利用。例如，SELECT * FROM table WHERE column&lt;br&gt;
BETWEEN ‘A’ AND ‘Z’。&lt;/li&gt;
&lt;li&gt;原因：如果索引没有包含所有查询条件的列，MySQL 可能需要额外的查找操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;最左匹配原则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最左匹配原则&#34;&gt;#&lt;/a&gt; 最左匹配原则&lt;/h3&gt;
&lt;p&gt;最左匹配原则是指在复合索引中，查询条件必须从索引的最左边开始匹配，才能有效地利用索引。具体来说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;复合索引：由多个列组成的索引。&lt;/li&gt;
&lt;li&gt;最左匹配：查询条件必须从索引的第一个列开始，依次向右匹配。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例说明&lt;/p&gt;
&lt;p&gt;假设有一个复合索引 (col1, col2, col3)，那么查询条件必须从 col1 开始，然后依次向右匹配 col2 和 col3。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;有效的查询条件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SELECT * FROM table WHERE col1 = ‘value1’&lt;/li&gt;
&lt;li&gt;SELECT * FROM table WHERE col1 = ‘value1’ AND col2 = ‘value2’&lt;/li&gt;
&lt;li&gt;SELECT * FROM table WHERE col2 = ‘value2’ AND col1 = ‘value1’&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些查询条件都能够有效地利用索引 (col1, col2, col3)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无效的查询条件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SELECT * FROM table WHERE col2 = ‘value2’&lt;/li&gt;
&lt;li&gt;SELECT * FROM table WHERE col2 = ‘value2’ AND col3 = ‘value3’&lt;/li&gt;
&lt;li&gt;SELECT * FROM table WHERE col3 = ‘value3’&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些查询条件无法有效地利用索引 (col1, col2, col3)，因为它们没有从索引的最左边开始匹配。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最左匹配原则的例外情况&lt;/p&gt;
&lt;p&gt;尽管最左匹配原则是一个基本规则，但在某些情况下，MySQL 仍可以部分地利用索引：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 OR 但条件相同&lt;br&gt;
有效示例： &lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;table&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;WHERE&lt;/span&gt; col1 &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;value1&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;OR&lt;/span&gt; col1 &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;value2&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
这种查询条件虽然使用了 OR，但条件相同，可以从索引的最左边开始匹配，可以有效地利用索引 (col1, col2, col3)。&lt;/li&gt;
&lt;li&gt;使用 IN 语句&lt;br&gt;
有效示例： &lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;table&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;WHERE&lt;/span&gt; col1 &lt;span class=&#34;keyword&#34;&gt;IN&lt;/span&gt; (&lt;span class=&#34;string&#34;&gt;&amp;#x27;value1&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;value2&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
这种查询条件虽然使用了 IN 语句，但可以从索引的最左边开始匹配，可以有效地利用索引 (col1, col2, col3)。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最左匹配原则的优化建议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;合理设计索引：根据查询需求设计合理的复合索引，确保查询条件能够从索引的最左边开始匹配。&lt;/li&gt;
&lt;li&gt;避免使用函数或表达式：查询条件中尽量避免使用函数或表达式，因为它们可能会导致索引失效。&lt;/li&gt;
&lt;li&gt;使用 EXPLAIN 查看执行计划：使用 EXPLAIN 命令查看查询的执行计划，检查是否有效地利用了索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;事务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务&#34;&gt;#&lt;/a&gt; 事务&lt;/h2&gt;
&lt;p&gt;事务可以理解为一组相关操作的集合，这些操作作为一个整体执行。事务的主要目的是确保数据的一致性和完整性，即使在出现故障的情况下也能保证数据的正确性。&lt;/p&gt;
&lt;p&gt;事务通常具备四个主要特性，称为 ACID 特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原子性（Atomicity）：事务中的所有操作要么全部成功，要么全部失败。如果事务中的任何一部分失败，则整个事务都会回滚，恢复到事务开始之前的状态。&lt;/li&gt;
&lt;li&gt;一致性（Consistency）：事务执行后，数据库必须处于一致性的状态。这意味着事务执行前后，数据库的状态必须满足预定的约束和业务规则。&lt;/li&gt;
&lt;li&gt;隔离性（Isolation）：事务之间相互独立，一个事务的操作不会影响其他事务的结果。每个事务看起来像是在单独的系统中执行一样。&lt;/li&gt;
&lt;li&gt;持久性（Durability）：一旦事务提交（commit），其结果就会永久保存在数据库中，即使系统发生故障也不会丢失。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;事务通常包括以下基本操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开始事务（BEGIN TRANSACTION）：开始一个新的事务，标记事务的起点。&lt;/li&gt;
&lt;li&gt;提交事务（COMMIT）：提交事务，将事务中的所有更改永久保存到数据库中。&lt;/li&gt;
&lt;li&gt;回滚事务（ROLLBACK）：回滚事务，撤销事务中的所有更改，恢复到事务开始之前的状态。&lt;/li&gt;
&lt;li&gt;保存点（SAVEPOINT）：在事务中设置一个保存点，可以在后续操作中回滚到这个保存点。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;并发事务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#并发事务&#34;&gt;#&lt;/a&gt; 并发事务&lt;/h3&gt;
&lt;p&gt;并发事务是指多个事务同时对同一个数据进行操作，可能导致数据不一致的情况。&lt;br&gt;
以下是一些常见的并发事务问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;脏读：一个事务读取到另一个事务尚未提交的数据。 事务 A 读取事务 B 更新的数据，然后 B 回滚操作，那么 A 读取到的数据是脏数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不可重复读：一个事务中两次读取的数据的内容不一致。 事务 A 多次读取同一数据，事务 B 在事务 A 多次读取的过程中，对数据作了更新并提交，导致事务&lt;br&gt;
 A 多次读取同一数据时，结果 不一致。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;幻读：一个事务中两次读取的数据量不一致。 系统管理员 A 将数据库中所有学生的成绩从具体分数改为 ABCDE 等级，但是系统管理员 B&lt;br&gt;
 就在这个时候插入了一条具体分数的记录，当系统管理员 A 改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。 解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表。&lt;/p&gt;
&lt;p&gt;如何解决并发事务问题？&lt;/p&gt;
&lt;p&gt;MySQL 事务的隔离级别定义了事务之间相互隔离的程度，不同的隔离级别有不同的效果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读未提交（Read Uncommitted）：
&lt;ul&gt;
&lt;li&gt;最低的隔离级别，允许事务读取未提交的数据。&lt;/li&gt;
&lt;li&gt;容易产生脏读、不可重复读和幻读。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;读已提交（Read Committed）：
&lt;ul&gt;
&lt;li&gt;允许事务读取已提交的数据。&lt;/li&gt;
&lt;li&gt;防止脏读，但仍然可能出现不可重复读和幻读。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可重复读（Repeatable Read）：
&lt;ul&gt;
&lt;li&gt;事务在整个执行期间读取的数据始终不变。&lt;/li&gt;
&lt;li&gt;防止脏读和不可重复读，但仍然可能出现幻读。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;序列化（Serializable）：
&lt;ul&gt;
&lt;li&gt;最高的隔离级别，完全隔离事务，防止所有并发问题。&lt;/li&gt;
&lt;li&gt;可能导致性能下降，但确保了最高的数据一致性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不同的隔离级别对性能和数据准确性的影响均不相同，需要根据具体的业务场景来做出取舍。顺带一提，在 MySQL&lt;br&gt;
 中，默认的事务隔离级别是可重复读（Repeatable Read）。&lt;/p&gt;
&lt;h2 id=&#34;锁&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#锁&#34;&gt;#&lt;/a&gt; 锁&lt;/h2&gt;
&lt;p&gt;MySQL 中的锁机制是数据库管理系统中非常重要的一部分，用于确保并发操作的一致性和数据的完整性。锁机制可以防止多个事务同时修改同一份数据，从而避免数据冲突和不一致的问题。&lt;/p&gt;
&lt;h3 id=&#34;mysql-中的锁类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mysql-中的锁类型&#34;&gt;#&lt;/a&gt; MySQL 中的锁类型&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;表级锁（Table-Level Locks）&lt;/p&gt;
&lt;p&gt;表级锁是最粗粒度的锁，对整个表进行锁定。这种锁简单且易于实现，但在高并发环境下性能较差。&lt;/p&gt;
&lt;p&gt;类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读锁（READ LOCK）：
&lt;ul&gt;
&lt;li&gt;只允许读取数据，不允许写入数据。&lt;/li&gt;
&lt;li&gt;多个读锁可以同时存在。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;写锁（WRITE LOCK）：
&lt;ul&gt;
&lt;li&gt;独占锁，不允许读取和写入数据。&lt;/li&gt;
&lt;li&gt;只有一个写锁可以存在。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;备份和恢复：在备份或恢复数据时，可以使用表级锁确保数据的一致性。&lt;/li&gt;
&lt;li&gt;低并发环境：在并发较低的环境中，可以使用表级锁简化锁管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;行级锁（Row-Level Locks）&lt;/p&gt;
&lt;p&gt;行级锁是对表中的单个行进行锁定，粒度较细，适用于高并发环境。&lt;/p&gt;
&lt;p&gt;存储引擎支持&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;InnoDB：支持行级锁，广泛应用于高并发环境。&lt;/li&gt;
&lt;li&gt;MyISAM：不支持行级锁，只支持表级锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;共享锁（Shared Lock，S 锁）：
&lt;ul&gt;
&lt;li&gt;多个事务可以同时读取同一行数据。&lt;/li&gt;
&lt;li&gt;读取操作可以并行执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;排他锁（Exclusive Lock，X 锁）：
&lt;ul&gt;
&lt;li&gt;排他锁独占，不允许其他事务读取或写入同一行数据。&lt;/li&gt;
&lt;li&gt;写入操作独占执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;并发读写：在高并发环境中，行级锁可以允许多个事务同时读取数据，提高并发性能。&lt;/li&gt;
&lt;li&gt;事务处理：在事务处理中，行级锁可以确保数据的一致性和完整性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;页面级锁（Page-Level Locks）&lt;/p&gt;
&lt;p&gt;页面级锁是对表中的一页数据进行锁定，粒度介于表级锁和行级锁之间。&lt;/p&gt;
&lt;p&gt;存储引擎支持&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BDB（Berkeley DB）：支持页面级锁。&lt;/li&gt;
&lt;li&gt;InnoDB：支持页面级锁，但在实际应用中更常用的是行级锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中等并发环境：在中等并发环境中，页面级锁可以提高并发性能，减少锁的竞争。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;意向锁（Intention Locks）&lt;/p&gt;
&lt;p&gt;意向锁是一种辅助锁，用于指示事务打算对数据进行的操作类型。&lt;/p&gt;
&lt;p&gt;类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;意向共享锁（Intention Shared Lock，IS 锁）：
&lt;ul&gt;
&lt;li&gt;表示事务打算获取某一行的共享锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;意向排他锁（Intention Exclusive Lock，IX 锁）：
&lt;ul&gt;
&lt;li&gt;表示事务打算获取某一行的排他锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事务管理：在事务管理中，意向锁帮助数据库管理系统预测事务的操作类型，提前准备相应的锁资源。&lt;br&gt;
.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;mysql-中的锁机制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mysql-中的锁机制&#34;&gt;#&lt;/a&gt; MySQL 中的锁机制&lt;/h3&gt;
&lt;p&gt;InnoDB 存储引擎广泛应用于 MySQL 中，其支持多种锁机制。&lt;br&gt;
锁与事务隔离级别的关系如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读未提交（Read Uncommitted）：不使用任何锁。&lt;/li&gt;
&lt;li&gt;读已提交（Read Committed）：使用行级锁，读取时不加锁。&lt;/li&gt;
&lt;li&gt;可重复读（Repeatable Read）：使用行级锁，读取时加锁。&lt;/li&gt;
&lt;li&gt;序列化（Serializable）：使用行级锁，读取时加锁，确保最高隔离级别。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;间隙锁（Gap Locks）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义：间隙锁锁定行之间的 “间隙”，防止插入新的行。&lt;/li&gt;
&lt;li&gt;应用场景：在可重复读隔离级别下，InnoDB 使用间隙锁防止插入新的行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mvcc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mvcc&#34;&gt;#&lt;/a&gt; MVCC&lt;/h3&gt;
&lt;p&gt;Mysql 的多版本并发控制（Multiversion Concurrency Control，简称 MVCC）主要用于实现读取操作与写入操作之间的并发执行。&lt;br&gt;
尤其是在 InnoDB 存储引擎中，它通过维护数据的多个版本来支持高并发读写操作。以下是关于 MVCV 的一些关键点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;非锁定读取：在大多数情况下，MVCC 允许读取操作不加锁地进行，这意味着读取操作不会阻塞写入操作，反之亦然。这极大地提高了数据库的并发性能。&lt;/li&gt;
&lt;li&gt;快照读与当前读：
&lt;ul&gt;
&lt;li&gt;快照读（Snapshot Read）：默认情况下，读取操作获取的是事务开始时刻的数据版本，而不是最新的数据版本。这种方式避免了读取过程中可能发生的脏读、不可重复读等问题。&lt;/li&gt;
&lt;li&gt;当前读（Current Read）：当使用某些特定类型的查询（如带有 FOR UPDATE 或 LOCK IN SHARE MODE 提示的查询）时，会读取到最新的数据版本，并且可能会导致等待写锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;版本号机制：为了实现多版本并发控制，每个记录都有两个隐藏的字段：DB_TRX_ID 和 DB_ROLL_PTR。DB_TRX_ID 记录了最后修改这条记录的事务 ID，而 DB_ROLL_PTR 则指向了该记录的回滚段，其中保存着旧版本的数据。&lt;/li&gt;
&lt;li&gt;可见性规则：事务如何看到数据取决于一些简单的规则，这些规则基于事务的开始时间以及行上的版本标识来决定。具体来说，只有满足以下条件之一的行对当前事务才是可见的：
&lt;ul&gt;
&lt;li&gt;行的创建事务 ID 小于当前事务 ID（即行是在当前事务开始之前创建的）。&lt;/li&gt;
&lt;li&gt;行的创建事务 ID 等于当前事务 ID 并且行已被标记为已删除。&lt;/li&gt;
&lt;li&gt;行的删除事务 ID 大于当前事务 ID（即行是在当前事务开始之后被删除的）。&lt;/li&gt;
&lt;li&gt;行尚未被标记为已删除。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;事务隔离级别：MVCC 的行为还受到事务隔离级别的影响。不同的隔离级别决定了事务之间如何交互以及如何处理数据版本。例如，在可重复读（Repeatable&lt;br&gt;
read）隔离级别下，InnoDB 会对读取的数据创建一个快照，并在整个事务期间都使用这个快照。&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="后端" />
        <category term="数据库" />
        <category term="关系型数据库" />
        <category term="Mysql" />
        <updated>2024-10-09T01:58:28.000Z</updated>
    </entry>
</feed>
