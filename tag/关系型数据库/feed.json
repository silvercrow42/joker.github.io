{
    "version": "https://jsonfeed.org/version/1",
    "title": "Joker • All posts by \"关系型数据库\" tag",
    "description": "",
    "home_page_url": "https://silvercrow42.github.io/joker.github.io",
    "items": [
        {
            "id": "https://silvercrow42.github.io/joker.github.io/2024/10/09/%E3%80%90Mysql%E3%80%91Mysql%E8%AF%A6%E8%A7%A3/",
            "url": "https://silvercrow42.github.io/joker.github.io/2024/10/09/%E3%80%90Mysql%E3%80%91Mysql%E8%AF%A6%E8%A7%A3/",
            "title": "【Mysql】Mysql详解",
            "date_published": "2024-10-09T01:58:28.000Z",
            "content_html": "<h2 id=\"什么是mysql\"><a class=\"markdownIt-Anchor\" href=\"#什么是mysql\">#</a> 什么是 Mysql</h2>\n<p>MySQL 是一个广泛使用的开源关系型数据库管理系统（RDBMS），由 MySQL AB 公司开发，后来被 Sun Microsystems 收购，最终成为 Oracle<br>\n 公司的一部分。MySQL 被广泛应用于 Web 应用、企业应用和个人项目中。以下是关于 MySQL 的一些详细介绍：</p>\n<ol>\n<li>\n<p>特点</p>\n<ul>\n<li>高性能：MySQL 提供了高效的查询处理机制，能够处理大量的并发请求。</li>\n<li>易于使用：安装简单，配置容易，支持多种操作系统（如 Windows、Linux 和 macOS）。</li>\n<li>安全性：提供了丰富的安全特性，包括用户认证、权限管理、数据加密等。</li>\n<li>扩展性：支持多种存储引擎（如 InnoDB、MyISAM 等），可以根据不同的应用场景选择合适的存储引擎。</li>\n<li>开源免费：作为开源软件，MySQL 可以免费使用，适用于各种规模的应用。</li>\n</ul>\n</li>\n<li>\n<p>数据库结构<br>\n MySQL 使用标准的关系模型，包括表、视图、索引等基本组件：</p>\n<ul>\n<li>表：存储数据的基本单位，由行和列组成。</li>\n<li>视图：虚拟表，基于一个或多个表的查询结果。</li>\n<li>索引：用于加快数据检索速度的特殊数据结构。</li>\n</ul>\n</li>\n<li>\n<p>存储引擎<br>\n MySQL 支持多种存储引擎，其中最常用的是：</p>\n<ul>\n<li>InnoDB：支持事务处理、外键约束和行级锁定。</li>\n<li>MyISAM：不支持事务处理，但性能较高，适合读取密集型应用。</li>\n<li>Memory：将数据存储在内存中，提供极高的读写速度，但不适合持久化存储。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"mysql的数据类型\"><a class=\"markdownIt-Anchor\" href=\"#mysql的数据类型\">#</a> Mysql 的数据类型</h2>\n<h3 id=\"数值类型\"><a class=\"markdownIt-Anchor\" href=\"#数值类型\">#</a> 数值类型</h3>\n<p>MySQL 支持所有标准 SQL 数值数据类型。</p>\n<p>这些类型包括严格数值数据类型 (INTEGER、SMALLINT、DECIMAL 和 NUMERIC)，以及近似数值数据类型 (FLOAT、REAL 和 DOUBLE PRECISION)。</p>\n<p>关键字 INT 是 INTEGER 的同义词，关键字 DEC 是 DECIMAL 的同义词。</p>\n<p>BIT 数据类型保存位字段值，并且支持 MyISAM、MEMORY、InnoDB 和 BDB 表。</p>\n<p>作为 SQL 标准的扩展，MySQL 也支持整数类型 TINYINT、MEDIUMINT 和 BIGINT。下面的表显示了需要的每个整数类型的存储和范围。</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>大小 (bytes)</th>\n<th>范围（有符号）</th>\n<th>范围（无符号）</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TINYINT</td>\n<td>1</td>\n<td>(-128，127)</td>\n<td>(0，255)</td>\n<td>小整数值</td>\n</tr>\n<tr>\n<td>SMALLINT</td>\n<td>2</td>\n<td>(-32 768，32 767)</td>\n<td>(0，65 535)</td>\n<td>大整数值</td>\n</tr>\n<tr>\n<td>MEDIUMINT</td>\n<td>3</td>\n<td>(-8 388 608，8 388 607)</td>\n<td>(0，16 777 215)</td>\n<td>大整数值</td>\n</tr>\n<tr>\n<td>INT 或 INTEGER</td>\n<td>4</td>\n<td>(-2 147 483 648，2 147 483 647)</td>\n<td>(0，4 294 967 295)</td>\n<td>大整数值</td>\n</tr>\n<tr>\n<td>BIGINT</td>\n<td>8</td>\n<td>(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td>\n<td>(0，18 446 744 073 709 551 615)</td>\n<td>极大整数值</td>\n</tr>\n<tr>\n<td>FLOAT</td>\n<td>4</td>\n<td>(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td>\n<td>0，(1.175 494 351 E-38，3.402 823 466 E+38)</td>\n<td>单精度浮点数值</td>\n</tr>\n<tr>\n<td>DOUBLE</td>\n<td>8</td>\n<td>(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td>\n<td>0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td>\n<td>双精度浮点数值</td>\n</tr>\n<tr>\n<td>DECIMAL</td>\n<td>对 DECIMAL (M,D) ，如果 M&gt;D，为 M+2 否则为 D+2</td>\n<td>依赖于 M 和 D 的值</td>\n<td>依赖于 M 和 D 的值</td>\n<td>小数值</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"日期和时间类型\"><a class=\"markdownIt-Anchor\" href=\"#日期和时间类型\">#</a> 日期和时间类型</h3>\n<p>表示时间值的日期和时间类型为 DATETIME、DATE、TIMESTAMP、TIME 和 YEAR。</p>\n<p>每个时间类型有一个有效值范围和一个 &quot;零&quot; 值，当指定不合法的 MySQL 不能表示的值时使用 &quot;零&quot; 值。</p>\n<p>TIMESTAMP 类型有专有的自动更新特性，将在后面描述。</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>大小 (bytes)</th>\n<th>范围</th>\n<th>格式</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DATE</td>\n<td>3</td>\n<td>1000-01-01/9999-12-31</td>\n<td>YYYY-MM-DD</td>\n<td>日期值</td>\n</tr>\n<tr>\n<td>TIME</td>\n<td>3</td>\n<td>‘-838:59:59’/‘838:59:59’</td>\n<td>HH:MM:SS</td>\n<td>时间值或持续时间</td>\n</tr>\n<tr>\n<td>YEAR</td>\n<td>1</td>\n<td>1901/2155</td>\n<td>YYYY</td>\n<td>年份值</td>\n</tr>\n<tr>\n<td>DATETIME</td>\n<td>8</td>\n<td>‘1000-01-01 00:00:00’ 到 ‘9999-12-31 23:59:59’</td>\n<td>YYYY-MM-DD hh:mm:ss</td>\n<td>混合日期和时间值</td>\n</tr>\n<tr>\n<td>TIMESTAMP</td>\n<td>4</td>\n<td>‘1970-01-01 00:00:01’ UTC 到 ‘2038-01-19 03:14:07’ UTC 结束时间是第 2147483647 秒，北京时间 2038-1-19 11:14:07，格林尼治时间 2038 年 1 月 19 日 凌晨 03:14:07</td>\n<td>YYYY-MM-DD hh:mm:ss</td>\n<td>混合日期和时间值，时间戳</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"字符串类型\"><a class=\"markdownIt-Anchor\" href=\"#字符串类型\">#</a> 字符串类型</h3>\n<p>字符串类型指 CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM 和 SET。该节描述了这些类型如何工作以及如何在查询中使用这些类型。</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>大小 (bytes)</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CHAR</td>\n<td>0-255</td>\n<td>定长字符串</td>\n</tr>\n<tr>\n<td>VARCHAR</td>\n<td>0-65535</td>\n<td>变长字符串</td>\n</tr>\n<tr>\n<td>TINYBLOB</td>\n<td>0-255</td>\n<td>不超过 255 个字符的二进制字符串</td>\n</tr>\n<tr>\n<td>TINYTEXT</td>\n<td>0-255</td>\n<td>短文本字符串</td>\n</tr>\n<tr>\n<td>BLOB</td>\n<td>0-65 535</td>\n<td>二进制形式的长文本数据</td>\n</tr>\n<tr>\n<td>TEXT</td>\n<td>0-65 535</td>\n<td>长文本数据</td>\n</tr>\n<tr>\n<td>MEDIUMBLOB</td>\n<td>0-16 777 215</td>\n<td>二进制形式的中等长度文本数据</td>\n</tr>\n<tr>\n<td>MEDIUMTEXT</td>\n<td>0-16 777 215</td>\n<td>中等长度文本数据</td>\n</tr>\n<tr>\n<td>LONGBLOB</td>\n<td>0-4 294 967 295</td>\n<td>二进制形式的极大文本数据</td>\n</tr>\n<tr>\n<td>LONGTEXT</td>\n<td>0-4 294 967 295</td>\n<td>极大文本数据</td>\n</tr>\n</tbody>\n</table>\n<p>注意：char (n) 和 varchar (n) 中括号中 n 代表字符的个数，并不代表字节个数，比如 CHAR (30) 就可以存储 30 个字符。</p>\n<p>CHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</p>\n<p>BINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</p>\n<p>BLOB 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 BLOB 类型：TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。它们区别在于可容纳存储范围不同。</p>\n<p>有 4 种 TEXT 类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4 种 BLOB 类型，可存储的最大长度不同，可根据实际情况选择。</p>\n<h3 id=\"枚举与集合类型enumeration-and-set-types\"><a class=\"markdownIt-Anchor\" href=\"#枚举与集合类型enumeration-and-set-types\">#</a> 枚举与集合类型（Enumeration and Set Types）</h3>\n<ul>\n<li>ENUM: 枚举类型，用于存储单一值，可以选择一个预定义的集合。</li>\n<li>SET: 集合类型，用于存储多个值，可以选择多个预定义的集合。</li>\n</ul>\n<h3 id=\"空间数据类型spatial-data-types\"><a class=\"markdownIt-Anchor\" href=\"#空间数据类型spatial-data-types\">#</a> 空间数据类型（Spatial Data Types）</h3>\n<p>GEOMETRY, POINT, LINESTRING, POLYGON, MULTIPOINT, MULTILINESTRING, MULTIPOLYGON, GEOMETRYCOLLECTION:<br>\n 用于存储空间数据（地理信息、几何图形等）。</p>\n<h2 id=\"索引\"><a class=\"markdownIt-Anchor\" href=\"#索引\">#</a> 索引</h2>\n<p>MySQL 中的索引是一种数据结构，它可以帮助数据库系统更快地检索数据</p>\n<ul>\n<li>\n<p>从物理结构上可以分为聚集索引和非聚集索引两类：</p>\n<ul>\n<li>聚簇索引指索引的键值的逻辑顺序与表中相应行的物理顺序一致，即每张表只能有一个聚簇索引，也就是我们常说的主键索引；\n<ul>\n<li>默认情况下，InnoDB 表的主键就是聚簇索引。</li>\n<li>如果没有显式定义主键，则 InnoDB 会自动创建一个隐藏的主键作为聚簇索引。</li>\n</ul>\n</li>\n<li>非聚簇索引的逻辑顺序则与数据行的物理顺序不一致。\n<ul>\n<li>非聚簇索引（也称为二级索引）只存储索引键值和指向实际数据行的指针。</li>\n<li>当通过非聚簇索引查找数据时，首先找到索引条目，然后通过指针访问实际的数据行。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>从应用上可以划分为一下几类：</p>\n<ul>\n<li>普通索引：MySQL 中的基本索引类型，没有什么限制，允许在定义索引的列中插入重复值和空值，纯粹为了提高查询效率。通过 ALTER<br>\nTABLE<br>\ntable_name ADD INDEX index_name (column) 创建；</li>\n<li>唯一索引：索引列中的值必须是唯一的，但是允许为空值。通过 ALTER TABLE table_name ADD UNIQUE index_name (column) 创建；</li>\n<li>主键索引：特殊的唯一索引，也成聚簇索引，不允许有空值，并由数据库帮我们自动创建；</li>\n<li>组合索引：组合表中多个字段创建的索引，遵守最左前缀匹配规则；</li>\n<li>全文索引：只有在 MyISAM 引擎上才能使用，同时只支持 CHAR、VARCHAR、TEXT 类型字段上使用。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"hash-索引\"><a class=\"markdownIt-Anchor\" href=\"#hash-索引\">#</a> Hash 索引</h3>\n<p>在 MySQL 中，哈希索引（Hash Index）是一种特殊的索引类型，主要用于快速查找数据。哈希索引利用哈希算法将索引键值映射到一个固定大小的哈希表中，从而实现快速定位数据。</p>\n<p>哈希索引的基本实现原理如下：</p>\n<ol>\n<li>哈希算法：\n<ul>\n<li>哈希算法将索引键值转换为一个固定长度的哈希值。</li>\n<li>这个哈希值被用作索引表中的索引项。</li>\n</ul>\n</li>\n<li>哈希表：\n<ul>\n<li>哈希表是一个数组，每个数组元素对应一个哈希值。</li>\n<li>查找时，通过计算键值的哈希值可以直接定位到对应的数组元素。</li>\n</ul>\n</li>\n</ol>\n<p>MySQL 中各引擎的的哈希索引实现：</p>\n<ol>\n<li>InnoDB 存储引擎<br>\n在 InnoDB 存储引擎中，哈希索引主要用于内部结构，例如辅助索引和临时表。InnoDB 并不支持用户级别的哈希索引。</li>\n<li>MyISAM 存储引擎<br>\n MyISAM 存储引擎支持用户级别的哈希索引，主要用于全表扫描和快速查找。</li>\n<li>MEMORY 存储引擎<br>\n MEMORY 存储引擎（以前称为 HEAP 存储引擎）支持哈希索引，主要用于临时表和内存中的数据存储。</li>\n</ol>\n<p>哈希索引的优点</p>\n<ul>\n<li>快速查找：\n<ul>\n<li>哈希索引可以实现常数时间复杂度 O (1) 的查找，非常快。</li>\n<li>特别适用于简单的等值查询（例如 WHERE name = ‘Alice’）。</li>\n</ul>\n</li>\n<li>内存效率：\n<ul>\n<li>哈希索引通常用于内存中的数据存储，适合临时表和小数据量的场景。</li>\n</ul>\n</li>\n</ul>\n<p>哈希索引的缺点</p>\n<ul>\n<li>不支持范围查询：哈希索引不支持范围查询（例如 WHERE name BETWEEN ‘A’ AND ‘Z’）。</li>\n<li>不支持排序：哈希索引无法用于排序操作，因为哈希值之间没有顺序关系。</li>\n<li>哈希冲突：哈希冲突可能导致性能下降，特别是在高并发场景下。</li>\n</ul>\n<h3 id=\"btree索引\"><a class=\"markdownIt-Anchor\" href=\"#btree索引\">#</a> B+Tree 索引</h3>\n<p>在 MySQL 中，B+Tree 索引是一种常用的索引类型，它被广泛地用于各种存储引擎，如 MyISAM、InnoDB 和 Memory。B+Tree<br>\n 索引提供了高效的范围查询、前缀查询和排序功能。<br>\nB+Tree 索引是在 B-Tree 基础上，通过引入指针来优化存储和检索数据。在介绍 B+Tree 索引之前，先介绍下 B-Tree 索引。</p>\n<h4 id=\"b-tree索引\"><a class=\"markdownIt-Anchor\" href=\"#b-tree索引\">#</a> B-Tree 索引</h4>\n<p>B-Tree 结构：</p>\n<ul>\n<li>B-Tree（平衡二叉查找树）是一种自平衡的树形数据结构。</li>\n<li>每个节点最多包含 M 个子节点，其中 M 是一个固定的参数，称为阶数。</li>\n<li>每个节点包含 M-1 个键值和相应的指针。</li>\n</ul>\n<img data-src=\"/joker.github.io/2024/10/09/%E3%80%90Mysql%E3%80%91Mysql%E8%AF%A6%E8%A7%A3/v2-9a8025fcd8ffdb921a6a124713fa0f7f_r.png\" class=\"\" title=\"v2-9a8025fcd8ffdb921a6a124713fa0f7f_r.png\">\n<p>节点结构：</p>\n<ul>\n<li>根节点：树的顶部节点。</li>\n<li>内部节点：包含多个键值和指针，用于指向子节点。</li>\n<li>叶子节点：包含实际的数据行或数据行的指针。</li>\n</ul>\n<p>键值顺序：</p>\n<ul>\n<li>B-Tree 中的键值是按顺序存储的，每个节点内的键值也是有序的。</li>\n<li>所有的叶子节点都位于同一层，并且通过双向链表连接。</li>\n</ul>\n<p>B-Tree 索引的特点</p>\n<ul>\n<li>高效查询：\n<ul>\n<li>B-Tree 索引支持范围查询、前缀查询和等值查询。</li>\n<li>查询时可以通过键值快速定位到相应的叶子节点。</li>\n</ul>\n</li>\n<li>自平衡：\n<ul>\n<li>B-Tree 在插入和删除操作时能够保持自平衡，确保树的高度较小，从而提高查询效率。</li>\n</ul>\n</li>\n<li>支持范围查询：\n<ul>\n<li>通过遍历叶子节点实现范围查询。</li>\n</ul>\n</li>\n<li>支持前缀查询：\n<ul>\n<li>通过遍历叶子节点实现前缀查询。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"btree-索引\"><a class=\"markdownIt-Anchor\" href=\"#btree-索引\">#</a> B+Tree 索引</h4>\n<p>B+Tree 结构：</p>\n<ul>\n<li>B+Tree 是一种改进的 B-Tree，特别适用于文件系统和数据库索引。</li>\n<li>每个节点最多包含 M 个子节点，其中 M 是一个固定的参数，称为阶数。</li>\n<li>所有数据行都存储在叶子节点中。</li>\n</ul>\n<img data-src=\"/joker.github.io/2024/10/09/%E3%80%90Mysql%E3%80%91Mysql%E8%AF%A6%E8%A7%A3/v2-9a8025fcd8ffdb921a6a124713fa0f7f_r.png\" class=\"\" title=\"v2-9a8025fcd8ffdb921a6a124713fa0f7f_r.png\">\n<p>节点结构：</p>\n<ul>\n<li>根节点：树的顶部节点。</li>\n<li>内部节点：仅包含键值和指针，用于指向子节点。</li>\n<li>叶子节点：包含实际的数据行，并通过双向链表连接。</li>\n</ul>\n<p>键值顺序：</p>\n<ul>\n<li>B+Tree 中的键值是按顺序存储的，所有叶子节点位于同一层，并通过双向链表连接。</li>\n</ul>\n<p>B+Tree 索引的特点</p>\n<ul>\n<li>高效查询：\n<ul>\n<li>支持等值查询、范围查询和前缀查询。</li>\n<li>查询时可以通过键值快速定位到相应的叶子节点。</li>\n</ul>\n</li>\n<li>自平衡：\n<ul>\n<li>在插入和删除操作时能够保持自平衡，确保树的高度较小，从而提高查询效率。</li>\n</ul>\n</li>\n<li>支持范围查询：\n<ul>\n<li>通过遍历叶子节点实现范围查询，所有叶子节点通过双向链表连接，便于遍历。</li>\n</ul>\n</li>\n<li>支持前缀查询：\n<ul>\n<li>通过遍历叶子节点实现前缀查询。</li>\n</ul>\n</li>\n<li>支持排序：\n<ul>\n<li>所有数据行都存储在叶子节点中，通过双向链表连接，便于排序和遍历。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"btree索引和b-tree索引的区别\"><a class=\"markdownIt-Anchor\" href=\"#btree索引和b-tree索引的区别\">#</a> B+Tree 索引和 B-Tree 索引的区别</h4>\n<p>数据存储位置：</p>\n<ul>\n<li>B-Tree：数据可以存储在内部节点和叶子节点中。</li>\n<li>B+Tree：所有数据只存储在叶子节点中，内部节点只包含键值和指针。</li>\n</ul>\n<p>查询性能：</p>\n<ul>\n<li>B-Tree：查询可能需要访问多个层级的节点，直到找到叶子节点。</li>\n<li>B+Tree：查询总是需要访问到叶子节点，但叶子节点通过双向链表连接，便于遍历。</li>\n</ul>\n<p>范围查询：</p>\n<ul>\n<li>\n<p>B-Tree：范围查询需要遍历多个层级的节点，直到找到所有符合条件的叶子节点。</p>\n</li>\n<li>\n<p>B+Tree：范围查询只需要遍历叶子节点即可，因为所有叶子节点通过双向链表连接。</p>\n</li>\n<li>\n<p>数据冗余：</p>\n<ul>\n<li>B-Tree：数据存储在内部节点和叶子节点中，可能存在数据冗余。</li>\n<li>B+Tree：数据只存储在叶子节点中，避免了数据冗余。</li>\n</ul>\n</li>\n</ul>\n<p>磁盘访问优化：</p>\n<ul>\n<li>B-Tree：每次查询可能需要多次磁盘访问。</li>\n<li>B+Tree：查询总是需要访问到叶子节点，但叶子节点通过双向链表连接，减少了磁盘访问次数。</li>\n</ul>\n<h4 id=\"为什么要使用btree索引\"><a class=\"markdownIt-Anchor\" href=\"#为什么要使用btree索引\">#</a> 为什么要使用 B+Tree 索引？</h4>\n<ol>\n<li>\n<p>数据存储在叶子节点</p>\n<p>在 B+Tree 中，所有数据行都存储在叶子节点中，而内部节点只包含键值和指针。这种结构有以下几个优势：</p>\n<ul>\n<li>减少磁盘 I/O 次数：在磁盘访问中，每次读取或写入一个块都需要一次 I/O 操作。由于所有数据都存储在叶子节点中，查询时只需要访问叶子节点，减少了磁盘<br>\n I/O 次数。</li>\n<li>数据一致性：所有数据存储在叶子节点中，避免了数据冗余，确保数据的一致性和完整性。</li>\n</ul>\n</li>\n<li>\n<p>高效的范围查询</p>\n<p>B+Tree 的叶子节点通过双向链表连接，这使得范围查询更加高效：</p>\n<ul>\n<li>范围查询：当执行范围查询（如 WHERE id BETWEEN 10 AND 20）时，只需要遍历叶子节点即可。由于叶子节点通过双向链表连接，可以快速遍历整个范围。</li>\n<li>排序查询：当执行排序查询（如 ORDER BY id ASC）时，同样可以通过遍历叶子节点来实现排序。</li>\n</ul>\n</li>\n<li>\n<p>自平衡性</p>\n<p>B+Tree 具有自平衡性，能够在插入和删除操作时保持树的高度较小，从而提高查询效率：</p>\n<ul>\n<li>自平衡：在插入或删除操作时，B+Tree 会自动调整节点，确保树的高度保持较小，从而提高查询效率。</li>\n</ul>\n</li>\n<li>\n<p>更好的磁盘访问优化</p>\n<p>B+Tree 在磁盘访问方面具有更好的优化：</p>\n<ul>\n<li>减少磁盘 I/O：由于所有数据都存储在叶子节点中，查询时只需要访问叶子节点，减少了磁盘 I/O 次数。</li>\n<li>高效的数据块利用：B+Tree 的节点可以容纳更多的键值和指针，提高了数据块的利用率，减少了磁盘空间浪费。</li>\n</ul>\n</li>\n<li>\n<p>支持联合索引</p>\n<p>B+Tree 支持联合索引（复合索引），可以同时使用多个字段进行索引：</p>\n<ul>\n<li>联合索引：例如，可以创建一个联合索引 (col1, col2)，在查询时可以使用这两个字段进行快速定位。</li>\n<li>多列排序：联合索引还可以用于多列排序，提高排序查询的效率。</li>\n</ul>\n</li>\n<li>\n<p>更好的并发控制</p>\n<p>B+Tree 在并发控制方面也表现出色：</p>\n<ul>\n<li>锁定机制：在并发操作中，B+Tree 可以通过锁定机制来保证数据的一致性和完整性。</li>\n<li>事务处理：B+Tree 在事务处理中能够更好地支持并发操作，提高事务处理的效率。</li>\n</ul>\n</li>\n<li>\n<p>更好的扩展性</p>\n<p>B+Tree 在扩展性方面具有优势：</p>\n<ul>\n<li>易于扩展：由于所有数据都存储在叶子节点中，B+Tree 在扩展时更容易进行数据分布和分区。</li>\n<li>分布式系统：在分布式数据库系统中，B+Tree 更容易实现数据的水平分割和分布。</li>\n</ul>\n</li>\n<li>\n<p>内存和缓存友好</p>\n<p>B+Tree 的结构更适合内存和缓存：</p>\n<ul>\n<li>内存利用：B+Tree 的内部节点只包含键值和指针，占用较少的内存空间，适合内存缓存。</li>\n<li>缓存命中率：由于所有数据都在叶子节点中，缓存命中率更高，减少了从磁盘读取数据的次数。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"btree-索引的自平衡\"><a class=\"markdownIt-Anchor\" href=\"#btree-索引的自平衡\">#</a> B+Tree 索引的自平衡</h4>\n<p>B+Tree 的自平衡主要通过以下几种方式实现：</p>\n<ol>\n<li>\n<p>节点分裂</p>\n<p>当向 B+Tree 中插入一个新的键值时，如果当前节点已满，则需要将该节点分裂成两个节点。节点分裂的具体步骤如下：</p>\n<ol>\n<li>确定分裂点：\n<ul>\n<li>如果当前节点已满（即包含 M-1 个键值），则需要将其分裂成两个节点。</li>\n<li>将中间的键值作为新的中间节点的键值。</li>\n</ul>\n</li>\n<li>创建新节点：\n<ul>\n<li>创建一个新的节点，将原节点的一部分键值移动到新节点中。</li>\n<li>新节点包含大约一半的键值。</li>\n</ul>\n</li>\n<li>更新父节点：\n<ul>\n<li>在父节点中插入一个新的键值，指向新创建的节点。</li>\n<li>如果父节点已满，则继续向上分裂。</li>\n</ul>\n</li>\n</ol>\n<p>示例</p>\n<p>假设 B+Tree 的阶数为 M=3，每个节点最多包含 2 个键值。</p>\n<ol>\n<li>初始状态： <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li>插入键值 4：\n<ol>\n<li>当前节点已满，需要分裂。</li>\n<li>将中间的键值 2 提升到父节点，创建两个新节点 [1] 和 [3, 4]。</li>\n<li>更新父节点：</li>\n</ol>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> [<span class=\"number\">2</span>]</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">[<span class=\"number\">1</span>] [<span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li>插入键值 5：\n<ol>\n<li>当前节点已满，需要分裂。</li>\n<li>将中间的键值 4 提升到父节点，创建两个新节点 [3] 和 [5]。</li>\n<li>更新父节点：</li>\n</ol>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  [<span class=\"number\">2</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">  / \\ / \\</span><br><span class=\"line\">[<span class=\"number\">1</span>] [<span class=\"number\">3</span>] [<span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li>\n<p>节点合并</p>\n<p>当从 B+Tree 中删除一个键值时，如果某个节点的键值数量少于最小键值数量（即小于 M/2），则需要进行节点合并。节点合并的具体步骤如下：</p>\n<ol>\n<li>确定合并条件：\n<ul>\n<li>如果当前节点的键值数量少于 M/2，则需要与相邻的兄弟节点合并。</li>\n<li>选择一个相邻的兄弟节点，将其中一个键值移动到当前节点。</li>\n</ul>\n</li>\n<li>合并节点：\n<ul>\n<li>将相邻节点的一个键值移动到当前节点，使当前节点的键值数量达到 M/2。</li>\n<li>更新父节点中的键值。</li>\n</ul>\n</li>\n<li>更新父节点：\n<ul>\n<li>如果父节点的键值数量少于 M/2，则继续向上合并。</li>\n</ul>\n</li>\n</ol>\n<p>示例</p>\n<p>假设 B+Tree 的阶数为 M=3，每个节点最多包含 2 个键值。</p>\n<ol>\n<li>初始状态：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  [<span class=\"number\">2</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">  / \\ / \\</span><br><span class=\"line\">[<span class=\"number\">1</span>] [<span class=\"number\">3</span>] [<span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li>删除键值 4：\n<ol>\n<li>删除键值 4 后，节点 [3] 的键值数量少于 M/2，需要与相邻节点合并。</li>\n<li>将 [2] 和 [3] 合并，更新父节点：</li>\n</ol>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  [<span class=\"number\">2</span>]</span><br><span class=\"line\">  / \\</span><br><span class=\"line\">[<span class=\"number\">1</span>] [<span class=\"number\">3</span>, <span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"什么情况下无法使用索引\"><a class=\"markdownIt-Anchor\" href=\"#什么情况下无法使用索引\">#</a> 什么情况下无法使用索引</h3>\n<p>在 MySQL 中，索引可以显著提高查询性能，但并不是所有的查询都能有效地利用索引。</p>\n<ol>\n<li>使用 LIKE 操作符时\n<ul>\n<li>情况描述：当 LIKE 操作符的模式以通配符（如 %）开头时，索引通常无法被有效利用。例如，SELECT * FROM table WHERE column<br>\nLIKE ‘%abc%’。</li>\n<li>原因：索引通常是按照键值顺序存储的，而以通配符开头的模式会导致 MySQL 无法直接定位到特定的位置，因此需要进行全表扫描。</li>\n</ul>\n</li>\n<li>使用函数或表达式\n<ul>\n<li>情况描述：当查询条件中包含函数或表达式时，索引通常无法被利用。例如，SELECT * FROM table WHERE UPPER (column) = ‘ABC’ 或<br>\n SELECT * FROM table WHERE column + 1 = 5。</li>\n<li>原因：函数或表达式改变了索引键值的形式，导致索引无法直接匹配。</li>\n</ul>\n</li>\n<li>使用 OR 连接多个条件\n<ul>\n<li>情况描述：当查询条件中包含多个 OR 逻辑时，索引可能无法被有效利用。例如，SELECT * FROM table WHERE column1 = ‘A’ OR<br>\ncolumn2 = ‘B’。</li>\n<li>原因：多个 OR 条件可能导致 MySQL 需要扫描多个索引或进行全表扫描。</li>\n</ul>\n</li>\n<li>使用 NOT IN 或 NOT EXISTS\n<ul>\n<li>情况描述：当查询条件中包含 NOT IN 或 NOT EXISTS 时，索引可能无法被有效利用。例如，SELECT * FROM table WHERE column NOT<br>\nIN (‘A’, ‘B’, ‘C’) 或 SELECT * FROM table WHERE NOT EXISTS (SELECT 1<br>\nFROM other_table WHERE other_table.id = <span class=\"exturl\" data-url=\"aHR0cDovL3RhYmxlLmlk\">table.id</span>)。</li>\n<li>原因：NOT IN 和 NOT EXISTS 可能导致 MySQL 需要进行多次查找或全表扫描。</li>\n</ul>\n</li>\n<li>使用 IS NULL 或 IS NOT NULL\n<ul>\n<li>情况描述：当查询条件中包含 IS NULL 或 IS NOT NULL 时，索引可能无法被有效利用。例如，SELECT * FROM table WHERE column<br>\nIS NULL 或 SELECT * FROM table WHERE column IS NOT NULL。</li>\n<li>原因：索引通常不包含 NULL 值，因此在这种情况下索引无法直接定位到特定的位置。</li>\n</ul>\n</li>\n<li>使用 IN 语句且参数较多\n<ul>\n<li>情况描述：当查询条件中包含 IN 语句且参数较多时，索引可能无法被有效利用。例如，SELECT * FROM table WHERE column IN (’<br>\nA’, ‘B’, ‘C’, …, ‘Z’)。</li>\n<li>原因：大量的 IN 参数可能导致 MySQL 需要进行多次查找或全表扫描。</li>\n</ul>\n</li>\n<li>使用 ORDER BY 或 GROUP BY 未覆盖索引\n<ul>\n<li>情况描述：当查询条件中包含 ORDER BY 或 GROUP BY 但未覆盖索引时，索引可能无法被有效利用。例如，SELECT * FROM table<br>\nORDER BY column1, column2。</li>\n<li>原因：如果索引没有包含所有排序或分组的列，MySQL 可能需要额外的排序操作。</li>\n</ul>\n</li>\n<li>使用 LIMIT 但未指定排序\n<ul>\n<li>情况描述：当查询条件中包含 LIMIT 但未指定排序时，索引可能无法被有效利用。例如，SELECT * FROM table LIMIT 10。</li>\n<li>原因：如果没有指定排序，MySQL 可能需要全表扫描来获取前几条记录。</li>\n</ul>\n</li>\n<li>使用 JOIN 但未指定合适的索引\n<ul>\n<li>情况描述：当查询条件中包含 JOIN 但未指定合适的索引时，索引可能无法被有效利用。例如，SELECT * FROM table1 JOIN table2<br>\nON <span class=\"exturl\" data-url=\"aHR0cDovL3RhYmxlMS5pZA==\">table1.id</span> = <span class=\"exturl\" data-url=\"aHR0cDovL3RhYmxlMi5pZA==\">table2.id</span>。</li>\n<li>原因：如果没有合适的索引，MySQL 可能需要进行全表扫描或多次查找。</li>\n</ul>\n</li>\n<li>使用 BETWEEN 但未覆盖索引\n<ul>\n<li>情况描述：当查询条件中包含 BETWEEN 但未覆盖索引时，索引可能无法被有效利用。例如，SELECT * FROM table WHERE column<br>\nBETWEEN ‘A’ AND ‘Z’。</li>\n<li>原因：如果索引没有包含所有查询条件的列，MySQL 可能需要额外的查找操作。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"最左匹配原则\"><a class=\"markdownIt-Anchor\" href=\"#最左匹配原则\">#</a> 最左匹配原则</h3>\n<p>最左匹配原则是指在复合索引中，查询条件必须从索引的最左边开始匹配，才能有效地利用索引。具体来说：</p>\n<ul>\n<li>复合索引：由多个列组成的索引。</li>\n<li>最左匹配：查询条件必须从索引的第一个列开始，依次向右匹配。</li>\n</ul>\n<p>示例说明</p>\n<p>假设有一个复合索引 (col1, col2, col3)，那么查询条件必须从 col1 开始，然后依次向右匹配 col2 和 col3。</p>\n<ul>\n<li>\n<p>有效的查询条件</p>\n<ul>\n<li>SELECT * FROM table WHERE col1 = ‘value1’</li>\n<li>SELECT * FROM table WHERE col1 = ‘value1’ AND col2 = ‘value2’</li>\n<li>SELECT * FROM table WHERE col2 = ‘value2’ AND col1 = ‘value1’</li>\n</ul>\n<p>这些查询条件都能够有效地利用索引 (col1, col2, col3)。</p>\n</li>\n<li>\n<p>无效的查询条件</p>\n<ul>\n<li>SELECT * FROM table WHERE col2 = ‘value2’</li>\n<li>SELECT * FROM table WHERE col2 = ‘value2’ AND col3 = ‘value3’</li>\n<li>SELECT * FROM table WHERE col3 = ‘value3’</li>\n</ul>\n<p>这些查询条件无法有效地利用索引 (col1, col2, col3)，因为它们没有从索引的最左边开始匹配。</p>\n</li>\n</ul>\n<p>最左匹配原则的例外情况</p>\n<p>尽管最左匹配原则是一个基本规则，但在某些情况下，MySQL 仍可以部分地利用索引：</p>\n<ol>\n<li>使用 OR 但条件相同<br>\n有效示例： <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">table</span> <span class=\"keyword\">WHERE</span> col1 <span class=\"operator\">=</span> <span class=\"string\">&#x27;value1&#x27;</span> <span class=\"keyword\">OR</span> col1 <span class=\"operator\">=</span> <span class=\"string\">&#x27;value2&#x27;</span>;</span><br></pre></td></tr></table></figure>\n这种查询条件虽然使用了 OR，但条件相同，可以从索引的最左边开始匹配，可以有效地利用索引 (col1, col2, col3)。</li>\n<li>使用 IN 语句<br>\n有效示例： <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">table</span> <span class=\"keyword\">WHERE</span> col1 <span class=\"keyword\">IN</span> (<span class=\"string\">&#x27;value1&#x27;</span>, <span class=\"string\">&#x27;value2&#x27;</span>);</span><br></pre></td></tr></table></figure>\n这种查询条件虽然使用了 IN 语句，但可以从索引的最左边开始匹配，可以有效地利用索引 (col1, col2, col3)。</li>\n</ol>\n<p>最左匹配原则的优化建议</p>\n<ul>\n<li>合理设计索引：根据查询需求设计合理的复合索引，确保查询条件能够从索引的最左边开始匹配。</li>\n<li>避免使用函数或表达式：查询条件中尽量避免使用函数或表达式，因为它们可能会导致索引失效。</li>\n<li>使用 EXPLAIN 查看执行计划：使用 EXPLAIN 命令查看查询的执行计划，检查是否有效地利用了索引。</li>\n</ul>\n<h2 id=\"事务\"><a class=\"markdownIt-Anchor\" href=\"#事务\">#</a> 事务</h2>\n<p>事务可以理解为一组相关操作的集合，这些操作作为一个整体执行。事务的主要目的是确保数据的一致性和完整性，即使在出现故障的情况下也能保证数据的正确性。</p>\n<p>事务通常具备四个主要特性，称为 ACID 特性：</p>\n<ul>\n<li>原子性（Atomicity）：事务中的所有操作要么全部成功，要么全部失败。如果事务中的任何一部分失败，则整个事务都会回滚，恢复到事务开始之前的状态。</li>\n<li>一致性（Consistency）：事务执行后，数据库必须处于一致性的状态。这意味着事务执行前后，数据库的状态必须满足预定的约束和业务规则。</li>\n<li>隔离性（Isolation）：事务之间相互独立，一个事务的操作不会影响其他事务的结果。每个事务看起来像是在单独的系统中执行一样。</li>\n<li>持久性（Durability）：一旦事务提交（commit），其结果就会永久保存在数据库中，即使系统发生故障也不会丢失。</li>\n</ul>\n<p>事务通常包括以下基本操作：</p>\n<ol>\n<li>开始事务（BEGIN TRANSACTION）：开始一个新的事务，标记事务的起点。</li>\n<li>提交事务（COMMIT）：提交事务，将事务中的所有更改永久保存到数据库中。</li>\n<li>回滚事务（ROLLBACK）：回滚事务，撤销事务中的所有更改，恢复到事务开始之前的状态。</li>\n<li>保存点（SAVEPOINT）：在事务中设置一个保存点，可以在后续操作中回滚到这个保存点。</li>\n</ol>\n<h3 id=\"并发事务\"><a class=\"markdownIt-Anchor\" href=\"#并发事务\">#</a> 并发事务</h3>\n<p>并发事务是指多个事务同时对同一个数据进行操作，可能导致数据不一致的情况。<br>\n以下是一些常见的并发事务问题：</p>\n<ul>\n<li>\n<p>脏读：一个事务读取到另一个事务尚未提交的数据。 事务 A 读取事务 B 更新的数据，然后 B 回滚操作，那么 A 读取到的数据是脏数据。</p>\n</li>\n<li>\n<p>不可重复读：一个事务中两次读取的数据的内容不一致。 事务 A 多次读取同一数据，事务 B 在事务 A 多次读取的过程中，对数据作了更新并提交，导致事务<br>\n A 多次读取同一数据时，结果 不一致。</p>\n</li>\n<li>\n<p>幻读：一个事务中两次读取的数据量不一致。 系统管理员 A 将数据库中所有学生的成绩从具体分数改为 ABCDE 等级，但是系统管理员 B<br>\n 就在这个时候插入了一条具体分数的记录，当系统管理员 A 改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。</p>\n</li>\n</ul>\n<p>不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。 解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表。</p>\n<p>如何解决并发事务问题？</p>\n<p>MySQL 事务的隔离级别定义了事务之间相互隔离的程度，不同的隔离级别有不同的效果：</p>\n<ul>\n<li>读未提交（Read Uncommitted）：\n<ul>\n<li>最低的隔离级别，允许事务读取未提交的数据。</li>\n<li>容易产生脏读、不可重复读和幻读。</li>\n</ul>\n</li>\n<li>读已提交（Read Committed）：\n<ul>\n<li>允许事务读取已提交的数据。</li>\n<li>防止脏读，但仍然可能出现不可重复读和幻读。</li>\n</ul>\n</li>\n<li>可重复读（Repeatable Read）：\n<ul>\n<li>事务在整个执行期间读取的数据始终不变。</li>\n<li>防止脏读和不可重复读，但仍然可能出现幻读。</li>\n</ul>\n</li>\n<li>序列化（Serializable）：\n<ul>\n<li>最高的隔离级别，完全隔离事务，防止所有并发问题。</li>\n<li>可能导致性能下降，但确保了最高的数据一致性。</li>\n</ul>\n</li>\n</ul>\n<p>不同的隔离级别对性能和数据准确性的影响均不相同，需要根据具体的业务场景来做出取舍。顺带一提，在 MySQL<br>\n 中，默认的事务隔离级别是可重复读（Repeatable Read）。</p>\n<h2 id=\"锁\"><a class=\"markdownIt-Anchor\" href=\"#锁\">#</a> 锁</h2>\n<p>MySQL 中的锁机制是数据库管理系统中非常重要的一部分，用于确保并发操作的一致性和数据的完整性。锁机制可以防止多个事务同时修改同一份数据，从而避免数据冲突和不一致的问题。</p>\n<h3 id=\"mysql-中的锁类型\"><a class=\"markdownIt-Anchor\" href=\"#mysql-中的锁类型\">#</a> MySQL 中的锁类型</h3>\n<ol>\n<li>\n<p>表级锁（Table-Level Locks）</p>\n<p>表级锁是最粗粒度的锁，对整个表进行锁定。这种锁简单且易于实现，但在高并发环境下性能较差。</p>\n<p>类型</p>\n<ul>\n<li>读锁（READ LOCK）：\n<ul>\n<li>只允许读取数据，不允许写入数据。</li>\n<li>多个读锁可以同时存在。</li>\n</ul>\n</li>\n<li>写锁（WRITE LOCK）：\n<ul>\n<li>独占锁，不允许读取和写入数据。</li>\n<li>只有一个写锁可以存在。</li>\n</ul>\n</li>\n</ul>\n<p>应用场景</p>\n<ul>\n<li>备份和恢复：在备份或恢复数据时，可以使用表级锁确保数据的一致性。</li>\n<li>低并发环境：在并发较低的环境中，可以使用表级锁简化锁管理。</li>\n</ul>\n</li>\n<li>\n<p>行级锁（Row-Level Locks）</p>\n<p>行级锁是对表中的单个行进行锁定，粒度较细，适用于高并发环境。</p>\n<p>存储引擎支持</p>\n<ul>\n<li>InnoDB：支持行级锁，广泛应用于高并发环境。</li>\n<li>MyISAM：不支持行级锁，只支持表级锁。</li>\n</ul>\n<p>类型</p>\n<ul>\n<li>共享锁（Shared Lock，S 锁）：\n<ul>\n<li>多个事务可以同时读取同一行数据。</li>\n<li>读取操作可以并行执行。</li>\n</ul>\n</li>\n<li>排他锁（Exclusive Lock，X 锁）：\n<ul>\n<li>排他锁独占，不允许其他事务读取或写入同一行数据。</li>\n<li>写入操作独占执行。</li>\n</ul>\n</li>\n</ul>\n<p>应用场景</p>\n<ul>\n<li>并发读写：在高并发环境中，行级锁可以允许多个事务同时读取数据，提高并发性能。</li>\n<li>事务处理：在事务处理中，行级锁可以确保数据的一致性和完整性。</li>\n</ul>\n</li>\n<li>\n<p>页面级锁（Page-Level Locks）</p>\n<p>页面级锁是对表中的一页数据进行锁定，粒度介于表级锁和行级锁之间。</p>\n<p>存储引擎支持</p>\n<ul>\n<li>BDB（Berkeley DB）：支持页面级锁。</li>\n<li>InnoDB：支持页面级锁，但在实际应用中更常用的是行级锁。</li>\n</ul>\n<p>应用场景</p>\n<ul>\n<li>中等并发环境：在中等并发环境中，页面级锁可以提高并发性能，减少锁的竞争。</li>\n</ul>\n</li>\n<li>\n<p>意向锁（Intention Locks）</p>\n<p>意向锁是一种辅助锁，用于指示事务打算对数据进行的操作类型。</p>\n<p>类型</p>\n<ul>\n<li>意向共享锁（Intention Shared Lock，IS 锁）：\n<ul>\n<li>表示事务打算获取某一行的共享锁。</li>\n</ul>\n</li>\n<li>意向排他锁（Intention Exclusive Lock，IX 锁）：\n<ul>\n<li>表示事务打算获取某一行的排他锁。</li>\n</ul>\n</li>\n</ul>\n<p>应用场景</p>\n<ul>\n<li>事务管理：在事务管理中，意向锁帮助数据库管理系统预测事务的操作类型，提前准备相应的锁资源。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"mysql-中的锁机制\"><a class=\"markdownIt-Anchor\" href=\"#mysql-中的锁机制\">#</a> MySQL 中的锁机制</h3>\n<p>InnoDB 存储引擎广泛应用于 MySQL 中，其支持多种锁机制。<br>\n锁与事务隔离级别的关系如下：</p>\n<ul>\n<li>读未提交（Read Uncommitted）：不使用任何锁。</li>\n<li>读已提交（Read Committed）：使用行级锁，读取时不加锁。</li>\n<li>可重复读（Repeatable Read）：使用行级锁，读取时加锁。</li>\n<li>序列化（Serializable）：使用行级锁，读取时加锁，确保最高隔离级别。</li>\n</ul>\n<p>间隙锁（Gap Locks）</p>\n<ul>\n<li>定义：间隙锁锁定行之间的 “间隙”，防止插入新的行。</li>\n<li>应用场景：在可重复读隔离级别下，InnoDB 使用间隙锁防止插入新的行。</li>\n</ul>\n",
            "tags": [
                "后端",
                "数据库",
                "关系型数据库",
                "Mysql"
            ]
        }
    ]
}