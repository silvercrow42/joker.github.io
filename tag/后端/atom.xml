<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://silvercrow42.github.io/joker.github.io</id>
    <title>Joker • Posts by &#34;后端&#34; tag</title>
    <link href="https://silvercrow42.github.io/joker.github.io" />
    <updated>2024-11-01T07:56:08.000Z</updated>
    <category term="后端" />
    <category term="数据库" />
    <category term="关系型数据库" />
    <category term="Mysql" />
    <category term="MQ" />
    <category term="RocketMQ" />
    <category term="操作系统" />
    <category term="Linux" />
    <category term="java" />
    <category term="多线程" />
    <category term="NoSQL" />
    <category term="缓存" />
    <category term="Redis" />
    <category term="Zookeeper" />
    <category term="spring" />
    <category term="Redisson" />
    <category term="分布式锁" />
    <entry>
        <id>https://silvercrow42.github.io/joker.github.io/2024/11/01/%E3%80%90java%E3%80%91%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/</id>
        <title>【java】多线程详解</title>
        <link rel="alternate" href="https://silvercrow42.github.io/joker.github.io/2024/11/01/%E3%80%90java%E3%80%91%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/"/>
        <content type="html">&lt;h2 id=&#34;并发基础&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#并发基础&#34;&gt;#&lt;/a&gt; 并发基础&lt;/h2&gt;
&lt;h3 id=&#34;什么是并发&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是并发&#34;&gt;#&lt;/a&gt; 什么是并发&lt;/h3&gt;
&lt;p&gt;并发是指多个任务在同一时间段内交错执行的能力。虽然这些任务可能不是真正的同时执行，但它们在时间上被快速交替调度，从而给人一种同时进行的错觉。并发可以显著提高程序的效率和响应性。以下是并发的几个关键点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任务切换：操作系统通过快速切换任务来实现并发，每个任务在一段时间内获得 CPU 时间片。&lt;/li&gt;
&lt;li&gt;资源共享：并发任务通常共享某些资源，如内存、文件句柄等，因此需要适当的同步机制来避免冲突。&lt;/li&gt;
&lt;li&gt;提高资源利用率：通过并发，可以更充分地利用系统资源，尤其是多核处理器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;并发的使用场景&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#并发的使用场景&#34;&gt;#&lt;/a&gt; 并发的使用场景&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Web 服务器
&lt;ul&gt;
&lt;li&gt;处理多个请求：Web 服务器需要同时处理来自多个客户端的请求。通过并发，服务器可以创建多个线程或进程来处理这些请求，提高响应速度和吞吐量。&lt;/li&gt;
&lt;li&gt;异步 IO 操作：处理网络请求和文件读写等 IO 操作时，使用异步 IO 可以避免阻塞主线程，提高整体性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据库系统
&lt;ul&gt;
&lt;li&gt;并行查询：数据库系统可以并行执行多个查询，特别是在处理大数据集时，可以显著提高查询效率。&lt;/li&gt;
&lt;li&gt;事务管理：并发控制机制（如锁和事务隔离级别）确保多个事务可以安全地并行执行，避免数据不一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;图形用户界面（GUI）应用程序
&lt;ul&gt;
&lt;li&gt;响应用户输入：主线程负责处理用户输入和更新界面，后台线程处理耗时任务（如数据加载、计算等），保持界面的响应性。&lt;/li&gt;
&lt;li&gt;动画和渲染：并行处理动画和渲染任务，提高视觉效果的流畅度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;大数据分析
&lt;ul&gt;
&lt;li&gt;并行数据处理：使用 MapReduce 等并行计算框架，将大数据集分成多个部分，由多个节点并行处理，加快数据处理速度。&lt;/li&gt;
&lt;li&gt;分布式存储：并行读取和写入分布式存储系统中的数据，提高数据访问效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;游戏开发
&lt;ul&gt;
&lt;li&gt;物理模拟：并行处理复杂的物理模拟计算，提高游戏的真实感和性能。&lt;/li&gt;
&lt;li&gt;AI 计算：并行处理游戏中的 AI 逻辑，使 NPC（非玩家角色）的行为更加智能和多样化。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文件和数据处理
&lt;ul&gt;
&lt;li&gt;并行文件处理：并行读取和处理多个文件，加快数据处理速度。&lt;/li&gt;
&lt;li&gt;批处理任务：并行执行批处理任务，如日志分析、数据转换等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;网络爬虫
&lt;ul&gt;
&lt;li&gt;并行抓取：同时从多个网站抓取数据，提高抓取速度。&lt;/li&gt;
&lt;li&gt;数据处理：并行处理抓取到的数据，加快数据清洗和分析过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;机器学习和深度学习
&lt;ul&gt;
&lt;li&gt;模型训练：并行训练模型，特别是在使用 GPU 加速时，可以显著缩短训练时间。&lt;/li&gt;
&lt;li&gt;数据预处理：并行处理大量训练数据，提高数据准备效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实时系统
&lt;ul&gt;
&lt;li&gt;实时数据处理：并行处理实时数据流，如传感器数据、股票市场数据等，确保低延迟和高吞吐量。&lt;/li&gt;
&lt;li&gt;任务调度：并行调度和执行多个实时任务，确保系统的响应性和可靠性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;云计算和虚拟化
&lt;ul&gt;
&lt;li&gt;资源分配：并行管理和分配计算资源，提高资源利用率。&lt;/li&gt;
&lt;li&gt;虚拟机管理：并行处理虚拟机的创建、启动和停止等操作，提高管理效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;高并发情况下可能出现的问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#高并发情况下可能出现的问题&#34;&gt;#&lt;/a&gt; 高并发情况下可能出现的问题&lt;/h3&gt;
&lt;p&gt;在并发场景下，可能会面临多种问题，这些问题如果不妥善处理，会影响系统的稳定性和性能。以下是一些常见的并发问题及其简要说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;死锁（Deadlock）
&lt;ul&gt;
&lt;li&gt;定义：多个线程或进程互相等待对方持有的资源，导致所有线程或进程都无法继续执行。&lt;/li&gt;
&lt;li&gt;原因：资源分配不当、循环等待、缺乏超时机制等。&lt;/li&gt;
&lt;li&gt;示例：线程 A 持有资源 X 并请求资源 Y，而线程 B 持有资源 Y 并请求资源 X。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;竞态条件（Race Condition）
&lt;ul&gt;
&lt;li&gt;定义：多个线程或进程以不可预测的顺序访问和修改共享资源，导致不一致的状态。&lt;/li&gt;
&lt;li&gt;原因：缺乏适当的同步机制、线程间通信不正确等。&lt;/li&gt;
&lt;li&gt;示例：多个线程同时读取和修改同一个变量，导致最终结果不确定。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;上下文切换开销（Context Switching Overhead）
&lt;ul&gt;
&lt;li&gt;定义：操作系统在不同线程或进程之间切换时，需要保存和恢复当前线程的上下文，这会消耗时间和资源。&lt;/li&gt;
&lt;li&gt;原因：频繁的上下文切换。&lt;/li&gt;
&lt;li&gt;示例：在高并发环境下，频繁的线程切换会导致 CPU 利用率下降。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;资源竞争（Resource Contention）
&lt;ul&gt;
&lt;li&gt;定义：多个线程或进程竞争有限的资源，导致性能下降或资源浪费。&lt;/li&gt;
&lt;li&gt;原因：资源不足、同步机制不当等。&lt;/li&gt;
&lt;li&gt;示例：多个线程同时访问同一个文件或数据库连接池。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;饥饿（Starvation）
&lt;ul&gt;
&lt;li&gt;定义：某个线程或进程由于长时间无法获得所需的资源而无法继续执行。&lt;/li&gt;
&lt;li&gt;原因：优先级调度不当、资源分配不公平等。&lt;/li&gt;
&lt;li&gt;示例：低优先级线程长时间无法获得 CPU 时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;活锁（Livelock）
&lt;ul&gt;
&lt;li&gt;定义：多个线程或进程不断重复相同的操作，试图避免冲突，但最终无法取得进展。&lt;/li&gt;
&lt;li&gt;原因：缺乏有效的冲突解决机制。&lt;/li&gt;
&lt;li&gt;示例：两个线程在尝试获取同一个资源时，不断退让，导致两者都无法成功获取资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内存泄漏（Memory Leak）
&lt;ul&gt;
&lt;li&gt;定义：程序在运行过程中未能释放不再使用的内存，导致内存占用逐渐增加。&lt;/li&gt;
&lt;li&gt;原因：未正确管理内存分配和释放、对象引用未解除等。&lt;/li&gt;
&lt;li&gt;示例：线程创建的对象未被及时回收，导致内存占用不断增加。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不一致状态（Inconsistent State）
&lt;ul&gt;
&lt;li&gt;定义：由于并发操作导致数据状态不一致，影响程序的正确性。&lt;/li&gt;
&lt;li&gt;原因：缺乏原子操作、同步机制不当等。&lt;/li&gt;
&lt;li&gt;示例：多个线程同时修改同一个数据结构，导致数据结构损坏。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;性能瓶颈（Performance Bottleneck）
&lt;ul&gt;
&lt;li&gt;定义：系统在高并发情况下，由于某个组件的性能限制，导致整体性能下降。&lt;/li&gt;
&lt;li&gt;原因：单点故障、资源限制、设计不合理等。&lt;/li&gt;
&lt;li&gt;示例：数据库连接池大小限制导致请求排队，影响整体性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;解决方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步机制：使用锁（如互斥锁、信号量）、条件变量等同步机制来协调线程之间的访问。&lt;/li&gt;
&lt;li&gt;原子操作：使用原子操作来确保操作的不可分割性。&lt;/li&gt;
&lt;li&gt;线程池：使用线程池来管理线程，减少上下文切换开销。&lt;/li&gt;
&lt;li&gt;资源管理：合理分配和管理资源，避免资源竞争和饥饿。&lt;/li&gt;
&lt;li&gt;超时机制：设置超时机制，防止死锁和活锁。&lt;/li&gt;
&lt;li&gt;内存管理：及时释放不再使用的内存，避免内存泄漏。&lt;/li&gt;
&lt;li&gt;性能优化：识别和优化性能瓶颈，提高系统整体性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;happen-before-原则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#happen-before-原则&#34;&gt;#&lt;/a&gt; Happen-before 原则&lt;/h3&gt;
&lt;p&gt;Happen-before 原则是 Java 内存模型（Java Memory Model, JMM）中的一个重要概念，用于保证多线程环境下的内存可见性和操作顺序。Happen-before&lt;br&gt;
 原则定义了两个操作之间的顺序关系，确保一个操作的结果对另一个操作是可见的。&lt;/p&gt;
&lt;p&gt;如果一个操作 A happen-before 另一个操作 B，那么 A 的结果对 B 是可见的，且 A 的动作在 B 之前完成。&lt;/p&gt;
&lt;p&gt;Happen-before 原则包括以下几个具体规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序顺序规则（Program Order Rule）
&lt;ul&gt;
&lt;li&gt;在一个线程中，按照程序代码的顺序，前面的操作 happen-before 后面的操作。&lt;/li&gt;
&lt;li&gt;示例：在同一个线程中，x = 1; y = x + 1;，x = 1 happen-before y = x + 1。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;监视器锁规则（Monitor Lock Rule）
&lt;ul&gt;
&lt;li&gt;对同一个锁的解锁操作 happen-before 后面对该锁的加锁操作。&lt;/li&gt;
&lt;li&gt;示例：线程 A 解锁一个对象的监视器，然后线程 B 加锁同一个对象的监视器，A 的解锁操作 happen-before B 的加锁操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;volatile 变量规则（Volatile Variable Rule）
&lt;ul&gt;
&lt;li&gt;对一个 volatile 变量的写操作 happen-before 后面对该变量的读操作。&lt;/li&gt;
&lt;li&gt;示例：线程 A 写入一个 volatile 变量 x，然后线程 B 读取同一个 volatile 变量 x，A 的写操作 happen-before B 的读操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;线程启动规则（Thread Start Rule）
&lt;ul&gt;
&lt;li&gt;线程的启动操作 happen-before 线程中的任何操作。&lt;/li&gt;
&lt;li&gt;示例：线程 A 启动线程 B，A 的启动操作 happen-before B 中的任何操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;线程终止规则（Thread Termination Rule）
&lt;ul&gt;
&lt;li&gt;线程中的任何操作 happen-before 线程的终止检测。&lt;/li&gt;
&lt;li&gt;示例：线程 A 终止，线程 B 检测到 A 已经终止，A 中的任何操作 happen-before B 检测到 A 的终止。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;中断规则（Interrupt Rule）
&lt;ul&gt;
&lt;li&gt;对线程的中断操作 happen-before 被中断线程检测到中断。&lt;/li&gt;
&lt;li&gt;示例：线程 A 中断线程 B，A 的中断操作 happen-before B 检测到中断。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;传递性（Transitivity）
&lt;ul&gt;
&lt;li&gt;如果 A happen-before B，且 B happen-before C，则 A happen-before C。&lt;/li&gt;
&lt;li&gt;示例：A happen-before B，B happen-before C，因此 A happen-before C。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;java-中的线程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#java-中的线程&#34;&gt;#&lt;/a&gt; Java 中的线程&lt;/h2&gt;
&lt;h3 id=&#34;线程的生命周期&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#线程的生命周期&#34;&gt;#&lt;/a&gt; 线程的生命周期&lt;/h3&gt;
&lt;p&gt;Java 线程有六种状态，这些状态反映了线程在其生命周期中的不同阶段。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;新建（New）：线程被创建但尚未启动。&lt;/p&gt;
&lt;p&gt;前置条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当调用 Thread 对象的 start 方法时，线程从新建状态切换到就绪状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;就绪（Runnable）线程已经准备好运行，等待 CPU 分配时间片。&lt;/p&gt;
&lt;p&gt;前置条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从新建状态调用 start 方法后进入就绪状态。&lt;/li&gt;
&lt;li&gt;从阻塞、等待或定时等待状态返回后进入就绪状态。&lt;/li&gt;
&lt;li&gt;从运行状态因时间片用完或更高优先级线程抢占 CPU 而进入就绪状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行（Running）：Java 线程中将就绪（ready）和运行中（running）两种状态笼统的称为 “运行”，以下为两种状态的区分情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;就绪（Ready）：线程已经准备好运行，等待 CPU 分配时间片。&lt;/p&gt;
&lt;p&gt;前置条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从新建状态调用 start 方法后进入就绪状态。&lt;/li&gt;
&lt;li&gt;从阻塞、等待或定时等待状态返回后进入就绪状态。&lt;/li&gt;
&lt;li&gt;从运行状态因时间片用完或更高优先级线程抢占 CPU 而进入就绪状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行（Running）：线程正在 CPU 上执行。&lt;/p&gt;
&lt;p&gt;前置条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从就绪状态获得 CPU 时间片后进入运行状态。&lt;/li&gt;
&lt;li&gt;从运行状态因时间片用完或更高优先级线程抢占 CPU 而进入就绪状态。&lt;/li&gt;
&lt;li&gt;从运行状态因调用 wait、join、sleep 等方法进入等待或定时等待状态。&lt;/li&gt;
&lt;li&gt;从运行状态因调用 Object 的 wait 方法进入等待状态。&lt;/li&gt;
&lt;li&gt;从运行状态因调用 Thread 的 join 方法进入等待状态。&lt;/li&gt;
&lt;li&gt;从运行状态因调用 Thread 的 sleep 方法进入定时等待状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;阻塞（Blocked）：线程被阻塞，等待获取监视器锁。&lt;/p&gt;
&lt;p&gt;前置条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从运行状态因尝试获取已被其他线程持有的锁而进入阻塞状态。&lt;/li&gt;
&lt;li&gt;从阻塞状态因获得锁后进入就绪状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;等待（Waiting）：线程无限期等待其他线程执行特定操作。&lt;/p&gt;
&lt;p&gt;前置条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从运行状态因调用 Object 的 wait 方法进入等待状态。&lt;/li&gt;
&lt;li&gt;从运行状态因调用 Thread 的 join 方法进入等待状态。&lt;/li&gt;
&lt;li&gt;从运行状态因调用 LockSupport 的 park 方法进入等待状态。&lt;/li&gt;
&lt;li&gt;从等待状态因调用 Object 的 notify 或 notifyAll 方法进入就绪状态。&lt;/li&gt;
&lt;li&gt;从等待状态因调用 Thread 的 interrupt 方法进入就绪状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定时等待（Timed Waiting）：线程在指定时间内等待其他线程执行特定操作。&lt;/p&gt;
&lt;p&gt;前置条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从运行状态因调用 Thread 的 sleep 方法进入定时等待状态。&lt;/li&gt;
&lt;li&gt;从运行状态因调用 Object 的 wait 方法并指定超时时间进入定时等待状态。&lt;/li&gt;
&lt;li&gt;从运行状态因调用 Thread 的 join 方法并指定超时时间进入定时等待状态。&lt;/li&gt;
&lt;li&gt;从运行状态因调用 LockSupport 的 parkNanos 或 parkUntil 方法进入定时等待状态。&lt;/li&gt;
&lt;li&gt;从定时等待状态因超时或调用 Thread 的 interrupt 方法进入就绪状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;终止（Terminated）：线程已经退出，不再活动。&lt;/p&gt;
&lt;p&gt;前置条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从运行状态因 run 方法执行完毕或抛出未捕获的异常而进入终止状态。&lt;/li&gt;
&lt;li&gt;从等待或定时等待状态因调用 Thread 的 interrupt 方法并抛出 InterruptedException 而进入终止状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="后端" />
        <category term="java" />
        <category term="多线程" />
        <updated>2024-11-01T07:56:08.000Z</updated>
    </entry>
    <entry>
        <id>https://silvercrow42.github.io/joker.github.io/2024/10/09/%E3%80%90Mysql%E3%80%91Mysql%E8%AF%A6%E8%A7%A3/</id>
        <title>【Mysql】Mysql详解</title>
        <link rel="alternate" href="https://silvercrow42.github.io/joker.github.io/2024/10/09/%E3%80%90Mysql%E3%80%91Mysql%E8%AF%A6%E8%A7%A3/"/>
        <content type="html">&lt;h2 id=&#34;什么是mysql&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是mysql&#34;&gt;#&lt;/a&gt; 什么是 Mysql&lt;/h2&gt;
&lt;p&gt;MySQL 是一个广泛使用的开源关系型数据库管理系统（RDBMS），由 MySQL AB 公司开发，后来被 Sun Microsystems 收购，最终成为 Oracle&lt;br&gt;
 公司的一部分。MySQL 被广泛应用于 Web 应用、企业应用和个人项目中。以下是关于 MySQL 的一些详细介绍：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高性能：MySQL 提供了高效的查询处理机制，能够处理大量的并发请求。&lt;/li&gt;
&lt;li&gt;易于使用：安装简单，配置容易，支持多种操作系统（如 Windows、Linux 和 macOS）。&lt;/li&gt;
&lt;li&gt;安全性：提供了丰富的安全特性，包括用户认证、权限管理、数据加密等。&lt;/li&gt;
&lt;li&gt;扩展性：支持多种存储引擎（如 InnoDB、MyISAM 等），可以根据不同的应用场景选择合适的存储引擎。&lt;/li&gt;
&lt;li&gt;开源免费：作为开源软件，MySQL 可以免费使用，适用于各种规模的应用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据库结构&lt;br&gt;
 MySQL 使用标准的关系模型，包括表、视图、索引等基本组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表：存储数据的基本单位，由行和列组成。&lt;/li&gt;
&lt;li&gt;视图：虚拟表，基于一个或多个表的查询结果。&lt;/li&gt;
&lt;li&gt;索引：用于加快数据检索速度的特殊数据结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存储引擎&lt;br&gt;
 MySQL 支持多种存储引擎，其中最常用的是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;InnoDB：支持事务处理、外键约束和行级锁定。&lt;/li&gt;
&lt;li&gt;MyISAM：不支持事务处理，但性能较高，适合读取密集型应用。&lt;/li&gt;
&lt;li&gt;Memory：将数据存储在内存中，提供极高的读写速度，但不适合持久化存储。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;mysql的数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mysql的数据类型&#34;&gt;#&lt;/a&gt; Mysql 的数据类型&lt;/h2&gt;
&lt;h3 id=&#34;数值类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数值类型&#34;&gt;#&lt;/a&gt; 数值类型&lt;/h3&gt;
&lt;p&gt;MySQL 支持所有标准 SQL 数值数据类型。&lt;/p&gt;
&lt;p&gt;这些类型包括严格数值数据类型 (INTEGER、SMALLINT、DECIMAL 和 NUMERIC)，以及近似数值数据类型 (FLOAT、REAL 和 DOUBLE PRECISION)。&lt;/p&gt;
&lt;p&gt;关键字 INT 是 INTEGER 的同义词，关键字 DEC 是 DECIMAL 的同义词。&lt;/p&gt;
&lt;p&gt;BIT 数据类型保存位字段值，并且支持 MyISAM、MEMORY、InnoDB 和 BDB 表。&lt;/p&gt;
&lt;p&gt;作为 SQL 标准的扩展，MySQL 也支持整数类型 TINYINT、MEDIUMINT 和 BIGINT。下面的表显示了需要的每个整数类型的存储和范围。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;大小 (bytes)&lt;/th&gt;
&lt;th&gt;范围（有符号）&lt;/th&gt;
&lt;th&gt;范围（无符号）&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;TINYINT&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;(-128，127)&lt;/td&gt;
&lt;td&gt;(0，255)&lt;/td&gt;
&lt;td&gt;小整数值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SMALLINT&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;(-32 768，32 767)&lt;/td&gt;
&lt;td&gt;(0，65 535)&lt;/td&gt;
&lt;td&gt;大整数值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MEDIUMINT&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;(-8 388 608，8 388 607)&lt;/td&gt;
&lt;td&gt;(0，16 777 215)&lt;/td&gt;
&lt;td&gt;大整数值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;INT 或 INTEGER&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;(-2 147 483 648，2 147 483 647)&lt;/td&gt;
&lt;td&gt;(0，4 294 967 295)&lt;/td&gt;
&lt;td&gt;大整数值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BIGINT&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)&lt;/td&gt;
&lt;td&gt;(0，18 446 744 073 709 551 615)&lt;/td&gt;
&lt;td&gt;极大整数值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FLOAT&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)&lt;/td&gt;
&lt;td&gt;0，(1.175 494 351 E-38，3.402 823 466 E+38)&lt;/td&gt;
&lt;td&gt;单精度浮点数值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DOUBLE&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)&lt;/td&gt;
&lt;td&gt;0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)&lt;/td&gt;
&lt;td&gt;双精度浮点数值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DECIMAL&lt;/td&gt;
&lt;td&gt;对 DECIMAL (M,D) ，如果 M&amp;gt;D，为 M+2 否则为 D+2&lt;/td&gt;
&lt;td&gt;依赖于 M 和 D 的值&lt;/td&gt;
&lt;td&gt;依赖于 M 和 D 的值&lt;/td&gt;
&lt;td&gt;小数值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;日期和时间类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#日期和时间类型&#34;&gt;#&lt;/a&gt; 日期和时间类型&lt;/h3&gt;
&lt;p&gt;表示时间值的日期和时间类型为 DATETIME、DATE、TIMESTAMP、TIME 和 YEAR。&lt;/p&gt;
&lt;p&gt;每个时间类型有一个有效值范围和一个 &amp;quot;零&amp;quot; 值，当指定不合法的 MySQL 不能表示的值时使用 &amp;quot;零&amp;quot; 值。&lt;/p&gt;
&lt;p&gt;TIMESTAMP 类型有专有的自动更新特性，将在后面描述。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;大小 (bytes)&lt;/th&gt;
&lt;th&gt;范围&lt;/th&gt;
&lt;th&gt;格式&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;DATE&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1000-01-01/9999-12-31&lt;/td&gt;
&lt;td&gt;YYYY-MM-DD&lt;/td&gt;
&lt;td&gt;日期值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TIME&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;‘-838:59:59’/‘838:59:59’&lt;/td&gt;
&lt;td&gt;HH:MM:SS&lt;/td&gt;
&lt;td&gt;时间值或持续时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;YEAR&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1901/2155&lt;/td&gt;
&lt;td&gt;YYYY&lt;/td&gt;
&lt;td&gt;年份值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DATETIME&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;‘1000-01-01 00:00:00’ 到 ‘9999-12-31 23:59:59’&lt;/td&gt;
&lt;td&gt;YYYY-MM-DD hh:mm:ss&lt;/td&gt;
&lt;td&gt;混合日期和时间值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TIMESTAMP&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;‘1970-01-01 00:00:01’ UTC 到 ‘2038-01-19 03:14:07’ UTC 结束时间是第 2147483647 秒，北京时间 2038-1-19 11:14:07，格林尼治时间 2038 年 1 月 19 日 凌晨 03:14:07&lt;/td&gt;
&lt;td&gt;YYYY-MM-DD hh:mm:ss&lt;/td&gt;
&lt;td&gt;混合日期和时间值，时间戳&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;字符串类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串类型&#34;&gt;#&lt;/a&gt; 字符串类型&lt;/h3&gt;
&lt;p&gt;字符串类型指 CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM 和 SET。该节描述了这些类型如何工作以及如何在查询中使用这些类型。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;大小 (bytes)&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CHAR&lt;/td&gt;
&lt;td&gt;0-255&lt;/td&gt;
&lt;td&gt;定长字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VARCHAR&lt;/td&gt;
&lt;td&gt;0-65535&lt;/td&gt;
&lt;td&gt;变长字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TINYBLOB&lt;/td&gt;
&lt;td&gt;0-255&lt;/td&gt;
&lt;td&gt;不超过 255 个字符的二进制字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TINYTEXT&lt;/td&gt;
&lt;td&gt;0-255&lt;/td&gt;
&lt;td&gt;短文本字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BLOB&lt;/td&gt;
&lt;td&gt;0-65 535&lt;/td&gt;
&lt;td&gt;二进制形式的长文本数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TEXT&lt;/td&gt;
&lt;td&gt;0-65 535&lt;/td&gt;
&lt;td&gt;长文本数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MEDIUMBLOB&lt;/td&gt;
&lt;td&gt;0-16 777 215&lt;/td&gt;
&lt;td&gt;二进制形式的中等长度文本数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MEDIUMTEXT&lt;/td&gt;
&lt;td&gt;0-16 777 215&lt;/td&gt;
&lt;td&gt;中等长度文本数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LONGBLOB&lt;/td&gt;
&lt;td&gt;0-4 294 967 295&lt;/td&gt;
&lt;td&gt;二进制形式的极大文本数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LONGTEXT&lt;/td&gt;
&lt;td&gt;0-4 294 967 295&lt;/td&gt;
&lt;td&gt;极大文本数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注意：char (n) 和 varchar (n) 中括号中 n 代表字符的个数，并不代表字节个数，比如 CHAR (30) 就可以存储 30 个字符。&lt;/p&gt;
&lt;p&gt;CHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。&lt;/p&gt;
&lt;p&gt;BINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。&lt;/p&gt;
&lt;p&gt;BLOB 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 BLOB 类型：TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。它们区别在于可容纳存储范围不同。&lt;/p&gt;
&lt;p&gt;有 4 种 TEXT 类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4 种 BLOB 类型，可存储的最大长度不同，可根据实际情况选择。&lt;/p&gt;
&lt;h3 id=&#34;枚举与集合类型enumeration-and-set-types&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#枚举与集合类型enumeration-and-set-types&#34;&gt;#&lt;/a&gt; 枚举与集合类型（Enumeration and Set Types）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ENUM: 枚举类型，用于存储单一值，可以选择一个预定义的集合。&lt;/li&gt;
&lt;li&gt;SET: 集合类型，用于存储多个值，可以选择多个预定义的集合。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;空间数据类型spatial-data-types&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#空间数据类型spatial-data-types&#34;&gt;#&lt;/a&gt; 空间数据类型（Spatial Data Types）&lt;/h3&gt;
&lt;p&gt;GEOMETRY, POINT, LINESTRING, POLYGON, MULTIPOINT, MULTILINESTRING, MULTIPOLYGON, GEOMETRYCOLLECTION:&lt;br&gt;
 用于存储空间数据（地理信息、几何图形等）。&lt;/p&gt;
&lt;h2 id=&#34;索引&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#索引&#34;&gt;#&lt;/a&gt; 索引&lt;/h2&gt;
&lt;p&gt;MySQL 中的索引是一种数据结构，它可以帮助数据库系统更快地检索数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从物理结构上可以分为聚集索引和非聚集索引两类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;聚簇索引指索引的键值的逻辑顺序与表中相应行的物理顺序一致，即每张表只能有一个聚簇索引，也就是我们常说的主键索引；
&lt;ul&gt;
&lt;li&gt;默认情况下，InnoDB 表的主键就是聚簇索引。&lt;/li&gt;
&lt;li&gt;如果没有显式定义主键，则 InnoDB 会自动创建一个隐藏的主键作为聚簇索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非聚簇索引的逻辑顺序则与数据行的物理顺序不一致。
&lt;ul&gt;
&lt;li&gt;非聚簇索引（也称为二级索引）只存储索引键值和指向实际数据行的指针。&lt;/li&gt;
&lt;li&gt;当通过非聚簇索引查找数据时，首先找到索引条目，然后通过指针访问实际的数据行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从应用上可以划分为一下几类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;普通索引：MySQL 中的基本索引类型，没有什么限制，允许在定义索引的列中插入重复值和空值，纯粹为了提高查询效率。通过 ALTER&lt;br&gt;
TABLE&lt;br&gt;
table_name ADD INDEX index_name (column) 创建；&lt;/li&gt;
&lt;li&gt;唯一索引：索引列中的值必须是唯一的，但是允许为空值。通过 ALTER TABLE table_name ADD UNIQUE index_name (column) 创建；&lt;/li&gt;
&lt;li&gt;主键索引：特殊的唯一索引，也成聚簇索引，不允许有空值，并由数据库帮我们自动创建；&lt;/li&gt;
&lt;li&gt;组合索引：组合表中多个字段创建的索引，遵守最左前缀匹配规则；&lt;/li&gt;
&lt;li&gt;全文索引：只有在 MyISAM 引擎上才能使用，同时只支持 CHAR、VARCHAR、TEXT 类型字段上使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hash-索引&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#hash-索引&#34;&gt;#&lt;/a&gt; Hash 索引&lt;/h3&gt;
&lt;p&gt;在 MySQL 中，哈希索引（Hash Index）是一种特殊的索引类型，主要用于快速查找数据。哈希索引利用哈希算法将索引键值映射到一个固定大小的哈希表中，从而实现快速定位数据。&lt;/p&gt;
&lt;p&gt;哈希索引的基本实现原理如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;哈希算法：
&lt;ul&gt;
&lt;li&gt;哈希算法将索引键值转换为一个固定长度的哈希值。&lt;/li&gt;
&lt;li&gt;这个哈希值被用作索引表中的索引项。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;哈希表：
&lt;ul&gt;
&lt;li&gt;哈希表是一个数组，每个数组元素对应一个哈希值。&lt;/li&gt;
&lt;li&gt;查找时，通过计算键值的哈希值可以直接定位到对应的数组元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;MySQL 中各引擎的的哈希索引实现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;InnoDB 存储引擎&lt;br&gt;
在 InnoDB 存储引擎中，哈希索引主要用于内部结构，例如辅助索引和临时表。InnoDB 并不支持用户级别的哈希索引。&lt;/li&gt;
&lt;li&gt;MyISAM 存储引擎&lt;br&gt;
 MyISAM 存储引擎支持用户级别的哈希索引，主要用于全表扫描和快速查找。&lt;/li&gt;
&lt;li&gt;MEMORY 存储引擎&lt;br&gt;
 MEMORY 存储引擎（以前称为 HEAP 存储引擎）支持哈希索引，主要用于临时表和内存中的数据存储。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;哈希索引的优点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快速查找：
&lt;ul&gt;
&lt;li&gt;哈希索引可以实现常数时间复杂度 O (1) 的查找，非常快。&lt;/li&gt;
&lt;li&gt;特别适用于简单的等值查询（例如 WHERE name = ‘Alice’）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内存效率：
&lt;ul&gt;
&lt;li&gt;哈希索引通常用于内存中的数据存储，适合临时表和小数据量的场景。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;哈希索引的缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不支持范围查询：哈希索引不支持范围查询（例如 WHERE name BETWEEN ‘A’ AND ‘Z’）。&lt;/li&gt;
&lt;li&gt;不支持排序：哈希索引无法用于排序操作，因为哈希值之间没有顺序关系。&lt;/li&gt;
&lt;li&gt;哈希冲突：哈希冲突可能导致性能下降，特别是在高并发场景下。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;btree索引&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#btree索引&#34;&gt;#&lt;/a&gt; B+Tree 索引&lt;/h3&gt;
&lt;p&gt;在 MySQL 中，B+Tree 索引是一种常用的索引类型，它被广泛地用于各种存储引擎，如 MyISAM、InnoDB 和 Memory。B+Tree&lt;br&gt;
 索引提供了高效的范围查询、前缀查询和排序功能。&lt;br&gt;
B+Tree 索引是在 B-Tree 基础上，通过引入指针来优化存储和检索数据。在介绍 B+Tree 索引之前，先介绍下 B-Tree 索引。&lt;/p&gt;
&lt;h4 id=&#34;b-tree索引&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#b-tree索引&#34;&gt;#&lt;/a&gt; B-Tree 索引&lt;/h4&gt;
&lt;p&gt;B-Tree 结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B-Tree（平衡二叉查找树）是一种自平衡的树形数据结构。&lt;/li&gt;
&lt;li&gt;每个节点最多包含 M 个子节点，其中 M 是一个固定的参数，称为阶数。&lt;/li&gt;
&lt;li&gt;每个节点包含 M-1 个键值和相应的指针。&lt;/li&gt;
&lt;/ul&gt;
&lt;img data-src=&#34;/joker.github.io/2024/10/09/%E3%80%90Mysql%E3%80%91Mysql%E8%AF%A6%E8%A7%A3/v2-9a8025fcd8ffdb921a6a124713fa0f7f_r.png&#34; class=&#34;&#34; title=&#34;v2-9a8025fcd8ffdb921a6a124713fa0f7f_r.png&#34;&gt;
&lt;p&gt;节点结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根节点：树的顶部节点。&lt;/li&gt;
&lt;li&gt;内部节点：包含多个键值和指针，用于指向子节点。&lt;/li&gt;
&lt;li&gt;叶子节点：包含实际的数据行或数据行的指针。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;键值顺序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B-Tree 中的键值是按顺序存储的，每个节点内的键值也是有序的。&lt;/li&gt;
&lt;li&gt;所有的叶子节点都位于同一层，并且通过双向链表连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;B-Tree 索引的特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高效查询：
&lt;ul&gt;
&lt;li&gt;B-Tree 索引支持范围查询、前缀查询和等值查询。&lt;/li&gt;
&lt;li&gt;查询时可以通过键值快速定位到相应的叶子节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自平衡：
&lt;ul&gt;
&lt;li&gt;B-Tree 在插入和删除操作时能够保持自平衡，确保树的高度较小，从而提高查询效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支持范围查询：
&lt;ul&gt;
&lt;li&gt;通过遍历叶子节点实现范围查询。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支持前缀查询：
&lt;ul&gt;
&lt;li&gt;通过遍历叶子节点实现前缀查询。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;btree-索引&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#btree-索引&#34;&gt;#&lt;/a&gt; B+Tree 索引&lt;/h4&gt;
&lt;p&gt;B+Tree 结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B+Tree 是一种改进的 B-Tree，特别适用于文件系统和数据库索引。&lt;/li&gt;
&lt;li&gt;每个节点最多包含 M 个子节点，其中 M 是一个固定的参数，称为阶数。&lt;/li&gt;
&lt;li&gt;所有数据行都存储在叶子节点中。&lt;/li&gt;
&lt;/ul&gt;
&lt;img data-src=&#34;/joker.github.io/2024/10/09/%E3%80%90Mysql%E3%80%91Mysql%E8%AF%A6%E8%A7%A3/v2-9a8025fcd8ffdb921a6a124713fa0f7f_r.png&#34; class=&#34;&#34; title=&#34;v2-9a8025fcd8ffdb921a6a124713fa0f7f_r.png&#34;&gt;
&lt;p&gt;节点结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根节点：树的顶部节点。&lt;/li&gt;
&lt;li&gt;内部节点：仅包含键值和指针，用于指向子节点。&lt;/li&gt;
&lt;li&gt;叶子节点：包含实际的数据行，并通过双向链表连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;键值顺序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B+Tree 中的键值是按顺序存储的，所有叶子节点位于同一层，并通过双向链表连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;B+Tree 索引的特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高效查询：
&lt;ul&gt;
&lt;li&gt;支持等值查询、范围查询和前缀查询。&lt;/li&gt;
&lt;li&gt;查询时可以通过键值快速定位到相应的叶子节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自平衡：
&lt;ul&gt;
&lt;li&gt;在插入和删除操作时能够保持自平衡，确保树的高度较小，从而提高查询效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支持范围查询：
&lt;ul&gt;
&lt;li&gt;通过遍历叶子节点实现范围查询，所有叶子节点通过双向链表连接，便于遍历。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支持前缀查询：
&lt;ul&gt;
&lt;li&gt;通过遍历叶子节点实现前缀查询。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支持排序：
&lt;ul&gt;
&lt;li&gt;所有数据行都存储在叶子节点中，通过双向链表连接，便于排序和遍历。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;btree索引和b-tree索引的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#btree索引和b-tree索引的区别&#34;&gt;#&lt;/a&gt; B+Tree 索引和 B-Tree 索引的区别&lt;/h4&gt;
&lt;p&gt;数据存储位置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B-Tree：数据可以存储在内部节点和叶子节点中。&lt;/li&gt;
&lt;li&gt;B+Tree：所有数据只存储在叶子节点中，内部节点只包含键值和指针。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查询性能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B-Tree：查询可能需要访问多个层级的节点，直到找到叶子节点。&lt;/li&gt;
&lt;li&gt;B+Tree：查询总是需要访问到叶子节点，但叶子节点通过双向链表连接，便于遍历。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;范围查询：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;B-Tree：范围查询需要遍历多个层级的节点，直到找到所有符合条件的叶子节点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;B+Tree：范围查询只需要遍历叶子节点即可，因为所有叶子节点通过双向链表连接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据冗余：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B-Tree：数据存储在内部节点和叶子节点中，可能存在数据冗余。&lt;/li&gt;
&lt;li&gt;B+Tree：数据只存储在叶子节点中，避免了数据冗余。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;磁盘访问优化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B-Tree：每次查询可能需要多次磁盘访问。&lt;/li&gt;
&lt;li&gt;B+Tree：查询总是需要访问到叶子节点，但叶子节点通过双向链表连接，减少了磁盘访问次数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;为什么要使用btree索引&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#为什么要使用btree索引&#34;&gt;#&lt;/a&gt; 为什么要使用 B+Tree 索引？&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;数据存储在叶子节点&lt;/p&gt;
&lt;p&gt;在 B+Tree 中，所有数据行都存储在叶子节点中，而内部节点只包含键值和指针。这种结构有以下几个优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;减少磁盘 I/O 次数：在磁盘访问中，每次读取或写入一个块都需要一次 I/O 操作。由于所有数据都存储在叶子节点中，查询时只需要访问叶子节点，减少了磁盘&lt;br&gt;
 I/O 次数。&lt;/li&gt;
&lt;li&gt;数据一致性：所有数据存储在叶子节点中，避免了数据冗余，确保数据的一致性和完整性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高效的范围查询&lt;/p&gt;
&lt;p&gt;B+Tree 的叶子节点通过双向链表连接，这使得范围查询更加高效：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;范围查询：当执行范围查询（如 WHERE id BETWEEN 10 AND 20）时，只需要遍历叶子节点即可。由于叶子节点通过双向链表连接，可以快速遍历整个范围。&lt;/li&gt;
&lt;li&gt;排序查询：当执行排序查询（如 ORDER BY id ASC）时，同样可以通过遍历叶子节点来实现排序。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自平衡性&lt;/p&gt;
&lt;p&gt;B+Tree 具有自平衡性，能够在插入和删除操作时保持树的高度较小，从而提高查询效率：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自平衡：在插入或删除操作时，B+Tree 会自动调整节点，确保树的高度保持较小，从而提高查询效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更好的磁盘访问优化&lt;/p&gt;
&lt;p&gt;B+Tree 在磁盘访问方面具有更好的优化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;减少磁盘 I/O：由于所有数据都存储在叶子节点中，查询时只需要访问叶子节点，减少了磁盘 I/O 次数。&lt;/li&gt;
&lt;li&gt;高效的数据块利用：B+Tree 的节点可以容纳更多的键值和指针，提高了数据块的利用率，减少了磁盘空间浪费。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持联合索引&lt;/p&gt;
&lt;p&gt;B+Tree 支持联合索引（复合索引），可以同时使用多个字段进行索引：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;联合索引：例如，可以创建一个联合索引 (col1, col2)，在查询时可以使用这两个字段进行快速定位。&lt;/li&gt;
&lt;li&gt;多列排序：联合索引还可以用于多列排序，提高排序查询的效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更好的并发控制&lt;/p&gt;
&lt;p&gt;B+Tree 在并发控制方面也表现出色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;锁定机制：在并发操作中，B+Tree 可以通过锁定机制来保证数据的一致性和完整性。&lt;/li&gt;
&lt;li&gt;事务处理：B+Tree 在事务处理中能够更好地支持并发操作，提高事务处理的效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更好的扩展性&lt;/p&gt;
&lt;p&gt;B+Tree 在扩展性方面具有优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;易于扩展：由于所有数据都存储在叶子节点中，B+Tree 在扩展时更容易进行数据分布和分区。&lt;/li&gt;
&lt;li&gt;分布式系统：在分布式数据库系统中，B+Tree 更容易实现数据的水平分割和分布。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内存和缓存友好&lt;/p&gt;
&lt;p&gt;B+Tree 的结构更适合内存和缓存：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存利用：B+Tree 的内部节点只包含键值和指针，占用较少的内存空间，适合内存缓存。&lt;/li&gt;
&lt;li&gt;缓存命中率：由于所有数据都在叶子节点中，缓存命中率更高，减少了从磁盘读取数据的次数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;btree-索引的自平衡&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#btree-索引的自平衡&#34;&gt;#&lt;/a&gt; B+Tree 索引的自平衡&lt;/h4&gt;
&lt;p&gt;B+Tree 的自平衡主要通过以下几种方式实现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;节点分裂&lt;/p&gt;
&lt;p&gt;当向 B+Tree 中插入一个新的键值时，如果当前节点已满，则需要将该节点分裂成两个节点。节点分裂的具体步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确定分裂点：
&lt;ul&gt;
&lt;li&gt;如果当前节点已满（即包含 M-1 个键值），则需要将其分裂成两个节点。&lt;/li&gt;
&lt;li&gt;将中间的键值作为新的中间节点的键值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;创建新节点：
&lt;ul&gt;
&lt;li&gt;创建一个新的节点，将原节点的一部分键值移动到新节点中。&lt;/li&gt;
&lt;li&gt;新节点包含大约一半的键值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;更新父节点：
&lt;ul&gt;
&lt;li&gt;在父节点中插入一个新的键值，指向新创建的节点。&lt;/li&gt;
&lt;li&gt;如果父节点已满，则继续向上分裂。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;p&gt;假设 B+Tree 的阶数为 M=3，每个节点最多包含 2 个键值。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始状态： &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;插入键值 4：
&lt;ol&gt;
&lt;li&gt;当前节点已满，需要分裂。&lt;/li&gt;
&lt;li&gt;将中间的键值 2 提升到父节点，创建两个新节点 [1] 和 [3, 4]。&lt;/li&gt;
&lt;li&gt;更新父节点：&lt;/li&gt;
&lt;/ol&gt;
 &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; [&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; / \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] [&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;插入键值 5：
&lt;ol&gt;
&lt;li&gt;当前节点已满，需要分裂。&lt;/li&gt;
&lt;li&gt;将中间的键值 4 提升到父节点，创建两个新节点 [3] 和 [5]。&lt;/li&gt;
&lt;li&gt;更新父节点：&lt;/li&gt;
&lt;/ol&gt;
 &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;  [&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  / \ / \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] [&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;] [&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;节点合并&lt;/p&gt;
&lt;p&gt;当从 B+Tree 中删除一个键值时，如果某个节点的键值数量少于最小键值数量（即小于 M/2），则需要进行节点合并。节点合并的具体步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确定合并条件：
&lt;ul&gt;
&lt;li&gt;如果当前节点的键值数量少于 M/2，则需要与相邻的兄弟节点合并。&lt;/li&gt;
&lt;li&gt;选择一个相邻的兄弟节点，将其中一个键值移动到当前节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;合并节点：
&lt;ul&gt;
&lt;li&gt;将相邻节点的一个键值移动到当前节点，使当前节点的键值数量达到 M/2。&lt;/li&gt;
&lt;li&gt;更新父节点中的键值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;更新父节点：
&lt;ul&gt;
&lt;li&gt;如果父节点的键值数量少于 M/2，则继续向上合并。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;p&gt;假设 B+Tree 的阶数为 M=3，每个节点最多包含 2 个键值。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始状态：&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;  [&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  / \ / \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] [&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;] [&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;删除键值 4：
&lt;ol&gt;
&lt;li&gt;删除键值 4 后，节点 [3] 的键值数量少于 M/2，需要与相邻节点合并。&lt;/li&gt;
&lt;li&gt;将 [2] 和 [3] 合并，更新父节点：&lt;/li&gt;
&lt;/ol&gt;
 &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;  [&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  / \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] [&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;什么情况下无法使用索引&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么情况下无法使用索引&#34;&gt;#&lt;/a&gt; 什么情况下无法使用索引&lt;/h3&gt;
&lt;p&gt;在 MySQL 中，索引可以显著提高查询性能，但并不是所有的查询都能有效地利用索引。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 LIKE 操作符时
&lt;ul&gt;
&lt;li&gt;情况描述：当 LIKE 操作符的模式以通配符（如 %）开头时，索引通常无法被有效利用。例如，SELECT * FROM table WHERE column&lt;br&gt;
LIKE ‘%abc%’。&lt;/li&gt;
&lt;li&gt;原因：索引通常是按照键值顺序存储的，而以通配符开头的模式会导致 MySQL 无法直接定位到特定的位置，因此需要进行全表扫描。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用函数或表达式
&lt;ul&gt;
&lt;li&gt;情况描述：当查询条件中包含函数或表达式时，索引通常无法被利用。例如，SELECT * FROM table WHERE UPPER (column) = ‘ABC’ 或&lt;br&gt;
 SELECT * FROM table WHERE column + 1 = 5。&lt;/li&gt;
&lt;li&gt;原因：函数或表达式改变了索引键值的形式，导致索引无法直接匹配。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 OR 连接多个条件
&lt;ul&gt;
&lt;li&gt;情况描述：当查询条件中包含多个 OR 逻辑时，索引可能无法被有效利用。例如，SELECT * FROM table WHERE column1 = ‘A’ OR&lt;br&gt;
column2 = ‘B’。&lt;/li&gt;
&lt;li&gt;原因：多个 OR 条件可能导致 MySQL 需要扫描多个索引或进行全表扫描。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 NOT IN 或 NOT EXISTS
&lt;ul&gt;
&lt;li&gt;情况描述：当查询条件中包含 NOT IN 或 NOT EXISTS 时，索引可能无法被有效利用。例如，SELECT * FROM table WHERE column NOT&lt;br&gt;
IN (‘A’, ‘B’, ‘C’) 或 SELECT * FROM table WHERE NOT EXISTS (SELECT 1&lt;br&gt;
FROM other_table WHERE other_table.id = &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3RhYmxlLmlk&#34;&gt;table.id&lt;/span&gt;)。&lt;/li&gt;
&lt;li&gt;原因：NOT IN 和 NOT EXISTS 可能导致 MySQL 需要进行多次查找或全表扫描。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 IS NULL 或 IS NOT NULL
&lt;ul&gt;
&lt;li&gt;情况描述：当查询条件中包含 IS NULL 或 IS NOT NULL 时，索引可能无法被有效利用。例如，SELECT * FROM table WHERE column&lt;br&gt;
IS NULL 或 SELECT * FROM table WHERE column IS NOT NULL。&lt;/li&gt;
&lt;li&gt;原因：索引通常不包含 NULL 值，因此在这种情况下索引无法直接定位到特定的位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 IN 语句且参数较多
&lt;ul&gt;
&lt;li&gt;情况描述：当查询条件中包含 IN 语句且参数较多时，索引可能无法被有效利用。例如，SELECT * FROM table WHERE column IN (’&lt;br&gt;
A’, ‘B’, ‘C’, …, ‘Z’)。&lt;/li&gt;
&lt;li&gt;原因：大量的 IN 参数可能导致 MySQL 需要进行多次查找或全表扫描。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 ORDER BY 或 GROUP BY 未覆盖索引
&lt;ul&gt;
&lt;li&gt;情况描述：当查询条件中包含 ORDER BY 或 GROUP BY 但未覆盖索引时，索引可能无法被有效利用。例如，SELECT * FROM table&lt;br&gt;
ORDER BY column1, column2。&lt;/li&gt;
&lt;li&gt;原因：如果索引没有包含所有排序或分组的列，MySQL 可能需要额外的排序操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 LIMIT 但未指定排序
&lt;ul&gt;
&lt;li&gt;情况描述：当查询条件中包含 LIMIT 但未指定排序时，索引可能无法被有效利用。例如，SELECT * FROM table LIMIT 10。&lt;/li&gt;
&lt;li&gt;原因：如果没有指定排序，MySQL 可能需要全表扫描来获取前几条记录。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 JOIN 但未指定合适的索引
&lt;ul&gt;
&lt;li&gt;情况描述：当查询条件中包含 JOIN 但未指定合适的索引时，索引可能无法被有效利用。例如，SELECT * FROM table1 JOIN table2&lt;br&gt;
ON &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3RhYmxlMS5pZA==&#34;&gt;table1.id&lt;/span&gt; = &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3RhYmxlMi5pZA==&#34;&gt;table2.id&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;原因：如果没有合适的索引，MySQL 可能需要进行全表扫描或多次查找。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 BETWEEN 但未覆盖索引
&lt;ul&gt;
&lt;li&gt;情况描述：当查询条件中包含 BETWEEN 但未覆盖索引时，索引可能无法被有效利用。例如，SELECT * FROM table WHERE column&lt;br&gt;
BETWEEN ‘A’ AND ‘Z’。&lt;/li&gt;
&lt;li&gt;原因：如果索引没有包含所有查询条件的列，MySQL 可能需要额外的查找操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;最左匹配原则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最左匹配原则&#34;&gt;#&lt;/a&gt; 最左匹配原则&lt;/h3&gt;
&lt;p&gt;最左匹配原则是指在复合索引中，查询条件必须从索引的最左边开始匹配，才能有效地利用索引。具体来说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;复合索引：由多个列组成的索引。&lt;/li&gt;
&lt;li&gt;最左匹配：查询条件必须从索引的第一个列开始，依次向右匹配。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例说明&lt;/p&gt;
&lt;p&gt;假设有一个复合索引 (col1, col2, col3)，那么查询条件必须从 col1 开始，然后依次向右匹配 col2 和 col3。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;有效的查询条件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SELECT * FROM table WHERE col1 = ‘value1’&lt;/li&gt;
&lt;li&gt;SELECT * FROM table WHERE col1 = ‘value1’ AND col2 = ‘value2’&lt;/li&gt;
&lt;li&gt;SELECT * FROM table WHERE col2 = ‘value2’ AND col1 = ‘value1’&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些查询条件都能够有效地利用索引 (col1, col2, col3)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无效的查询条件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SELECT * FROM table WHERE col2 = ‘value2’&lt;/li&gt;
&lt;li&gt;SELECT * FROM table WHERE col2 = ‘value2’ AND col3 = ‘value3’&lt;/li&gt;
&lt;li&gt;SELECT * FROM table WHERE col3 = ‘value3’&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些查询条件无法有效地利用索引 (col1, col2, col3)，因为它们没有从索引的最左边开始匹配。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最左匹配原则的例外情况&lt;/p&gt;
&lt;p&gt;尽管最左匹配原则是一个基本规则，但在某些情况下，MySQL 仍可以部分地利用索引：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 OR 但条件相同&lt;br&gt;
有效示例： &lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;table&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;WHERE&lt;/span&gt; col1 &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;value1&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;OR&lt;/span&gt; col1 &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;value2&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
这种查询条件虽然使用了 OR，但条件相同，可以从索引的最左边开始匹配，可以有效地利用索引 (col1, col2, col3)。&lt;/li&gt;
&lt;li&gt;使用 IN 语句&lt;br&gt;
有效示例： &lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;table&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;WHERE&lt;/span&gt; col1 &lt;span class=&#34;keyword&#34;&gt;IN&lt;/span&gt; (&lt;span class=&#34;string&#34;&gt;&amp;#x27;value1&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;value2&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
这种查询条件虽然使用了 IN 语句，但可以从索引的最左边开始匹配，可以有效地利用索引 (col1, col2, col3)。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最左匹配原则的优化建议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;合理设计索引：根据查询需求设计合理的复合索引，确保查询条件能够从索引的最左边开始匹配。&lt;/li&gt;
&lt;li&gt;避免使用函数或表达式：查询条件中尽量避免使用函数或表达式，因为它们可能会导致索引失效。&lt;/li&gt;
&lt;li&gt;使用 EXPLAIN 查看执行计划：使用 EXPLAIN 命令查看查询的执行计划，检查是否有效地利用了索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;事务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务&#34;&gt;#&lt;/a&gt; 事务&lt;/h2&gt;
&lt;p&gt;事务可以理解为一组相关操作的集合，这些操作作为一个整体执行。事务的主要目的是确保数据的一致性和完整性，即使在出现故障的情况下也能保证数据的正确性。&lt;/p&gt;
&lt;p&gt;事务通常具备四个主要特性，称为 ACID 特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原子性（Atomicity）：事务中的所有操作要么全部成功，要么全部失败。如果事务中的任何一部分失败，则整个事务都会回滚，恢复到事务开始之前的状态。&lt;/li&gt;
&lt;li&gt;一致性（Consistency）：事务执行后，数据库必须处于一致性的状态。这意味着事务执行前后，数据库的状态必须满足预定的约束和业务规则。&lt;/li&gt;
&lt;li&gt;隔离性（Isolation）：事务之间相互独立，一个事务的操作不会影响其他事务的结果。每个事务看起来像是在单独的系统中执行一样。&lt;/li&gt;
&lt;li&gt;持久性（Durability）：一旦事务提交（commit），其结果就会永久保存在数据库中，即使系统发生故障也不会丢失。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;事务通常包括以下基本操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开始事务（BEGIN TRANSACTION）：开始一个新的事务，标记事务的起点。&lt;/li&gt;
&lt;li&gt;提交事务（COMMIT）：提交事务，将事务中的所有更改永久保存到数据库中。&lt;/li&gt;
&lt;li&gt;回滚事务（ROLLBACK）：回滚事务，撤销事务中的所有更改，恢复到事务开始之前的状态。&lt;/li&gt;
&lt;li&gt;保存点（SAVEPOINT）：在事务中设置一个保存点，可以在后续操作中回滚到这个保存点。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;并发事务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#并发事务&#34;&gt;#&lt;/a&gt; 并发事务&lt;/h3&gt;
&lt;p&gt;并发事务是指多个事务同时对同一个数据进行操作，可能导致数据不一致的情况。&lt;br&gt;
以下是一些常见的并发事务问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;脏读：一个事务读取到另一个事务尚未提交的数据。 事务 A 读取事务 B 更新的数据，然后 B 回滚操作，那么 A 读取到的数据是脏数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不可重复读：一个事务中两次读取的数据的内容不一致。 事务 A 多次读取同一数据，事务 B 在事务 A 多次读取的过程中，对数据作了更新并提交，导致事务&lt;br&gt;
 A 多次读取同一数据时，结果 不一致。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;幻读：一个事务中两次读取的数据量不一致。 系统管理员 A 将数据库中所有学生的成绩从具体分数改为 ABCDE 等级，但是系统管理员 B&lt;br&gt;
 就在这个时候插入了一条具体分数的记录，当系统管理员 A 改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。 解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表。&lt;/p&gt;
&lt;p&gt;如何解决并发事务问题？&lt;/p&gt;
&lt;p&gt;MySQL 事务的隔离级别定义了事务之间相互隔离的程度，不同的隔离级别有不同的效果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读未提交（Read Uncommitted）：
&lt;ul&gt;
&lt;li&gt;最低的隔离级别，允许事务读取未提交的数据。&lt;/li&gt;
&lt;li&gt;容易产生脏读、不可重复读和幻读。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;读已提交（Read Committed）：
&lt;ul&gt;
&lt;li&gt;允许事务读取已提交的数据。&lt;/li&gt;
&lt;li&gt;防止脏读，但仍然可能出现不可重复读和幻读。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可重复读（Repeatable Read）：
&lt;ul&gt;
&lt;li&gt;事务在整个执行期间读取的数据始终不变。&lt;/li&gt;
&lt;li&gt;防止脏读和不可重复读，但仍然可能出现幻读。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;序列化（Serializable）：
&lt;ul&gt;
&lt;li&gt;最高的隔离级别，完全隔离事务，防止所有并发问题。&lt;/li&gt;
&lt;li&gt;可能导致性能下降，但确保了最高的数据一致性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不同的隔离级别对性能和数据准确性的影响均不相同，需要根据具体的业务场景来做出取舍。顺带一提，在 MySQL&lt;br&gt;
 中，默认的事务隔离级别是可重复读（Repeatable Read）。&lt;/p&gt;
&lt;h2 id=&#34;锁&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#锁&#34;&gt;#&lt;/a&gt; 锁&lt;/h2&gt;
&lt;p&gt;MySQL 中的锁机制是数据库管理系统中非常重要的一部分，用于确保并发操作的一致性和数据的完整性。锁机制可以防止多个事务同时修改同一份数据，从而避免数据冲突和不一致的问题。&lt;/p&gt;
&lt;h3 id=&#34;mysql-中的锁类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mysql-中的锁类型&#34;&gt;#&lt;/a&gt; MySQL 中的锁类型&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;表级锁（Table-Level Locks）&lt;/p&gt;
&lt;p&gt;表级锁是最粗粒度的锁，对整个表进行锁定。这种锁简单且易于实现，但在高并发环境下性能较差。&lt;/p&gt;
&lt;p&gt;类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读锁（READ LOCK）：
&lt;ul&gt;
&lt;li&gt;只允许读取数据，不允许写入数据。&lt;/li&gt;
&lt;li&gt;多个读锁可以同时存在。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;写锁（WRITE LOCK）：
&lt;ul&gt;
&lt;li&gt;独占锁，不允许读取和写入数据。&lt;/li&gt;
&lt;li&gt;只有一个写锁可以存在。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;备份和恢复：在备份或恢复数据时，可以使用表级锁确保数据的一致性。&lt;/li&gt;
&lt;li&gt;低并发环境：在并发较低的环境中，可以使用表级锁简化锁管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;行级锁（Row-Level Locks）&lt;/p&gt;
&lt;p&gt;行级锁是对表中的单个行进行锁定，粒度较细，适用于高并发环境。&lt;/p&gt;
&lt;p&gt;存储引擎支持&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;InnoDB：支持行级锁，广泛应用于高并发环境。&lt;/li&gt;
&lt;li&gt;MyISAM：不支持行级锁，只支持表级锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;共享锁（Shared Lock，S 锁）：
&lt;ul&gt;
&lt;li&gt;多个事务可以同时读取同一行数据。&lt;/li&gt;
&lt;li&gt;读取操作可以并行执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;排他锁（Exclusive Lock，X 锁）：
&lt;ul&gt;
&lt;li&gt;排他锁独占，不允许其他事务读取或写入同一行数据。&lt;/li&gt;
&lt;li&gt;写入操作独占执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;并发读写：在高并发环境中，行级锁可以允许多个事务同时读取数据，提高并发性能。&lt;/li&gt;
&lt;li&gt;事务处理：在事务处理中，行级锁可以确保数据的一致性和完整性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;页面级锁（Page-Level Locks）&lt;/p&gt;
&lt;p&gt;页面级锁是对表中的一页数据进行锁定，粒度介于表级锁和行级锁之间。&lt;/p&gt;
&lt;p&gt;存储引擎支持&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BDB（Berkeley DB）：支持页面级锁。&lt;/li&gt;
&lt;li&gt;InnoDB：支持页面级锁，但在实际应用中更常用的是行级锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中等并发环境：在中等并发环境中，页面级锁可以提高并发性能，减少锁的竞争。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;意向锁（Intention Locks）&lt;/p&gt;
&lt;p&gt;意向锁是一种辅助锁，用于指示事务打算对数据进行的操作类型。&lt;/p&gt;
&lt;p&gt;类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;意向共享锁（Intention Shared Lock，IS 锁）：
&lt;ul&gt;
&lt;li&gt;表示事务打算获取某一行的共享锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;意向排他锁（Intention Exclusive Lock，IX 锁）：
&lt;ul&gt;
&lt;li&gt;表示事务打算获取某一行的排他锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事务管理：在事务管理中，意向锁帮助数据库管理系统预测事务的操作类型，提前准备相应的锁资源。&lt;br&gt;
.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;mysql-中的锁机制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mysql-中的锁机制&#34;&gt;#&lt;/a&gt; MySQL 中的锁机制&lt;/h3&gt;
&lt;p&gt;InnoDB 存储引擎广泛应用于 MySQL 中，其支持多种锁机制。&lt;br&gt;
锁与事务隔离级别的关系如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读未提交（Read Uncommitted）：不使用任何锁。&lt;/li&gt;
&lt;li&gt;读已提交（Read Committed）：使用行级锁，读取时不加锁。&lt;/li&gt;
&lt;li&gt;可重复读（Repeatable Read）：使用行级锁，读取时加锁。&lt;/li&gt;
&lt;li&gt;序列化（Serializable）：使用行级锁，读取时加锁，确保最高隔离级别。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;间隙锁（Gap Locks）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义：间隙锁锁定行之间的 “间隙”，防止插入新的行。&lt;/li&gt;
&lt;li&gt;应用场景：在可重复读隔离级别下，InnoDB 使用间隙锁防止插入新的行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mvcc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mvcc&#34;&gt;#&lt;/a&gt; MVCC&lt;/h3&gt;
&lt;p&gt;Mysql 的多版本并发控制（Multiversion Concurrency Control，简称 MVCC）主要用于实现读取操作与写入操作之间的并发执行。&lt;br&gt;
尤其是在 InnoDB 存储引擎中，它通过维护数据的多个版本来支持高并发读写操作。以下是关于 MVCV 的一些关键点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;非锁定读取：在大多数情况下，MVCC 允许读取操作不加锁地进行，这意味着读取操作不会阻塞写入操作，反之亦然。这极大地提高了数据库的并发性能。&lt;/li&gt;
&lt;li&gt;快照读与当前读：
&lt;ul&gt;
&lt;li&gt;快照读（Snapshot Read）：默认情况下，读取操作获取的是事务开始时刻的数据版本，而不是最新的数据版本。这种方式避免了读取过程中可能发生的脏读、不可重复读等问题。&lt;/li&gt;
&lt;li&gt;当前读（Current Read）：当使用某些特定类型的查询（如带有 FOR UPDATE 或 LOCK IN SHARE MODE 提示的查询）时，会读取到最新的数据版本，并且可能会导致等待写锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;版本号机制：为了实现多版本并发控制，每个记录都有两个隐藏的字段：DB_TRX_ID 和 DB_ROLL_PTR。DB_TRX_ID 记录了最后修改这条记录的事务 ID，而 DB_ROLL_PTR 则指向了该记录的回滚段，其中保存着旧版本的数据。&lt;/li&gt;
&lt;li&gt;可见性规则：事务如何看到数据取决于一些简单的规则，这些规则基于事务的开始时间以及行上的版本标识来决定。具体来说，只有满足以下条件之一的行对当前事务才是可见的：
&lt;ul&gt;
&lt;li&gt;行的创建事务 ID 小于当前事务 ID（即行是在当前事务开始之前创建的）。&lt;/li&gt;
&lt;li&gt;行的创建事务 ID 等于当前事务 ID 并且行已被标记为已删除。&lt;/li&gt;
&lt;li&gt;行的删除事务 ID 大于当前事务 ID（即行是在当前事务开始之后被删除的）。&lt;/li&gt;
&lt;li&gt;行尚未被标记为已删除。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;事务隔离级别：MVCC 的行为还受到事务隔离级别的影响。不同的隔离级别决定了事务之间如何交互以及如何处理数据版本。例如，在可重复读（Repeatable&lt;br&gt;
read）隔离级别下，InnoDB 会对读取的数据创建一个快照，并在整个事务期间都使用这个快照。&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="后端" />
        <category term="数据库" />
        <category term="关系型数据库" />
        <category term="Mysql" />
        <updated>2024-10-09T01:58:28.000Z</updated>
    </entry>
    <entry>
        <id>https://silvercrow42.github.io/joker.github.io/2024/09/25/%E3%80%90Linux%E3%80%91Linux%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</id>
        <title>【Linux】Linux命令详解</title>
        <link rel="alternate" href="https://silvercrow42.github.io/joker.github.io/2024/09/25/%E3%80%90Linux%E3%80%91Linux%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
        <content type="html">&lt;h2 id=&#34;设计理念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#设计理念&#34;&gt;#&lt;/a&gt; 设计理念&lt;/h2&gt;
&lt;h3 id=&#34;什么是linux&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是linux&#34;&gt;#&lt;/a&gt; 什么是 Linux&lt;/h3&gt;
&lt;p&gt;Linux 是一种基于 Unix 的开源操作系统，其内核由 Linus Torvalds 在 1991 年创建。&lt;br&gt;
Linux 操作系统以其稳定性和安全性著称，并且由于它是开源的，任何人都可以查看和修改其源代码，这使得 Linux 成为了一个非常灵活且可定制的操作系统。&lt;br&gt;
Linux 可以运行在从嵌入式设备到超级计算机的各种硬件平台上，并且支持多用户、多任务、多线程和多 CPU。&lt;/p&gt;
&lt;p&gt;Linux 发行版指的是基于 Linux 内核构建的完整操作系统，它们通常包括了图形用户界面（GUI）、实用工具、文档以及安装程序等。&lt;br&gt;
不同的发行版可能有不同的目标用户群、默认的应用程序集、系统配置工具以及软件包管理系统等。以下是一些常见的 Linux 发行版：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu - 这是一个非常流行的面向桌面用户的发行版，也是许多服务器的选择。Ubuntu 强调易用性和社区支持，并且拥有一个庞大的软件仓库，用户可以通过&lt;br&gt;
 APT (Advanced Package Tool) 轻松地安装软件。&lt;/li&gt;
&lt;li&gt;Red Hat Enterprise Linux (RHEL) - 这是一个商业化的发行版，主要用于企业环境中的服务器。RHEL 提供了长期的支持和服务，确保了企业的稳定运行。&lt;/li&gt;
&lt;li&gt;Fedora - Fedora 是 Red Hat 的社区版本，它经常作为新技术的试验场，为 RHEL 提供技术基础。Fedora 更新频繁，适合喜欢尝试新技术的用户。&lt;/li&gt;
&lt;li&gt;CentOS - 这是一个基于 RHEL 构建的免费发行版，旨在尽可能地兼容 RHEL。CentOS 通常用于那些希望使用类似 RHEL&lt;br&gt;
 的稳定系统但又不想支付许可费用的场景。&lt;/li&gt;
&lt;li&gt;openSUSE - 这是一个德国的发行版，在欧洲尤其受欢迎。openSUSE 提供了一个稳定的平台，支持多种桌面环境，并且有一个强大的软件管理工具&lt;br&gt;
 YaST。&lt;/li&gt;
&lt;li&gt;Arch Linux - Arch Linux 以其滚动发布模式和高度可定制性而闻名，适合高级用户和那些希望从头开始构建自己系统的用户。&lt;/li&gt;
&lt;li&gt;Debian - Debian 是一个社区驱动的项目，致力于创造一个自由的操作系统。Debian 以其稳定性著称，并且是许多其他发行版的基础。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;什么叫一切皆文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么叫一切皆文件&#34;&gt;#&lt;/a&gt; 什么叫一切皆文件&lt;/h3&gt;
&lt;p&gt;在 Linux 系统中，“一切皆文件” 是一种设计理念，它来源于 Unix&lt;br&gt;
 的设计哲学。这一理念的核心思想是将系统中的各种资源抽象成文件的形式，从而简化了对这些资源的操作。具体来说，这意味着无论是普通的文件、目录、硬件设备（如键盘、显示器、硬盘等）、网络连接还是进程间通信机制（如管道、套接字等），在&lt;br&gt;
 Linux 中都可以通过文件接口来访问和控制。&lt;br&gt;
以下是 Linux 中一些被视为 “文件” 的资源的例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;普通文件 - 包含数据的文件，如文本文件、图片文件等。&lt;/li&gt;
&lt;li&gt;目录 - 在 Linux 中，目录也是一种特殊的文件，它包含的是指向其他文件或目录的索引节点。&lt;/li&gt;
&lt;li&gt;符号链接 - 又称为软链接，相当于 Windows 中的快捷方式，指向另一个文件的引用。&lt;/li&gt;
&lt;li&gt;硬链接 - 指向文件 inode（文件索引节点）的多个文件名，允许一个文件有多个路径名。&lt;/li&gt;
&lt;li&gt;设备文件 - 分为块设备文件（如硬盘、光驱）和字符设备文件（如串口、声卡），它们代表了物理设备，可以通过读写这些文件来与硬件交互。&lt;/li&gt;
&lt;li&gt;管道 - 一种进程间通信的方式，可以视为一种特殊的文件，用来在进程之间传递数据。&lt;/li&gt;
&lt;li&gt;套接字（Socket） - 用于网络通信或者本地进程间通信的一种机制，也可以通过文件系统来访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种 “一切皆文件” 的设计理念带来的好处是统一了对不同资源的操作方式，开发者只需要掌握一套 API 和工具就可以操作几乎所有的系统资源。&lt;br&gt;
例如，打开一个硬件设备的操作和打开一个普通文件的操作在接口上是类似的，都是通过 open (), read (), write (), close ()&lt;br&gt;
 这样的系统调用来完成。&lt;/p&gt;
&lt;p&gt;然而，这种设计也有一定的复杂性，特别是对于初学者来说，理解各种 “文件” 的概念和用途可能需要一定的时间。此外，使用任何硬件设备都需要将其挂载到文件系统的某个位置，否则无法访问。这种挂载机制确保了文件系统的灵活性和扩展性。&lt;/p&gt;
&lt;h2 id=&#34;基础知识&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基础知识&#34;&gt;#&lt;/a&gt; 基础知识&lt;/h2&gt;
&lt;h3 id=&#34;linux-文件结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#linux-文件结构&#34;&gt;#&lt;/a&gt; Linux 文件结构&lt;/h3&gt;
&lt;p&gt;Linux 文件系统采用了一种倒置的树形结构，所有的文件和目录都从唯一的根目录 / 开始。这种结构使得文件组织变得非常清晰，并且易于理解和维护。&lt;br&gt;
以下是 Linux 文件系统中一些主要目录的作用和内容概述：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/ (根目录)&lt;/code&gt;  - 所有其他文件和目录的起点。通常不直接存放文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/bin&lt;/code&gt;  - 存放必要的用户二进制文件（可执行文件），这些文件对于系统的启动和运行至关重要，任何用户都可以执行这些二进制文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/boot&lt;/code&gt;  - 存放启动系统所需的文件，如内核映像文件、引导加载程序等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/dev&lt;/code&gt;  - 存放设备文件，即代表硬件设备的特殊文件，如硬盘、键盘、鼠标等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc&lt;/code&gt;  - 存放系统配置文件的地方，大部分配置文件都是文本文件，可以被编辑以调整系统行为。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/home&lt;/code&gt;  - 存放普通用户的主目录，每个用户都有自己的目录，用于存储个人文件和设置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/lib&lt;/code&gt;  - 存放系统启动和执行 /bin 和 /sbin 目录下的命令所需要的共享库文件。通常包含 32 位和 64 位的库文件，具体取决于系统配置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/lib64&lt;/code&gt;  - 专门存放 64 位的库文件，特别是在 64 位的 Linux 系统中。 仅包含 64 位的库文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/lost+found&lt;/code&gt;  - 通常出现在文件系统挂载点，用于存放 fsck（文件系统检查工具）在修复文件系统时发现的丢失文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/media&lt;/code&gt;  - 用于挂载可移动媒体，如 USB 闪存盘、CD/DVD 驱动器等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/mnt&lt;/code&gt;  - 用于挂载外部设备或文件系统，如 USB 驱动器、CD-ROM 等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/opt&lt;/code&gt;  - 用于存放可选的第三方应用程序，这些应用程序通常是由厂商提供的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/proc&lt;/code&gt;  - 一个虚拟文件系统，用于提供关于当前运行的进程的信息，以及系统内核的状态。这个目录的内容是由内核动态生成的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/sbin&lt;/code&gt;  - 存放系统管理员使用的二进制文件，这些文件通常是只有 root 用户才有权限执行的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/sys&lt;/code&gt;  - 类似于 /proc，但用于提供内核对象（如设备驱动程序）的接口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/tmp&lt;/code&gt;  - 用于存放临时文件，这些文件通常在系统重启之后会被清除。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/usr&lt;/code&gt;  - 用于存放用户程序和数据，包括应用程序的二进制文件、帮助文件、文档等。/usr 下还有 /usr/bin 和 /usr/sbin&lt;br&gt;
 目录，分别存放用户和系统管理员的程序。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/usr/local&lt;/code&gt;  - 用于存放本地管理员自行编译安装的软件和数据，避免与系统自带的软件发生冲突。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var&lt;/code&gt;  - 存放系统产生的变动数据，如日志文件、邮件、打印队列、缓存等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些目录构成了 Linux 文件系统的主体结构，每个目录都有其特定的功能和用途，有助于保持文件系统的整洁和高效。&lt;br&gt;
了解这些基本目录及其作用对于管理和维护 Linux 系统非常重要。&lt;/p&gt;
&lt;h3 id=&#34;linux-文件权限&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#linux-文件权限&#34;&gt;#&lt;/a&gt; Linux 文件权限&lt;/h3&gt;
&lt;p&gt;在 Linux 系统中，文件权限是一个重要的概念，它决定了用户能够对文件或目录进行哪些操作。&lt;br&gt;
文件权限是基于用户和组来管理的，每个文件都有一个所有者和一个所属组，并且有三种类型的权限：读（read, r）、写（write,&lt;br&gt;
w）和执行（execute, x）。&lt;/p&gt;
&lt;p&gt;文件权限的基本构成&lt;/p&gt;
&lt;p&gt;文件权限由三组权限组成，每组权限对应不同的用户类别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有者权限（User）：文件的所有者可以设置的权限。&lt;/li&gt;
&lt;li&gt;组权限（Group）：文件所属组的成员可以设置的权限。&lt;/li&gt;
&lt;li&gt;其他用户权限（Others）：不属于文件所有者也不属于文件所属组的其他用户可以设置的权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每组权限又分为三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读权限（r）：允许读取文件的内容或列出目录的内容。&lt;/li&gt;
&lt;li&gt;写权限（w）：允许修改文件的内容或在目录中添加 / 删除文件。&lt;/li&gt;
&lt;li&gt;执行权限（x）：允许执行文件（如果文件是可执行的程序或脚本）或访问目录内的内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文件权限可以用两种方式表示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;符号表示法：使用字母 rwx 或 -（表示无权限）来表示权限。&lt;/li&gt;
&lt;li&gt;数字表示法：使用数字 4（读）、2（写）、1（执行）来表示权限，每组权限的数字相加得到最终的权限值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;符号表示法：rwxr-xr-- 表示文件所有者有读写执行权限，所属组有读和执行权限，其他用户只有读权限。&lt;/li&gt;
&lt;li&gt;数字表示法：754 表示文件所有者有读写执行权限（4 + 2 + 1 = 7），所属组有读和执行权限（4 + 1 = 5），其他用户只有读权限（4 = 4）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Linux 还有一些特殊的权限位，比如 SUID（Set User ID）、SGID（Set Group ID）和 Sticky Bit（粘滞位），这些权限位通常用于特定的情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SUID：如果一个可执行文件设置了 SUID 位，那么当非所有者执行这个文件时，该进程将具有文件所有者的权限。&lt;/li&gt;
&lt;li&gt;SGID：类似于 SUID，但对于目录而言，如果设置了 SGID 位，则在该目录中创建的新文件将继承目录的所属组。&lt;/li&gt;
&lt;li&gt;Sticky Bit：如果一个目录设置了 Sticky Bit，那么只有文件的所有者才能删除或重命名该目录中的文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;linux命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#linux命令&#34;&gt;#&lt;/a&gt; Linux 命令&lt;/h2&gt;
&lt;h3 id=&#34;命令行含义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#命令行含义&#34;&gt;#&lt;/a&gt; 命令行含义&lt;/h3&gt;
&lt;p&gt;示例： &lt;code&gt;root@app00:~#&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;root    #用户名，root为超级用户&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@       #分隔符&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;app00   #主机名称&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;~       #当前所在目录，默认用户目录为~，会随着目录切换而变化，例如：（root@app00:/bin# ，当前位置在bin目录下）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;#表示当前用户是超级用户，普通用户为$，例如：（&amp;quot;yao@app00:/root$&amp;quot; ，表示使用用户&amp;quot;yao&amp;quot;访问/root文件夹）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;命令行快捷键&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#命令行快捷键&#34;&gt;#&lt;/a&gt; 命令行快捷键&lt;/h3&gt;
&lt;p&gt;Linux 命令行中的快捷键主要用于提高在 Shell 中输入命令的效率。以下是一些常用的 Linux 命令行快捷键：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ctrl+A：移动光标到行首。&lt;/li&gt;
&lt;li&gt;Ctrl+E：移动光标到行尾。&lt;/li&gt;
&lt;li&gt;Ctrl+B 或 左箭头：向左移动一个字符。&lt;/li&gt;
&lt;li&gt;Ctrl+F 或 右箭头：向右移动一个字符。&lt;/li&gt;
&lt;li&gt;Ctrl+D：删除光标所在位置的字符。&lt;/li&gt;
&lt;li&gt;Ctrl+H 或 退格键：删除光标前的一个字符。&lt;/li&gt;
&lt;li&gt;Ctrl+T：交换光标前两个字符的位置。&lt;/li&gt;
&lt;li&gt;Ctrl+U：删除（剪切）光标前的所有字符。&lt;/li&gt;
&lt;li&gt;Ctrl+K：删除（剪切）光标及光标后的所有字符。&lt;/li&gt;
&lt;li&gt;Ctrl+W：删除（剪切）光标前的一个单词。&lt;/li&gt;
&lt;li&gt;Ctrl+Y：粘贴当前寄存器中的字符。&lt;/li&gt;
&lt;li&gt;Ctrl+L：清除屏幕，类似于 clear 命令。&lt;/li&gt;
&lt;li&gt;Ctrl+C：中断正在运行的命令。&lt;/li&gt;
&lt;li&gt;Ctrl+R：逆向搜索历史命令，即从最近的命令开始搜索。&lt;/li&gt;
&lt;li&gt;Ctrl+S：暂停终端（在某些终端中，这可能会导致屏幕锁定，使用 Ctrl+Q 解除）。&lt;/li&gt;
&lt;li&gt;Ctrl+Q：退出当前状态，如解除因 Ctrl+S 引起的屏幕锁定。&lt;/li&gt;
&lt;li&gt;Ctrl+D：如果没有输入任何命令就按此组合键，将会退出当前终端。&lt;/li&gt;
&lt;li&gt;Ctrl+Z：将当前正在运行的命令挂起，并返回到命令行提示符，可以使用 bg 或 fg 命令恢复任务。&lt;/li&gt;
&lt;li&gt;Ctrl+P 和 Ctrl+N：向上和向下翻阅命令历史。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 Ctrl+S 和 Ctrl+Q：这两个快捷键在某些终端模拟器中可能会导致屏幕锁定，如果遇到这种情况，可以使用 Ctrl+Q 来解除锁定。&lt;/li&gt;
&lt;li&gt;使用 Ctrl+D：如果没有输入任何命令就按 Ctrl+D，将会退出当前的 Shell 会话。如果不想退出，可以在按 Ctrl+D 之前输入一些字符，比如空格，然后再按&lt;br&gt;
 Ctrl+D。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;文件和目录操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文件和目录操作&#34;&gt;#&lt;/a&gt; 文件和目录操作&lt;/h3&gt;
&lt;h4 id=&#34;切换目录cd&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#切换目录cd&#34;&gt;#&lt;/a&gt; 切换目录（cd）&lt;/h4&gt;
&lt;p&gt;cd（change directory）命令在 Linux 和 Unix-like 操作系统中用于更改当前工作目录。这是一个非常基础且常用的命令，用于导航文件系统中的不同目录。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;cd [目录路径]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目录路径：指定要切换到的目录路径。如果省略，则默认切换到用户的主目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选项&lt;/p&gt;
&lt;p&gt;cd 命令本身没有太多选项，但有一些特殊的路径符号和约定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;~：表示用户的主目录。&lt;/li&gt;
&lt;li&gt;-：表示上次所在的目录。&lt;/li&gt;
&lt;li&gt;…：表示当前目录的父目录。&lt;/li&gt;
&lt;li&gt;.：表示当前目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;切换到用户的主目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cd ~&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;切换到指定目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cd /path/to/directory&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;切换到当前目录的父目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cd ..&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;切换到当前目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cd .&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;切换到上次所在的目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cd -&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;切换到多个目录层级：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cd ../../directory&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;切换到相对路径：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cd relative/path/to/directory&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;切换到绝对路径：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cd /absolute/path/to/directory&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;切换到特定用户的主目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cd ~username&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;切换到当前目录的上两级目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cd ../../../&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;路径解析：cd 命令会解析相对路径和绝对路径。相对路径是从当前目录开始计算的路径，而绝对路径是从根目录 / 开始的路径。&lt;/li&gt;
&lt;li&gt;主目录：使用～符号可以方便地切换到用户的主目录。如果后面跟一个用户名，如～username，则切换到指定用户的主目录。&lt;/li&gt;
&lt;li&gt;父目录：使用 … 符号可以方便地切换到当前目录的父目录。&lt;/li&gt;
&lt;li&gt;当前目录：使用。符号可以方便地切换到当前目录，尽管这样做通常没有实际意义。&lt;/li&gt;
&lt;li&gt;上次目录：使用 - 符号可以切换到上次所在的目录，这对于快速在多个目录之间切换非常有用。&lt;/li&gt;
&lt;li&gt;路径错误：如果指定的路径不存在或者没有权限访问，cd 命令将会失败，并显示相应的错误信息。&lt;/li&gt;
&lt;li&gt;环境变量：可以使用环境变量来构建路径。例如，cd $HOME/project 可以切换到 $HOME 目录下的 project 子目录。&lt;/li&gt;
&lt;li&gt;多级路径：可以使用多个 … 符号来切换到多级父目录，如 cd …/…/…/。&lt;/li&gt;
&lt;li&gt;相对路径：相对路径可以简化路径表达，尤其是在脚本中使用时。&lt;/li&gt;
&lt;li&gt;绝对路径：绝对路径从根目录 / 开始，可以明确指定任何目录路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;查看当前目录pwd&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看当前目录pwd&#34;&gt;#&lt;/a&gt; 查看当前目录（pwd）&lt;/h4&gt;
&lt;p&gt;pwd（print working directory）命令在 Linux 和 Unix-like 操作系统中用于显示当前工作目录的完整路径。&lt;br&gt;
这是一个非常简单但常用的命令，对于确定当前所在目录的位置非常有帮助。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;pwd [选项]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pwd 命令通常不需要额外的参数，但可以使用一些选项来定制输出。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-P 或 --physical：显示物理路径，即不解析符号链接。&lt;/li&gt;
&lt;li&gt;-L 或 --logical：显示逻辑路径，即解析符号链接（默认行为）。&lt;/li&gt;
&lt;li&gt;-W 或 --win：使用 Windows 格式的路径（适用于 Cygwin 环境）。&lt;/li&gt;
&lt;li&gt;-h 或 --help：显示帮助信息。&lt;/li&gt;
&lt;li&gt;-V 或 --version：显示版本信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显示当前工作目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;pwd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示当前工作目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;pwd -P&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示当前工作目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;pwd -L&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示当前工作目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;pwd -W&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示当前工作目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;pwd -h&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示当前工作目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;pwd -V&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认行为：pwd 命令默认显示逻辑路径，即解析符号链接。&lt;/li&gt;
&lt;li&gt;物理路径：使用 -P 选项可以显示物理路径，即不解析符号链接。这对于处理包含符号链接的目录非常有用。&lt;/li&gt;
&lt;li&gt;Windows 格式：使用 -W 选项可以在 Cygwin 环境下显示 Windows 格式的路径。&lt;/li&gt;
&lt;li&gt;帮助信息：使用 -h 选项可以显示帮助信息，了解更多的选项和用法。&lt;/li&gt;
&lt;li&gt;版本信息：使用 -V 选项可以显示 pwd 命令的版本信息。&lt;/li&gt;
&lt;li&gt;路径解析：在包含符号链接的环境中，pwd 命令的行为可能会有所不同。使用 -P 或 -L 选项可以根据需要选择不同的路径解析方式。&lt;/li&gt;
&lt;li&gt;环境兼容性：在不同的 Linux 发行版和 Unix-like 系统中，pwd 命令的选项可能略有不同。建议查看具体的帮助文档或手册页。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;列出目录内容ls&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#列出目录内容ls&#34;&gt;#&lt;/a&gt; 列出目录内容（ls）&lt;/h4&gt;
&lt;p&gt;ls（list directory contents）命令在 Linux 和 Unix-like 操作系统中用于列出目录的内容，包括文件、目录和其他文件系统对象。&lt;br&gt;
它是一个非常基础且常用的命令，几乎在任何 Linux 系统管理任务中都会用到。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;ls [选项] [文件或目录]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件或目录：指定要列出的文件或目录。如果省略，则默认列出当前目录的内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常用选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-a：显示所有文件，包括隐藏文件（以。开头的文件）。&lt;/li&gt;
&lt;li&gt;-l：以长格式输出，显示文件的详细信息（权限、链接数、所有者、组、大小、修改时间）。&lt;/li&gt;
&lt;li&gt;-h：以人类可读的格式显示文件大小（KB、MB、GB 等）。&lt;/li&gt;
&lt;li&gt;-r：反向排序（默认为正序）。&lt;/li&gt;
&lt;li&gt;-R：递归列出子目录的内容。&lt;/li&gt;
&lt;li&gt;-t：按照文件的最后修改时间排序。&lt;/li&gt;
&lt;li&gt;-S：按照文件大小排序。&lt;/li&gt;
&lt;li&gt;-1：每行只显示一个文件名。&lt;/li&gt;
&lt;li&gt;-d：显示目录本身而不是其内容。&lt;/li&gt;
&lt;li&gt;-i：显示文件的索引节点（inode）号。&lt;/li&gt;
&lt;li&gt;-s：显示文件的块大小。&lt;/li&gt;
&lt;li&gt;-A：显示除当前目录（.）和父目录（…）之外的所有文件。&lt;/li&gt;
&lt;li&gt;-F：在文件名末尾添加指示符（如 / 表示目录，* 表示可执行文件）。&lt;/li&gt;
&lt;li&gt;-X：按扩展属性排序。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;–color：使用颜色高亮显示不同类型的文件。&lt;/li&gt;
&lt;li&gt;–time-style=STYLE：指定时间格式（如 long-iso 显示完整日期和时间）。&lt;/li&gt;
&lt;li&gt;–group-directories-first：首先列出目录，然后列出文件。&lt;/li&gt;
&lt;li&gt;–almost-all：同 -A，显示除当前目录（.）和父目录（…）之外的所有文件。&lt;/li&gt;
&lt;li&gt;–help：显示帮助信息。&lt;/li&gt;
&lt;li&gt;–version：显示版本信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;列出当前目录的内容：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ls&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;列出所有文件，包括隐藏文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ls -a&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;以长格式列出文件详细信息：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ls -l&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;以长格式并以人类可读的格式显示文件大小：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ls -R&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;递归列出子目录的内容：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ls -R&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;按照文件的最后修改时间排序：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ls -lt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;按照文件大小排序：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ls -lS&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;每行只显示一个文件名：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ls -1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示目录本身而不是其内容：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ls -d /path/to/directory&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示文件的索引节点号：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ls -li&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示文件的块大小：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ls -ls&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;在文件名末尾添加指示符：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ls -F&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;使用颜色高亮显示不同类型的文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ls --color&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;指定时间格式：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ls --time-style=long-iso&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;隐藏文件：使用 -a 选项可以显示隐藏文件（以。开头的文件）。在日常使用中，经常需要查看隐藏文件，特别是在配置文件和系统文件夹中。&lt;/li&gt;
&lt;li&gt;长格式输出：使用 -l 选项可以显示文件的详细信息，这对于了解文件的权限、所有者、大小等非常有用。&lt;/li&gt;
&lt;li&gt;递归列出子目录：使用 -R 选项可以递归列出子目录的内容，这对于查看复杂目录结构非常有帮助。&lt;/li&gt;
&lt;li&gt;排序方式：可以根据需要选择不同的排序方式，如按时间 (-t)、按大小 (-S) 等。&lt;/li&gt;
&lt;li&gt;颜色高亮：使用 --color 选项可以让不同类型的文件以不同的颜色显示，便于快速识别。&lt;/li&gt;
&lt;li&gt;文件大小：使用 -h 选项可以将文件大小转换为人类可读的格式，如 KB、MB、GB 等。&lt;/li&gt;
&lt;li&gt;目录本身：使用 -d 选项可以显示目录本身而不是其内容，这对于处理目录路径非常有用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;创建目录mkdir&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建目录mkdir&#34;&gt;#&lt;/a&gt; 创建目录（mkdir）&lt;/h4&gt;
&lt;p&gt;mkdir（make directory）命令在 Linux 和 Unix-like 操作系统中用于创建新的目录。这是一个非常基础且常用的命令，用于组织文件系统中的文件和目录结构。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;mkdir [选项] 目录路径...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目录路径：指定要创建的一个或多个目录路径。可以是相对路径或绝对路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-p 或 --parents：即使中间目录不存在，也创建整个路径。&lt;br&gt;
例如，mkdir -p /path/to/newdir 会创建 /path、/path/to 和 /path/to/newdir。&lt;/li&gt;
&lt;li&gt;-m 或 --mode = 模式：指定新目录的权限模式。例如，mkdir -m 755 newdir 将新目录的权限设置为 755。&lt;/li&gt;
&lt;li&gt;-v 或 --verbose：详细输出每个操作的结果。&lt;/li&gt;
&lt;li&gt;-Z 或 --context = 上下文：设置 SELinux 上下文。&lt;/li&gt;
&lt;li&gt;-h 或 --help：显示帮助信息。&lt;/li&gt;
&lt;li&gt;-V 或 --version：显示版本信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建单个目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mkdir newdir&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;创建多个目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mkdir dir1 dir2 dir3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;创建带有父目录的目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mkdir -p /path/to/newdir&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;创建带有特定权限的目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mkdir -m 755 newdir&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;创建多个带有特定权限的目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mkdir -m 755 dir1 dir2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;详细输出创建结果：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mkdir -v newdir&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;创建带有 SELinux 上下文的目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mkdir -Z unconfined_u:object_r:admin_home_t:s0 newdir&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;创建多级目录结构：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mkdir -p /path/to/subdir1/subdir2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;创建多个多级目录结构：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mkdir -p /path/to/subdir1 /path/to/subdir2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目录存在性检查：如果指定的目录已经存在，mkdir 命令不会创建新的目录，并且会显示错误信息。使用 -p 选项可以避免这种错误。&lt;/li&gt;
&lt;li&gt;权限问题：如果当前用户没有足够的权限创建目录，mkdir 命令会失败并显示错误信息。&lt;/li&gt;
&lt;li&gt;相对路径和绝对路径：可以使用相对路径或绝对路径来创建目录。相对路径相对于当前工作目录，而绝对路径从根目录 / 开始。&lt;/li&gt;
&lt;li&gt;多级目录：使用 -p 选项可以创建多级目录结构，即使中间目录不存在也会自动创建。&lt;/li&gt;
&lt;li&gt;权限设置：使用 -m 选项可以设置新目录的权限模式。例如，755 表示所有用户都有读和执行权限，但只有所有者有写权限。&lt;/li&gt;
&lt;li&gt;详细输出：使用 -v 选项可以详细输出每个操作的结果，这对于调试和确认创建过程非常有用。&lt;/li&gt;
&lt;li&gt;SELinux 上下文：在使用 SELinux 的系统中，可以使用 -Z 选项设置新目录的 SELinux 上下文。&lt;/li&gt;
&lt;li&gt;帮助信息：使用 -h 选项可以显示帮助信息，了解更多的选项和用法。&lt;/li&gt;
&lt;li&gt;版本信息：使用 -V 选项可以显示 mkdir 命令的版本信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;文件权限控制chmod&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文件权限控制chmod&#34;&gt;#&lt;/a&gt; 文件权限控制（chmod）&lt;/h4&gt;
&lt;p&gt;chmod 命令用于更改文件或目录的权限。它是 Linux 和 Unix 系统中一个非常重要的命令，用于控制用户对文件或目录的操作权限。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;chmod [选项] 模式 文件或目录&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数与选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-R, --recursive：递归地更改目录及其子目录下的所有文件和目录的权限。&lt;/li&gt;
&lt;li&gt;-c, --changes：仅报告更改的文件。&lt;/li&gt;
&lt;li&gt;-v, --verbose：详细报告更改的文件。&lt;/li&gt;
&lt;li&gt;–reference=FILE：将指定文件的权限应用到其他文件或目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;权限模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#权限模式&#34;&gt;#&lt;/a&gt; 权限模式&lt;/h5&gt;
&lt;p&gt;chmod 支持两种方式设置权限：符号模式和数字模式。&lt;/p&gt;
&lt;h6 id=&#34;符号模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#符号模式&#34;&gt;#&lt;/a&gt; 符号模式&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;u：用户（文件所有者）。&lt;/li&gt;
&lt;li&gt;g：组（文件所属组的成员）。&lt;/li&gt;
&lt;li&gt;o：其他人。&lt;/li&gt;
&lt;li&gt;a：所有用户（等同于 ugo）。&lt;/li&gt;
&lt;li&gt;+：添加权限。&lt;/li&gt;
&lt;li&gt;-：移除权限。&lt;/li&gt;
&lt;li&gt;=：设置权限。&lt;/li&gt;
&lt;li&gt;常见的权限有：&lt;/li&gt;
&lt;li&gt;r：读权限。&lt;/li&gt;
&lt;li&gt;w：写权限。&lt;/li&gt;
&lt;li&gt;x：执行权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;chmod u+x filename：为文件所有者添加执行权限。&lt;/li&gt;
&lt;li&gt;chmod go-w filename：为组和其他人移除写权限。&lt;/li&gt;
&lt;li&gt;chmod a=rwx filename：为所有用户设置读、写、执行权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;数字模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数字模式&#34;&gt;#&lt;/a&gt; 数字模式&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;4：读权限。&lt;/li&gt;
&lt;li&gt;2：写权限。&lt;/li&gt;
&lt;li&gt;1：执行权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;组合权限的数值计算方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4 + 2 + 1：读、写、执行权限。&lt;/li&gt;
&lt;li&gt;4 + 0 + 1：读、无、执行权限。&lt;/li&gt;
&lt;li&gt;0 + 2 + 0：无、写、无权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;chmod 755 filename：为文件所有者设置读、写、执行权限；为组和其他人设置读、执行权限。&lt;/li&gt;
&lt;li&gt;chmod 644 filename：为文件所有者设置读、写权限；为组和其他人设置读权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为文件所有者添加执行权限：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;chmod u+x filename&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;为组和其他人移除写权限：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;chmod go-w filename&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;为所有用户设置读、写、执行权限：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;chmod a=rwx filename&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;设置文件权限为 755：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;chmod 755 filename&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;递归设置目录及其子目录的权限：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;chmod -R 755 directory&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;递归设置权限时要谨慎：使用 -R 选项递归设置权限时，确保你了解其影响范围，以免误操作导致安全问题。&lt;/li&gt;
&lt;li&gt;权限冲突检查：在设置权限时，确保权限不会导致冲突或安全隐患。例如，不要随意给所有用户执行权限。&lt;/li&gt;
&lt;li&gt;使用符号模式更直观：使用符号模式（如 u+x）通常比数字模式更直观，更容易理解权限的变化。&lt;/li&gt;
&lt;li&gt;备份权限配置：在批量修改权限之前，最好先备份原始权限配置，以便出现问题时能够恢复。&lt;/li&gt;
&lt;li&gt;避免过度放宽权限：尽量避免给不必要的用户或组过多的权限，以保证系统的安全性。&lt;/li&gt;
&lt;li&gt;查看当前权限：使用 ls -l 命令查看文件或目录的当前权限，以便更好地理解 chmod 的效果。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;搜索目录find&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#搜索目录find&#34;&gt;#&lt;/a&gt; 搜索目录（find）&lt;/h4&gt;
&lt;p&gt;find 命令在 Linux 和 Unix-like 操作系统中用于查找文件系统中的文件和目录。这是一个非常强大且灵活的命令，可以基于多种条件进行搜索。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;find [路径] [表达式]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;路径：指定查找的起始目录。&lt;/li&gt;
&lt;li&gt;表达式：指定查找的条件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;表达式选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-name：按文件名匹配。&lt;/li&gt;
&lt;li&gt;-iname：按文件名匹配，不区分大小写。&lt;/li&gt;
&lt;li&gt;-type：按文件类型匹配（d: 目录，f: 文件，l: 符号链接）。&lt;/li&gt;
&lt;li&gt;-mtime：按修改时间匹配（天数）。&lt;/li&gt;
&lt;li&gt;-atime：按访问时间匹配（天数）。&lt;/li&gt;
&lt;li&gt;-ctime：按状态改变时间匹配（天数）。&lt;/li&gt;
&lt;li&gt;-size：按文件大小匹配（单位：b, k, M, G）。&lt;/li&gt;
&lt;li&gt;-user：按文件所有者用户名匹配。&lt;/li&gt;
&lt;li&gt;-group：按文件所属组名匹配。&lt;/li&gt;
&lt;li&gt;-perm：按文件权限匹配。&lt;/li&gt;
&lt;li&gt;-newer：按文件是否比给定文件新。&lt;/li&gt;
&lt;li&gt;-empty：查找空文件或空目录。&lt;/li&gt;
&lt;li&gt;-exec：对找到的文件执行命令。&lt;/li&gt;
&lt;li&gt;-print：打印找到的文件或目录路径。&lt;/li&gt;
&lt;li&gt;-print0：打印找到的文件或目录路径，并以 null 字符分隔。&lt;/li&gt;
&lt;li&gt;-ok：提示用户确认是否执行命令。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;连接符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-and 或 &amp;amp;&amp;amp;：逻辑与。&lt;/li&gt;
&lt;li&gt;-or 或 ||：逻辑或。&lt;/li&gt;
&lt;li&gt;-not 或！：逻辑非。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按文件名匹配：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;find /path/to/start -name &amp;quot;file.txt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;按文件名匹配（不区分大小写）：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;find /path/to/start -iname &amp;quot;*.txt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;按文件类型匹配：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;find /path/to/start -type d&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;按修改时间匹配：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;find /path/to/start -mtime -7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;按访问时间匹配：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;find /path/to/start -atime +30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;按状态改变时间匹配：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;find /path/to/start -ctime 10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;按文件大小匹配：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;find /path/to/start -size +10M&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;按文件所有者匹配：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;find /path/to/start -user alice&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;按文件所属组匹配：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;find /path/to/start -group developers&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;按文件权限匹配：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;find /path/to/start -perm 755&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;按文件是否比给定文件新：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;find /path/to/start -newer file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;查找空文件或空目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;find /path/to/start -empty&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;对找到的文件执行命令：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;find /path/to/start -name &amp;quot;*.txt&amp;quot; -exec chmod 644 &amp;#123;&amp;#125; \;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;打印找到的文件或目录路径：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;find /path/to/start -name &amp;quot;*.txt&amp;quot; -print&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;打印找到的文件或目录路径，并以 null 字符分隔：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;find /path/to/start -name &amp;quot;*.txt&amp;quot; -print0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;提示用户确认是否执行命令：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;find /path/to/start -name &amp;quot;*.txt&amp;quot; -ok rm &amp;#123;&amp;#125; \;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;删除目录rmdir&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#删除目录rmdir&#34;&gt;#&lt;/a&gt; 删除目录（rmdir）&lt;/h4&gt;
&lt;p&gt;rmdir 命令用于删除空目录。它是一种安全的方式来删除目录，因为它不会删除非空目录，从而避免意外删除重要文件。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;rmdir [选项] 目录...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数与选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-p: 删除目录及其父目录，前提是它们都是空的。&lt;/li&gt;
&lt;li&gt;-v: 显示每个被删除的目录。&lt;/li&gt;
&lt;li&gt;–help: 显示帮助信息。&lt;/li&gt;
&lt;li&gt;–version: 显示版本信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;删除名为 directory_name 的空目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;rmdir directory_name&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;删除多个空目录 directory1、directory2 和 directory3：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;rmdir directory1 directory2 directory3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;删除 subdirectory 及其父目录 directory，前提是它们都是空的：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;rmdir -p directory/subdirectory&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;删除 directory_name 并显示删除过程中的详细信息：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;rmdir -v directory_name&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目录必须为空：rmdir 只能删除空目录。如果目录中有文件或子目录，rmdir 将会失败。&lt;/li&gt;
&lt;li&gt;递归删除：使用 -p 选项时，只有当所有中间目录也是空的，才会递归删除。&lt;/li&gt;
&lt;li&gt;权限问题：删除目录需要相应的权限。如果当前用户没有足够的权限，可以使用 sudo 命令。&lt;/li&gt;
&lt;li&gt;确认提示：在删除目录之前，最好先确认目录确实是空的。可以使用 ls 命令查看目录内容。&lt;/li&gt;
&lt;li&gt;错误处理：如果删除失败，可以查看具体的错误信息以了解原因。&lt;/li&gt;
&lt;li&gt;备份：在删除重要目录之前，建议先备份相关文件或目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;删除文件rm&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#删除文件rm&#34;&gt;#&lt;/a&gt; 删除文件（rm）&lt;/h4&gt;
&lt;p&gt;rm（remove）命令在 Linux 和 Unix-like 操作系统中用于删除文件或目录。这是一个非常基础且常用的命令，用于清理文件系统中的文件和目录。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;rm [选项] 文件或目录...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件或目录：指定要删除的一个或多个文件或目录路径。可以是相对路径或绝对路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-i 或 --interactive：在删除每个文件前提示用户确认。&lt;/li&gt;
&lt;li&gt;-f 或 --force：强制删除文件，忽略不存在的文件，不提示用户确认。&lt;/li&gt;
&lt;li&gt;-r 或 --recursive：递归删除目录及其内容。&lt;/li&gt;
&lt;li&gt;-R 或 --recursive：与 -r 相同，递归删除目录及其内容。&lt;/li&gt;
&lt;li&gt;-v 或 --verbose：详细输出每个操作的结果。&lt;/li&gt;
&lt;li&gt;-P 或 --preserve-root：禁止删除 / 目录。&lt;/li&gt;
&lt;li&gt;-W 或 --no-wildcards：禁用通配符扩展。&lt;/li&gt;
&lt;li&gt;-h 或 --help：显示帮助信息。&lt;/li&gt;
&lt;li&gt;-V 或 --version：显示版本信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;删除单个文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;rm file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;删除多个文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;rm file1.txt file2.txt file3.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;删除目录及其内容：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;rm -r dir1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;删除目录及其内容（使用 -R 选项）：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;rm -R dir1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;交互式确认删除：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;rm -i file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;强制删除文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;rm -f file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;详细输出删除结果：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;rm -v file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;递归删除多个目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;rm -r dir1 dir2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;删除多个文件和目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;rm -rf file1.txt file2.txt dir1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;禁用通配符扩展：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;rm -W file*.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;交互式确认：使用 -i 选项会在删除每个文件前提示用户确认，这有助于防止误删重要文件。&lt;/li&gt;
&lt;li&gt;强制删除：使用 -f 选项可以强制删除文件，忽略不存在的文件，不提示用户确认。这在批量删除文件时非常有用，但也容易导致误删。&lt;/li&gt;
&lt;li&gt;递归删除目录：使用 -r 或 -R 选项可以递归删除目录及其内容。这在删除整个目录树时非常有用，但也容易导致误删。&lt;/li&gt;
&lt;li&gt;详细输出：使用 -v 选项可以详细输出每个操作的结果，这对于调试和确认删除过程非常有用。&lt;/li&gt;
&lt;li&gt;路径问题：确保提供的路径是正确的，否则 rm 命令可能会删除错误的文件或目录。&lt;/li&gt;
&lt;li&gt;权限问题：如果当前用户没有足够的权限删除文件或目录，rm 命令会失败并显示错误信息。&lt;/li&gt;
&lt;li&gt;通配符扩展：默认情况下，rm 命令会扩展通配符（如 file*.txt）。使用 -W 选项可以禁用通配符扩展。&lt;/li&gt;
&lt;li&gt;保护根目录：使用 -P 选项可以禁止删除 / 目录。&lt;/li&gt;
&lt;li&gt;帮助信息：使用 -h 选项可以显示帮助信息，了解更多的选项和用法。&lt;/li&gt;
&lt;li&gt;版本信息：使用 -V 选项可以显示 rm 命令的版本信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;拷贝目录cp&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#拷贝目录cp&#34;&gt;#&lt;/a&gt; 拷贝目录（cp）&lt;/h4&gt;
&lt;p&gt;cp（copy）命令在 Linux 和 Unix-like 操作系统中用于复制文件或目录。这是一个非常基础且常用的命令，用于备份文件、创建副本或复制整个目录结构。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;cp [选项] 源路径 目标路径&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;源路径：要复制的文件或目录路径。&lt;/li&gt;
&lt;li&gt;目标路径：复制后的目标位置或新名称。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-i 或 --interactive：在覆盖现有文件之前提示用户确认。&lt;/li&gt;
&lt;li&gt;-f 或 --force：强制覆盖现有文件，不提示用户确认。&lt;/li&gt;
&lt;li&gt;-r 或 --recursive：递归复制目录及其内容。&lt;/li&gt;
&lt;li&gt;-p 或 --preserve = 属性：保留源文件的属性（如权限、时间戳等）。&lt;/li&gt;
&lt;li&gt;-v 或 --verbose：详细输出每个操作的结果。&lt;/li&gt;
&lt;li&gt;-l 或 --link：创建硬链接而不是复制文件。&lt;/li&gt;
&lt;li&gt;-s 或 --symbolic-link：创建符号链接而不是复制文件。&lt;/li&gt;
&lt;li&gt;-u 或 --update：仅当源文件比目标文件更新时才复制。&lt;/li&gt;
&lt;li&gt;-a 或 --archive：等价于 -dpR，用于递归复制并保留所有属性。&lt;/li&gt;
&lt;li&gt;-H 或 --dereference-argument-directories：将目标目录视为普通文件。&lt;/li&gt;
&lt;li&gt;-L 或 --dereference：递归复制符号链接的目标。&lt;/li&gt;
&lt;li&gt;-S 或 --suffix=SUFFIX：指定备份文件的后缀。&lt;/li&gt;
&lt;li&gt;-n 或 --no-clobber：禁止覆盖现有文件。&lt;/li&gt;
&lt;li&gt;-h 或 --help：显示帮助信息。&lt;/li&gt;
&lt;li&gt;-V 或 --version：显示版本信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;复制单个文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cp file.txt newfile.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;复制多个文件到同一目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cp file1.txt file2.txt /path/to/newdir/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;复制目录及其内容：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cp -r dir1 /path/to/newdir/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;复制目录及其内容（使用 -R 选项）：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cp -R dir1 /path/to/newdir/   &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;交互式确认覆盖：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cp -i file.txt /path/to/newdir/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;强制覆盖现有文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cp -f file.txt /path/to/newdir/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;保留源文件属性：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cp -p file.txt newfile.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;详细输出复制结果：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cp -v file.txt /path/to/newdir/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;创建硬链接：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cp -l file.txt linkfile.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;创建符号链接：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cp -s file.txt symlink.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;仅当源文件更新时复制：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cp -u file.txt /path/to/newdir/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;递归复制并保留所有属性：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cp -a dir1 /path/to/newdir/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;递归复制符号链接的目标：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cp -L dir1 /path/to/newdir/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;指定备份文件的后缀：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cp -S .bak file.txt /path/to/newdir/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;禁止覆盖现有文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cp -n file.txt /path/to/newdir/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;交互式确认：使用 -i 选项会在覆盖现有文件前提示用户确认，这有助于防止误覆盖重要文件。&lt;/li&gt;
&lt;li&gt;强制覆盖：使用 -f 选项可以强制覆盖现有文件，不提示用户确认。这在批量复制文件时非常有用，但也容易导致误覆盖。&lt;/li&gt;
&lt;li&gt;递归复制目录：使用 -r 或 -R 选项可以递归复制目录及其内容。这在复制整个目录树时非常有用，但也容易导致误覆盖。&lt;/li&gt;
&lt;li&gt;保留源文件属性：使用 -p 选项可以保留源文件的所有属性（如权限、时间戳等）。&lt;/li&gt;
&lt;li&gt;详细输出：使用 -v 选项可以详细输出每个操作的结果，这对于调试和确认复制过程非常有用。&lt;/li&gt;
&lt;li&gt;硬链接：使用 -l 选项可以创建硬链接而不是复制文件。&lt;/li&gt;
&lt;li&gt;符号链接：使用 -s 选项可以创建符号链接而不是复制文件。&lt;/li&gt;
&lt;li&gt;仅当源文件更新时复制：使用 -u 选项可以仅当源文件比目标文件更新时才复制。&lt;/li&gt;
&lt;li&gt;递归复制并保留所有属性：使用 -a 选项可以递归复制并保留所有属性，相当于 -dpR。&lt;/li&gt;
&lt;li&gt;路径问题：确保提供的路径是正确的，否则 cp 命令可能会复制错误的文件或目录。&lt;/li&gt;
&lt;li&gt;权限问题：如果当前用户没有足够的权限复制文件或目录，cp 命令会失败并显示错误信息。&lt;/li&gt;
&lt;li&gt;备份文件：使用 -S 选项可以指定备份文件的后缀。&lt;/li&gt;
&lt;li&gt;禁止覆盖现有文件：使用 -n 选项可以禁止覆盖现有文件。&lt;/li&gt;
&lt;li&gt;帮助信息：使用 -h 选项可以显示帮助信息，了解更多的选项和用法。&lt;/li&gt;
&lt;li&gt;版本信息：使用 -V 选项可以显示 cp 命令的版本信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;移动目录mv&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#移动目录mv&#34;&gt;#&lt;/a&gt; 移动目录（mv）&lt;/h4&gt;
&lt;p&gt;mv（move or rename files）命令在 Linux 和 Unix-like 操作系统中用于移动或重命名文件和目录。这是一个非常基础且常用的命令，用于文件系统的管理和组织。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;mv [选项] 源路径 目标路径&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;源路径：要移动或重命名的文件或目录路径。&lt;/li&gt;
&lt;li&gt;目标路径：移动后的新位置或重命名后的新名称。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-i 或 --interactive：在覆盖现有文件之前提示用户确认。&lt;/li&gt;
&lt;li&gt;-f 或 --force：强制覆盖现有文件，不提示用户确认。&lt;/li&gt;
&lt;li&gt;-u 或 --update：仅当源文件比目标文件更新时才移动。&lt;/li&gt;
&lt;li&gt;-v 或 --verbose：详细输出每个操作的结果。&lt;/li&gt;
&lt;li&gt;-t 或 --target-directory=DIR：指定目标目录。&lt;/li&gt;
&lt;li&gt;-T 或 --no-target-directory：即使目标看起来像目录，也不将其视为目录。&lt;/li&gt;
&lt;li&gt;-b 或 --backup=CONTROL：在覆盖现有文件时创建备份。&lt;/li&gt;
&lt;li&gt;-n 或 --no-clobber：禁止覆盖现有文件。&lt;/li&gt;
&lt;li&gt;-h 或 --help：显示帮助信息。&lt;/li&gt;
&lt;li&gt;-V 或 --version：显示版本信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重命名文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mv oldfile newfile&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;移动文件到另一个目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mv file.txt /path/to/newdir/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;重命名目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mv olddir newdir&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;移动目录到另一个目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mv dir1 /path/to/newdir/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;交互式确认覆盖：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mv -i file.txt /path/to/newdir/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;强制覆盖现有文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mv -f file.txt /path/to/newdir/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;仅当源文件更新时移动：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mv -u file.txt /path/to/newdir/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;详细输出每个操作的结果：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mv -v file.txt /path/to/newdir/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;指定目标目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mv -t /path/to/newdir/ file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;不将目标视为目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mv -T file.txt newdir&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;创建备份文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mv -b file.txt /path/to/newdir/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;禁止覆盖现有文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mv -n file.txt /path/to/newdir/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重命名文件：使用 mv 命令可以轻松地重命名文件或目录。例如，mv oldfile newfile 将 oldfile 重命名为 newfile。&lt;/li&gt;
&lt;li&gt;移动文件或目录：使用 mv 命令可以将文件或目录移动到另一个位置。&lt;br&gt;
例如，mv file.txt/path/to/newdir/ 将 file.txt 移动到 /path/to/newdir/。&lt;/li&gt;
&lt;li&gt;覆盖现有文件：默认情况下，如果目标文件已存在，mv 命令会提示用户确认是否覆盖。&lt;br&gt;
使用 -i 选项可以启用交互式确认，使用 -f 选项可以强制覆盖。&lt;/li&gt;
&lt;li&gt;仅当源文件更新时移动：使用 -u 选项可以仅当源文件比目标文件更新时才移动。&lt;/li&gt;
&lt;li&gt;详细输出：使用 -v 选项可以详细输出每个操作的结果，这对于调试和确认移动过程非常有用。&lt;/li&gt;
&lt;li&gt;指定目标目录：使用 -t 选项可以指定目标目录，例如 mv -t /path/to/newdir/file.txt。&lt;/li&gt;
&lt;li&gt;不将目标视为目录：使用 -T 选项可以防止将目标视为目录，即使目标看起来像目录。&lt;/li&gt;
&lt;li&gt;创建备份文件：使用 -b 选项可以在覆盖现有文件时创建备份文件。&lt;/li&gt;
&lt;li&gt;禁止覆盖现有文件：使用 -n 选项可以禁止覆盖现有文件。&lt;/li&gt;
&lt;li&gt;路径问题：确保提供的路径是正确的，否则 mv 命令可能会失败或产生意外的结果。&lt;/li&gt;
&lt;li&gt;权限问题：如果当前用户没有足够的权限移动文件或目录，mv 命令会失败并显示错误信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;创建文件touch&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建文件touch&#34;&gt;#&lt;/a&gt; 创建文件（touch）&lt;/h4&gt;
&lt;p&gt;touch 命令在 Linux 和 Unix-like 操作系统中用于创建一个文件，如果文件已经存在，则更新其访问时间。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;touch [选项] 文件名...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件名…：可以是一个或多个文件名，也可以是包含文件名的目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-a：只改变文件的访问时间（access time）而不改变修改时间（modification time）。&lt;/li&gt;
&lt;li&gt;-m：只改变文件的修改时间而不改变访问时间。&lt;/li&gt;
&lt;li&gt;-c 或 --no-create：如果文件不存在，则不创建新文件。&lt;/li&gt;
&lt;li&gt;-d DATE 或 --date=DATE：使用指定的日期而非当前日期作为时间戳。&lt;/li&gt;
&lt;li&gt;-r FILE 或 --reference=FILE：将指定文件的时间戳复制到目标文件。&lt;/li&gt;
&lt;li&gt;-t TIMESTAMP 或 --time=TIMESTAMP：直接设置时间戳，而不是使用当前时间。时间戳格式为 YYYYMMDDhhmm [.ss]。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建一个名为 example.txt 的新文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;touch example.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;更新 example.txt 的访问时间和修改时间：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;touch example.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;更新 example.txt 的访问时间，而不更新修改时间：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;touch -a example.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;使用特定日期更新 example.txt 的时间戳&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;touch -d &amp;quot;2024-01-01 00:00:00&amp;quot; example.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;将 reference.txt 的时间戳复制给 example.txt：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;touch -r reference.txt example.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当使用 touch 命令创建新文件时，请确保你有足够的权限在指定目录中创建文件。&lt;/li&gt;
&lt;li&gt;如果你想更新多个文件的时间戳，可以一次传递多个文件名给 touch 命令。&lt;/li&gt;
&lt;li&gt;使用 -t 选项时，确保你提供的 TIMESTAMP 格式正确，否则命令将失败。&lt;/li&gt;
&lt;li&gt;在脚本中使用 touch 时，考虑文件可能已经存在的场景，并决定是否需要 -c 选项来避免不必要的文件创建。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;创建硬链接或符号链接ln&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建硬链接或符号链接ln&#34;&gt;#&lt;/a&gt; 创建硬链接或符号链接（ln）&lt;/h4&gt;
&lt;p&gt;ln 命令在 Linux 系统中用于创建文件的硬链接或符号链接（软链接）。这对于文件系统管理非常有用，特别是当需要指向同一个文件的不同名称或路径时。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;ln [选项] 源文件 目标文件&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数和选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-s 或 --symbolic：创建符号链接而不是默认的硬链接。&lt;/li&gt;
&lt;li&gt;-f 或 --force：如果目标文件已经存在，则删除后重新创建链接。&lt;/li&gt;
&lt;li&gt;-v 或 --verbose：显示操作过程的信息。&lt;/li&gt;
&lt;li&gt;-i 或 --interactive：交互模式下询问用户是否覆盖已存在的目标文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建一个名为 link_file.txt 的硬链接，指向 file.txt 的相同数据块。&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ln file.txt link_file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;创建一个符号链接 link_file.txt，指向 file.txt 的位置。&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ln -s file.txt link_file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;强制创建符号链接：如果 link_file.txt 已经存在，将会被删除并重新创建为指向 file.txt 的符号链接。&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ln -sf file.txt link_file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;在创建链接前会询问用户是否继续。&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ln -is file.txt link_file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬链接 只能用于文件，不能用于目录。如果你尝试对目录创建硬链接，会收到错误提示。&lt;/li&gt;
&lt;li&gt;符号链接 可以用于文件和目录，并且可以跨文件系统创建，而硬链接不可以。&lt;/li&gt;
&lt;li&gt;当删除原文件时，硬链接依然有效，因为它们指向相同的文件数据块。但是，如果所有指向该数据块的链接都被删除了，那么该数据块会被回收。&lt;/li&gt;
&lt;li&gt;符号链接在原文件被删除后会变成无效链接，除非通过绝对路径创建符号链接。&lt;/li&gt;
&lt;li&gt;使用 -f 选项时要小心，因为它会无提示地删除已存在的目标文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;文件打包解包tar&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文件打包解包tar&#34;&gt;#&lt;/a&gt; 文件打包解包（tar）&lt;/h4&gt;
&lt;p&gt;tar (Tape Archive) 是一个广泛使用的文件打包和解包工具。它可以将多个文件和目录打包成一个单一的归档文件，并支持多种压缩格式。&lt;/p&gt;
&lt;p&gt;命令格式： &lt;code&gt;tar [选项] [文件] [文件] ...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数与选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-c: 创建新的归档文件。&lt;/li&gt;
&lt;li&gt;-x: 解包现有的归档文件。&lt;/li&gt;
&lt;li&gt;-t: 列出归档文件的内容。&lt;/li&gt;
&lt;li&gt;-r: 将文件添加到现有的归档文件。&lt;/li&gt;
&lt;li&gt;-u: 更新归档文件中的文件。&lt;/li&gt;
&lt;li&gt;-a: 自动选择压缩方式。&lt;/li&gt;
&lt;li&gt;-z: 使用 gzip 压缩。&lt;/li&gt;
&lt;li&gt;-j: 使用 bzip2 压缩。&lt;/li&gt;
&lt;li&gt;-J: 使用 xz 压缩。&lt;/li&gt;
&lt;li&gt;-v: 显示详细信息。&lt;/li&gt;
&lt;li&gt;-f: 指定归档文件名。&lt;/li&gt;
&lt;li&gt;-p: 保留文件权限。&lt;/li&gt;
&lt;li&gt;-P: 使用绝对路径。&lt;/li&gt;
&lt;li&gt;-m: 保留符号链接。&lt;/li&gt;
&lt;li&gt;-g: 使用全局索引文件。&lt;/li&gt;
&lt;li&gt;-T: 从文件中读取文件名列表。&lt;/li&gt;
&lt;li&gt;-C: 指定目录作为工作目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建归档文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tar -czvf archive.tar.gz /path/to/directory&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;-c: 创建新的归档文件。&lt;/li&gt;
&lt;li&gt;-z: 使用 gzip 压缩。&lt;/li&gt;
&lt;li&gt;-v: 显示详细信息。&lt;/li&gt;
&lt;li&gt;-f: 指定归档文件名为 archive.tar.gz。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解包归档文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tar -xzvf archive.tar.gz -C /destination/path&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;-x: 解包归档文件。&lt;/li&gt;
&lt;li&gt;-z: 使用 gzip 压缩。&lt;/li&gt;
&lt;li&gt;-v: 显示详细信息。&lt;/li&gt;
&lt;li&gt;-f: 指定归档文件名为 archive.tar.gz。&lt;/li&gt;
&lt;li&gt;-C: 指定解包的目标目录为 /destination/path。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;列出归档文件内容：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tar -tvf archive.tar.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;-t: 列出归档文件的内容。&lt;/li&gt;
&lt;li&gt;-v: 显示详细信息。&lt;/li&gt;
&lt;li&gt;-f: 指定归档文件名为 archive.tar.gz。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;将文件添加到现有归档文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tar -rvf archive.tar /path/to/newfile&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;-r: 将文件添加到现有的归档文件。&lt;/li&gt;
&lt;li&gt;-v: 显示详细信息。&lt;/li&gt;
&lt;li&gt;-f: 指定归档文件名为 archive.tar。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;更新归档文件中的文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tar -uvf archive.tar /path/to/newfile&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;-u: 更新归档文件中的文件。&lt;/li&gt;
&lt;li&gt;-v: 显示详细信息。&lt;/li&gt;
&lt;li&gt;-f: 指定归档文件名为 archive.tar。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 bzip2 压缩：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tar -cjvf archive.tar.bz2 /path/to/directory&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;-c: 创建新的归档文件。&lt;/li&gt;
&lt;li&gt;-j: 使用 bzip2 压缩。&lt;/li&gt;
&lt;li&gt;-v: 显示详细信息。&lt;/li&gt;
&lt;li&gt;-f: 指定归档文件名为 archive.tar.bz2。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 xz 压缩：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tar -cJvf archive.tar.xz /path/to/directory&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;-c: 创建新的归档文件。&lt;/li&gt;
&lt;li&gt;-J: 使用 xz 压缩。&lt;/li&gt;
&lt;li&gt;-v: 显示详细信息。&lt;/li&gt;
&lt;li&gt;-f: 指定归档文件名为 archive.tar.xz。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;保留文件权限：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tar -cvpf archive.tar /path/to/directory&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;-c: 创建新的归档文件。&lt;/li&gt;
&lt;li&gt;-v: 显示详细信息。&lt;/li&gt;
&lt;li&gt;-p: 保留文件权限。&lt;/li&gt;
&lt;li&gt;-f: 指定归档文件名为 archive.tar。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用绝对路径：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tar -cvPf archive.tar /path/to/directory&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;-c: 创建新的归档文件。&lt;/li&gt;
&lt;li&gt;-v: 显示详细信息。&lt;/li&gt;
&lt;li&gt;-P: 使用绝对路径。&lt;/li&gt;
&lt;li&gt;-f: 指定归档文件名为 archive.tar。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;从文件中读取文件名列表：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tar -cvf archive.tar -T list.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;-c: 创建新的归档文件。&lt;/li&gt;
&lt;li&gt;-v: 显示详细信息。&lt;/li&gt;
&lt;li&gt;-f: 指定归档文件名为 archive.tar。&lt;/li&gt;
&lt;li&gt;-T: 从 list.txt 文件中读取文件名列表。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;压缩格式：tar 支持多种压缩格式，如 gzip (-z)、bzip2 (-j) 和 xz (-J)。选择合适的压缩格式可以根据具体需求优化存储空间和压缩速度。&lt;/li&gt;
&lt;li&gt;文件权限：使用 -p 选项可以保留文件权限，避免解包后的文件权限不一致。&lt;/li&gt;
&lt;li&gt;绝对路径：使用 -P 选项可以保留绝对路径，避免解包时路径混乱。&lt;/li&gt;
&lt;li&gt;符号链接：使用 -m 选项可以保留符号链接，避免解包时丢失符号链接信息。&lt;/li&gt;
&lt;li&gt;文件名列表：从文件中读取文件名列表时，确保文件名列表文件中的路径正确。&lt;/li&gt;
&lt;li&gt;备份策略：在创建备份文件时，建议定期备份，并确保备份文件的安全性和完整性。&lt;/li&gt;
&lt;li&gt;解包路径：解包文件时，使用 -C 选项指定目标目录，避免解包到当前目录造成混乱。&lt;/li&gt;
&lt;li&gt;资源管理：长时间运行 tar 命令时，注意监控系统资源使用情况，避免占用过多带宽和磁盘空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;解压缩文件unzip&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解压缩文件unzip&#34;&gt;#&lt;/a&gt; 解压缩文件（unzip）&lt;/h4&gt;
&lt;p&gt;unzip 是一个用于解压缩 ZIP 格式文件的命令行工具。它可以处理各种 ZIP 文件，并支持多种压缩算法。unzip 常用于解压从互联网下载的各种软件包和其他文件。&lt;/p&gt;
&lt;p&gt;基本格式： &lt;code&gt;unzip [选项] [压缩文件]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数与选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-l: 列出 ZIP 文件中的内容。&lt;/li&gt;
&lt;li&gt;-t: 测试 ZIP 文件中的内容是否完整。&lt;/li&gt;
&lt;li&gt;-v: 显示详细信息。&lt;/li&gt;
&lt;li&gt;-d: 指定解压的目标目录。&lt;/li&gt;
&lt;li&gt;-n: 不覆盖已存在的文件。&lt;/li&gt;
&lt;li&gt;-o: 强制覆盖已存在的文件。&lt;/li&gt;
&lt;li&gt;-p: 输出指定文件到标准输出。&lt;/li&gt;
&lt;li&gt;-j: 解压时不保留路径信息。&lt;/li&gt;
&lt;li&gt;-q: 安静模式，不显示任何信息。&lt;/li&gt;
&lt;li&gt;-x: 排除指定的文件或目录。&lt;/li&gt;
&lt;li&gt;-a: 将文本文件转换为当前系统的编码。&lt;/li&gt;
&lt;li&gt;-u: 更新 ZIP 文件中的文件。&lt;/li&gt;
&lt;li&gt;-m: 将提取的文件移动到当前目录。&lt;/li&gt;
&lt;li&gt;-Z: 显示帮助信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解压 ZIP 文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;unzip archive.zip&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;默认情况下，unzip 会将文件解压到当前目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解压 ZIP 文件到指定目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;unzip archive.zip -d /destination/path&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;-d: 指定解压的目标目录为 /destination/path。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;列出 ZIP 文件内容：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;unzip -l archive.zip&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;-l: 列出 ZIP 文件中的内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;测试 ZIP 文件内容是否完整：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;unzip -t archive.zip&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;-t: 测试 ZIP 文件中的内容是否完整。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;提取指定文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;unzip archive.zip file1.txt file2.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;提取 archive.zip 中的 file1.txt 和 file2.txt 文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不覆盖已存在的文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;unzip -n archive.zip&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;-n: 不覆盖已存在的文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;强制覆盖已存在的文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;unzip -o archive.zip&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;-o: 强制覆盖已存在的文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;输出指定文件到标准输出：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;unzip -p archive.zip file1.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;-p: 输出 file1.txt 到标准输出。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解压时不保留路径信息：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;unzip -j archive.zip&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;-j: 解压时不保留路径信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安静模式：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;unzip -q archive.zip&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;-q: 安静模式，不显示任何信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;排除指定的文件或目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;unzip -x &amp;quot;file*.txt&amp;quot; archive.zip&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;-x: 排除 file*.txt 文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;将文本文件转换为当前系统的编码：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;unzip -a archive.zip&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;-a: 将文本文件转换为当前系统的编码。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;更新 ZIP 文件中的文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;unzip -u archive.zip&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;-u: 更新 ZIP 文件中的文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;将提取的文件移动到当前目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;unzip -m archive.zip&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;-m: 将提取的文件移动到当前目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件路径：解压时，默认会保留 ZIP 文件中的路径信息。如果不需要路径信息，可以使用 -j 选项。&lt;/li&gt;
&lt;li&gt;文件覆盖：默认情况下，unzip 会覆盖已存在的文件。如果不希望覆盖文件，可以使用 -n 选项；如果希望强制覆盖，可以使用 -o 选项。&lt;/li&gt;
&lt;li&gt;文件编码：如果 ZIP 文件中的文本文件编码与当前系统不一致，可以使用 -a 选项将其转换为当前系统的编码。&lt;/li&gt;
&lt;li&gt;文件测试：使用 -t 选项可以测试 ZIP 文件中的内容是否完整，这对于检测损坏的文件非常有用。&lt;/li&gt;
&lt;li&gt;文件排除：使用 -x 选项可以排除指定的文件或目录，避免解压不必要的文件。&lt;/li&gt;
&lt;li&gt;解压目标目录：使用 -d 选项可以指定解压的目标目录，避免解压到当前目录导致混乱。&lt;/li&gt;
&lt;li&gt;资源管理：长时间运行 unzip 命令时，注意监控系统资源使用情况，避免占用过多带宽和磁盘空间。&lt;/li&gt;
&lt;li&gt;错误处理：如果遇到解压失败或其他错误，可以查看详细信息或使用 -v 选项获取更多信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;下载文件wget&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#下载文件wget&#34;&gt;#&lt;/a&gt; 下载文件（wget）&lt;/h4&gt;
&lt;p&gt;wget (Web GET) 是一个强大的命令行工具，用于从网络上下载文件。它支持多种协议（如 HTTP、HTTPS 和 FTP），并且具有断点续传、镜像站点等功能。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;wget [选项] [URL]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数与选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-O: 将下载的文件保存为指定的名字。&lt;/li&gt;
&lt;li&gt;-c: 继续下载未完成的部分。&lt;/li&gt;
&lt;li&gt;-r: 递归下载（递归模式）。&lt;/li&gt;
&lt;li&gt;-p: 下载页面指向的所有文件（包括图片、CSS 等）。&lt;/li&gt;
&lt;li&gt;-k: 将远程链接转换为本地链接。&lt;/li&gt;
&lt;li&gt;-N: 只下载比本地文件更新的文件。&lt;/li&gt;
&lt;li&gt;-t: 设置重试次数。&lt;/li&gt;
&lt;li&gt;-T: 设置超时时间（单位为秒）。&lt;/li&gt;
&lt;li&gt;-P: 将下载的文件保存到指定目录。&lt;/li&gt;
&lt;li&gt;–mirror: 创建一个完整的镜像站点。&lt;/li&gt;
&lt;li&gt;–wait: 在下载文件之间等待指定的时间（单位为秒）。&lt;/li&gt;
&lt;li&gt;–random-wait: 在下载文件之间随机等待一段时间。&lt;/li&gt;
&lt;li&gt;–spider: 测试链接是否可达而不实际下载文件。&lt;/li&gt;
&lt;li&gt;–user-agent: 设置用户代理字符串。&lt;/li&gt;
&lt;li&gt;–proxy: 设置代理服务器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载单个文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;wget https://example.com/file.zip&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;将下载的文件保存为指定的名字：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;wget -O my_file.zip https://example.com/file.zip&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;继续下载未完成的部分：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;wget -c https://example.com/large_file.zip&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;递归下载整个网站：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;wget -r -p -k -N http://example.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;递归下载并保存到指定目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;wget -r -P /path/to/download http://example.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;设置重试次数和超时时间：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;wget -t 3 -T 60 http://example.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;创建一个完整的镜像站点：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;wget --mirror http://example.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;在下载文件之间等待指定的时间：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;wget --wait=5 http://example.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;在下载文件之间随机等待一段时间：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;wget --random-wait http://example.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;测试链接是否可达而不实际下载文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;wget --spider http://example.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;设置用户代理字符串：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;wget --user-agent=&amp;quot;Mozilla/5.0&amp;quot; http://example.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;设置代理服务器：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;wget --proxy=http://proxy.example.com:8080 http://example.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;权限问题：下载较大的文件或需要特殊权限的文件时，建议使用 sudo 或以 root 用户身份运行 wget。&lt;/li&gt;
&lt;li&gt;网络稳定性：在下载过程中，如果网络不稳定，可以使用 -c 选项进行断点续传。&lt;/li&gt;
&lt;li&gt;递归下载：使用递归下载时，注意限制递归深度，避免下载不必要的文件。例如，可以使用 -l 选项设置最大递归深度。&lt;/li&gt;
&lt;li&gt;镜像站点：创建镜像站点时，确保有足够的磁盘空间，并遵守目标网站的版权和使用条款。&lt;/li&gt;
&lt;li&gt;代理设置：如果需要通过代理服务器下载文件，确保正确设置了代理地址和端口。&lt;/li&gt;
&lt;li&gt;安全问题：下载文件时，尽量从可信的源下载，并检查文件的完整性（如 MD5 或 SHA256 校验）。&lt;/li&gt;
&lt;li&gt;资源消耗：长时间运行大量下载任务时，注意监控系统资源使用情况，避免占用过多带宽和磁盘空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;文件内容操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文件内容操作&#34;&gt;#&lt;/a&gt; 文件内容操作&lt;/h3&gt;
&lt;h4 id=&#34;显示文件内容cat&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#显示文件内容cat&#34;&gt;#&lt;/a&gt; 显示文件内容（cat）&lt;/h4&gt;
&lt;p&gt;cat 命令用于将多个文件内容合并到一个文件中，并显示在屏幕上。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;cat [选项] [文件名]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数与选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-A, --show-all：显示所有字符，包括不可见字符如制表符、换行符等。&lt;/li&gt;
&lt;li&gt;-b, --number-nonblank：为非空输出行编号。&lt;/li&gt;
&lt;li&gt;-n, --number：为所有输出行编号。&lt;/li&gt;
&lt;li&gt;-s, --squeeze-blank：当遇到有多个相邻空行时，cat 在输出时只表示为一个空行。&lt;/li&gt;
&lt;li&gt;-E, --show-ends：在每行结束处显示 $ 符号。&lt;/li&gt;
&lt;li&gt;-T, --show-tabs：将 Tab 字符显示为 ^I。&lt;/li&gt;
&lt;li&gt;-v, --show-nonprinting：使用 ^ 和 M- 符号显示非打印 ASCII 字符。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看文件内容：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cat filename.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;合并两个文件到一个新的文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cat file1.txt file2.txt &amp;gt; newfile.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;向文件追加内容：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;echo &amp;quot;附加的文本&amp;quot; &amp;gt;&amp;gt; filename.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示文件中的特殊字符：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cat -A filename.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 cat 处理大文件时需谨慎，因为它会一次性加载整个文件到内存中。&lt;/li&gt;
&lt;li&gt;当直接从终端输入数据给 cat 命令时，使用 Ctrl+D 表示输入结束。&lt;/li&gt;
&lt;li&gt;在脚本中使用 cat 输出内容时，注意避免不必要的性能开销，特别是在循环中频繁读取文件时。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分页显示文件内容less&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分页显示文件内容less&#34;&gt;#&lt;/a&gt; 分页显示文件内容（less）&lt;/h4&gt;
&lt;p&gt;less 命令与 more 类似，也是分页显示文件内容，但与 more 不同的是，less 支持搜索功能，可以快速定位到指定内容。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;less [选项] [文件名]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数与选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-S：节省屏幕空间，删除多余的空行。&lt;/li&gt;
&lt;li&gt;-X：不使用临时文件。&lt;/li&gt;
&lt;li&gt;-R：显示颜色和格式控制字符。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看文件内容：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;less filename.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;查看管道输出的内容：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ls | less&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;less 支持前后翻页和搜索功能，更加灵活。&lt;/li&gt;
&lt;li&gt;less 在查看文件时，可以通过键盘操作进行导航：
&lt;ul&gt;
&lt;li&gt;q：退出 less。&lt;/li&gt;
&lt;li&gt;b：向上滚动一页。&lt;/li&gt;
&lt;li&gt;f：向下滚动一页。&lt;/li&gt;
&lt;li&gt;/：搜索字符串。&lt;/li&gt;
&lt;li&gt;n：跳到下一个匹配项。&lt;/li&gt;
&lt;li&gt;N：跳到上一个匹配项。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分页显示文件内容more&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分页显示文件内容more&#34;&gt;#&lt;/a&gt; 分页显示文件内容（more）&lt;/h4&gt;
&lt;p&gt;more 命令用于分页显示文件内容，在屏幕上显示一页内容，用户可以上下移动，按空格键或回车键继续显示下一页。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;more [选项] [文件名]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数与选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-d：显示帮助信息。&lt;/li&gt;
&lt;li&gt;-f：忽略换行符，强制将文件作为一个整体显示。&lt;/li&gt;
&lt;li&gt;-s：将连续的空白行压缩为一行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看文件内容：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;more filename.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;查看管道输出的内容：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ls | more&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;more 只能向前翻页，不能向后翻页。&lt;/li&gt;
&lt;li&gt;more 不支持搜索功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;显示文件的前几行head&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#显示文件的前几行head&#34;&gt;#&lt;/a&gt; 显示文件的前几行（head）&lt;/h4&gt;
&lt;p&gt;head 命令在 Linux 系统中用于显示文本文件的开头部分内容。它通常用于查看大文件的前几行，而无需加载整个文件到内存中。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;head [选项] 文件名&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数和选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-n 或 --lines：指定显示的行数，默认为 10 行。&lt;/li&gt;
&lt;li&gt;-q 或 --quiet：不打印文件名。&lt;/li&gt;
&lt;li&gt;-v 或 --version：显示版本信息。&lt;/li&gt;
&lt;li&gt;-h 或 --help：显示帮助信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显示文件的前 10 行&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;head file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示文件的前 5 行&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;head -n 5 file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
或者&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;head --lines=5 file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示多个文件的前 10 行，并在每个文件前加上文件名&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;head file1.txt file2.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示多个文件的前 5 行，不打印文件名&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;head -n 5 -q file1.txt file2.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
或者&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;head --lines=5 --quiet file1.txt file2.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;先通过 cat 命令读取 file.txt 的全部内容，然后通过 head 命令显示前 10 行&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cat file.txt | head -n 10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;将 file.txt 的前 10 行输出到 output.txt 文件中&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;head file.txt &amp;gt; output.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认显示行数：如果不指定 -n 选项，默认显示 10 行。&lt;/li&gt;
&lt;li&gt;文件名显示：当处理多个文件时，默认会显示每个文件的名称。如果不需要显示文件名，可以使用 -q 选项。&lt;/li&gt;
&lt;li&gt;空文件处理：如果文件为空，head 将不会输出任何内容。&lt;/li&gt;
&lt;li&gt;管道结合使用：head 常常与 cat、grep、sort 等命令结合使用，处理文本文件的前几行数据。&lt;/li&gt;
&lt;li&gt;性能考虑：对于非常大的文件，使用 head 可以避免加载整个文件到内存中，提高效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;显示文件后几行tail&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#显示文件后几行tail&#34;&gt;#&lt;/a&gt; 显示文件后几行（tail）&lt;/h4&gt;
&lt;p&gt;tail 命令在 Linux 系统中用于显示文本文件的末尾部分内容。它通常用于查看大文件的最后几行，而无需加载整个文件到内存中。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;tail [选项] 文件名&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数和选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-n 或 --lines：指定显示的行数，默认为 10 行。&lt;/li&gt;
&lt;li&gt;-f 或 --follow：实时跟踪文件的变化。&lt;/li&gt;
&lt;li&gt;-q 或 --quiet：不打印文件名。&lt;/li&gt;
&lt;li&gt;-v 或 --version：显示版本信息。&lt;/li&gt;
&lt;li&gt;-h 或 --help：显示帮助信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显示文件的最后 10 行&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tail file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示文件的最后 5 行&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tail -n 5 file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
或者&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tail --lines=5 file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示多个文件的最后 10 行，并在每个文件前加上文件名。&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tail file1.txt file2.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示多个文件的最后 5 行，不打印文件名&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tail -n 5 -q file1.txt file2.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
或者&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tail --lines=5 --quiet file1.txt file2.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;实时显示 file.txt 的新内容，直到手动中断（通常使用 Ctrl+C）&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tail -f file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;先通过 cat 命令读取 file.txt 的全部内容，然后通过 tail 命令显示最后 10 行&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cat file.txt | tail -n 10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示文件的最后 10 行，并输出到另一个文件&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tail file.txt &amp;gt; output.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认显示行数：如果不指定 -n 选项，默认显示 10 行。&lt;/li&gt;
&lt;li&gt;文件名显示：当处理多个文件时，默认会显示每个文件的名称。如果不需要显示文件名，可以使用 -q 选项。&lt;/li&gt;
&lt;li&gt;空文件处理：如果文件为空，tail 将不会输出任何内容。&lt;/li&gt;
&lt;li&gt;实时监控：使用 -f 选项可以实时监控文件的变化，非常适合监控日志文件。&lt;/li&gt;
&lt;li&gt;性能考虑：对于非常大的文件，使用 tail 可以避免加载整个文件到内存中，提高效率。&lt;/li&gt;
&lt;li&gt;中断实时监控：实时监控文件时，可以通过按下 Ctrl+C 来中断监控。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;文件搜索grep&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文件搜索grep&#34;&gt;#&lt;/a&gt; 文件搜索（grep）&lt;/h4&gt;
&lt;p&gt;grep 是一个强大的文本搜索工具，用于在文件中查找特定的字符串或模式。它支持正则表达式的匹配，可以在单个文件或多个文件中进行搜索。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;grep [选项] 模式 [文件名]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数与选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-i, --ignore-case：忽略大小写差异。&lt;/li&gt;
&lt;li&gt;-v, --invert-match：显示不匹配模式的行。&lt;/li&gt;
&lt;li&gt;-n, --line-number：显示匹配行的行号。&lt;/li&gt;
&lt;li&gt;-l, --files-with-matches：只列出包含匹配行的文件名。&lt;/li&gt;
&lt;li&gt;-L, --files-without-matches：只列出不包含匹配行的文件名。&lt;/li&gt;
&lt;li&gt;-r, --recursive：递归地搜索目录及其子目录。&lt;/li&gt;
&lt;li&gt;-H, --with-filename：在输出中显示文件名。&lt;/li&gt;
&lt;li&gt;-A NUM, --after-context=NUM：显示匹配行之后的 NUM 行。&lt;/li&gt;
&lt;li&gt;-B NUM, --before-context=NUM：显示匹配行之前的 NUM 行。&lt;/li&gt;
&lt;li&gt;-C NUM, --context=NUM：显示匹配行周围的 NUM 行。&lt;/li&gt;
&lt;li&gt;-e PATTERN, --regexp=PATTERN：指定一个或多个模式。&lt;/li&gt;
&lt;li&gt;-E, --extended-regexp：使用扩展正则表达式。&lt;/li&gt;
&lt;li&gt;-F, --fixed-strings：将模式视为固定字符串，而不是正则表达式。&lt;/li&gt;
&lt;li&gt;-m NUM, --max-count=NUM：最多显示 NUM 个匹配行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在文件中搜索特定字符串：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;grep &amp;quot;example&amp;quot; filename.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;忽略大小写搜索：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;grep -i &amp;quot;example&amp;quot; filename.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示匹配行的行号：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;grep -n &amp;quot;example&amp;quot; filename.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示不匹配模式的行：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;grep -v &amp;quot;example&amp;quot; filename.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;只列出包含匹配行的文件名：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;grep -l &amp;quot;example&amp;quot; filename1.txt filename2.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;递归搜索目录及其子目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;grep -r &amp;quot;example&amp;quot; /path/to/directory&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示匹配行周围的上下文：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;grep -C 5 &amp;quot;example&amp;quot; filename.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;使用扩展正则表达式：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;grep -E &amp;quot;example|test&amp;quot; filename.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;将模式视为固定字符串：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;grep -F &amp;quot;example&amp;quot; filename.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;搜索多个模式：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;grep -e &amp;quot;example&amp;quot; -e &amp;quot;test&amp;quot; filename.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正则表达式的正确使用：确保正则表达式的正确性和效率，避免复杂的正则表达式导致性能问题。&lt;/li&gt;
&lt;li&gt;递归搜索时要谨慎：使用 -r 选项递归搜索目录时，确保范围适当，避免搜索不必要的文件或目录。&lt;/li&gt;
&lt;li&gt;忽略大小写的使用：如果不需要区分大小写，可以使用 -i 选项，使搜索更加宽松。&lt;/li&gt;
&lt;li&gt;上下文显示：使用 -A, -B, -C 选项可以显示匹配行周围的上下文，有助于理解匹配内容的上下文关系。&lt;/li&gt;
&lt;li&gt;性能考虑：对于大量数据的搜索，考虑使用 egrep 或 fgrep 命令，它们在某些场景下可能更快。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;文本流编辑器sed&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文本流编辑器sed&#34;&gt;#&lt;/a&gt; 文本流编辑器（sed）&lt;/h4&gt;
&lt;p&gt;sed（Stream Editor）命令在 Linux 系统中用于文本文件的过滤和转换。它可以用来执行各种文本编辑任务，如替换字符串、插入行、删除行等。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;sed [选项] &#39;命令&#39; 文件名&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数和选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-e 或 --expression：添加一个编辑命令。&lt;/li&gt;
&lt;li&gt;-f 或 --file：从文件中读取编辑命令。&lt;/li&gt;
&lt;li&gt;-i 或 --in-place：直接修改文件内容。&lt;/li&gt;
&lt;li&gt;-n 或 --quiet：只打印显式指定的行。&lt;/li&gt;
&lt;li&gt;-r 或 --regexp：使用扩展正则表达式。&lt;/li&gt;
&lt;li&gt;-u 或 --unbuffered：逐行读取和输出。&lt;/li&gt;
&lt;li&gt;-v 或 --version：显示版本信息。&lt;/li&gt;
&lt;li&gt;-h 或 --help：显示帮助信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;命令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;替换（s）：用于替换文本中的字符串。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;s/pattern/replacement/flags&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;pattern：要匹配的模式。&lt;/li&gt;
&lt;li&gt;replacement：替换后的字符串。&lt;/li&gt;
&lt;li&gt;flags：可选标志，如 g（全局替换）、p（打印替换后的行）等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sed &amp;#x27;s/pattern/replacement/g&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;插入行（i）：在当前行之前插入一行或多行文本。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;address i\&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;text&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;address：指定在哪一行插入。&lt;/li&gt;
&lt;li&gt;text：要插入的文本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sed &amp;#x27;1i\&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;New line here&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;追加（a）：在当前行之后插入一行或多行文本。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;address a\&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;text&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;address：指定在哪一行追加。&lt;/li&gt;
&lt;li&gt;text：要追加的文本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sed &amp;#x27;2a\&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Another new line&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除（d）：删除指定的行。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;address d&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;address：指定要删除的行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sed &amp;#x27;2d&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打印（p）：打印指定的行。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;address p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;address：指定要打印的行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sed &amp;#x27;2p&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;行号（=）：打印行号。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;address =&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;address：指定打印行号的位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sed &amp;#x27;=; 2=&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;标签（:）：定义一个标签。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;:label&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;label：定义的标签名称。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sed &amp;#x27;:loop&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;n&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/pattern/b loop&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;p&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分支（b）：跳转到指定的标签。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;b label&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;label：跳转的目标标签。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sed &amp;#x27;:loop&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;n&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/pattern/b loop&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;p&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保持空间（h）：将当前行复制到保持空间。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;h&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sed &amp;#x27;1h&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取空间（g）：将保持空间的内容复制到模式空间。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sed &amp;#x27;2g&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;读取外部文件（r）：从外部文件读取一行并追加到当前行。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;r filename&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sed &amp;#x27;2r otherfile.txt&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写入外部文件（w）：将当前行写入到外部文件。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;w filename&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sed &amp;#x27;2w output.txt&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;条件命令（t）：如果上一个替换命令成功，则跳转到指定的标签。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;t label&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sed &amp;#x27;s/pattern/replacement/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;t success&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;地址范围（address1,address2）：指定命令作用的行范围。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;address1,address2 command&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sed &amp;#x27;2,5 s/pattern/replacement/&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;正则表达式范围（/regex1/,/regex2/）：指定命令作用的行范围。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;/regex1/,/regex2/ command&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sed &amp;#x27;/start/,/end/ s/pattern/replacement/&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命令格式：sed 命令的基本格式为 sed ‘命令’ 文件名。命令通常包括地址、命令和动作三部分。&lt;/li&gt;
&lt;li&gt;正则表达式：sed 支持基本正则表达式（BRE）和扩展正则表达式（ERE）。使用 -r 选项可以启用扩展正则表达式。&lt;/li&gt;
&lt;li&gt;直接修改文件：使用 -i 选项可以直接修改文件内容。为了避免意外覆盖，建议使用备份选项，例如 -i.bak。&lt;/li&gt;
&lt;li&gt;多条命令：可以使用 -e 选项多次添加命令，或者将多条命令写入一个文件并通过 -f 选项读取。&lt;/li&gt;
&lt;li&gt;输出控制：使用 -n 选项可以只打印显式指定的行。&lt;/li&gt;
&lt;li&gt;性能考虑：对于非常大的文件，sed 可以高效地处理文本，因为它逐行读取和处理文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;文本处理工具awk&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文本处理工具awk&#34;&gt;#&lt;/a&gt; 文本处理工具（awk）&lt;/h4&gt;
&lt;p&gt;awk 是一种强大的文本处理工具，在 Linux 系统中广泛用于解析和处理文本文件。它可以用来提取、筛选、修改和生成文本数据。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;awk [选项] &amp;#123;命令&amp;#125; 文件名&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数和选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-F 或 --field-separator：设置字段分隔符。&lt;/li&gt;
&lt;li&gt;-v 或 --assign：定义变量及其值。&lt;/li&gt;
&lt;li&gt;-f 或 --file：从文件中读取 awk 脚本。&lt;/li&gt;
&lt;li&gt;-i 或 --inplace：直接修改文件内容。&lt;/li&gt;
&lt;li&gt;-W 或 --version：显示版本信息。&lt;/li&gt;
&lt;li&gt;-h 或 --help：显示帮助信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;命令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;打印（print）：打印指定的字段或字符串。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;print expression&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;expression：可以是字段 $1, $2, … 或任何表达式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;awk &amp;#x27;&amp;#123;print $1&amp;#125;&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;条件判断（if）：根据条件执行不同的命令。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;if (condition) &amp;#123; commands &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;condition：条件表达式。&lt;/li&gt;
&lt;li&gt;commands：符合条件时执行的命令。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;awk &amp;#x27;$1 == &amp;quot;value&amp;quot; &amp;#123;print $2&amp;#125;&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;赋值（=）：对变量进行赋值。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;variable = value&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;variable：变量名。&lt;/li&gt;
&lt;li&gt;value：赋值的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;awk &amp;#x27;&amp;#123;sum = $1 + $2; print sum&amp;#125;&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数组（array）：使用数组存储和处理数据。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;array[index] = value&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;array：数组名。&lt;/li&gt;
&lt;li&gt;index：数组索引。&lt;/li&gt;
&lt;li&gt;value：赋值的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;awk &amp;#x27;&amp;#123;a[$1]++; print a[$1]&amp;#125;&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;循环（for）：循环遍历数组或其他数据结构。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (init; condition; increment) &amp;#123; commands &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;init：初始化语句。&lt;/li&gt;
&lt;li&gt;condition：循环条件。&lt;/li&gt;
&lt;li&gt;increment：增量语句。&lt;/li&gt;
&lt;li&gt;commands：循环体内的命令。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;awk &amp;#x27;&amp;#123;for (i=1; i&amp;lt;=NF; i++) print $i&amp;#125;&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;循环遍历数组（for）：遍历数组中的所有元素。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (key in array) &amp;#123; commands &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;key：数组的键。&lt;/li&gt;
&lt;li&gt;array：数组名。&lt;/li&gt;
&lt;li&gt;commands：循环体内的命令。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;awk &amp;#x27;&amp;#123;a[$1]++; print a[$1]&amp;#125;&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数（function）：定义自定义函数。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function name(args) &amp;#123; commands &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;name：函数名。&lt;/li&gt;
&lt;li&gt;args：参数列表。&lt;/li&gt;
&lt;li&gt;commands：函数体内的命令。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function sum(a, b) &amp;#123; return a + b &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;awk &amp;#x27;&amp;#123;print sum($1, $2)&amp;#125;&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;条件分支（if-else）：根据条件执行不同的命令。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;if (condition) &amp;#123; commands1 &amp;#125; else &amp;#123; commands2 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;condition：条件表达式。&lt;/li&gt;
&lt;li&gt;commands1：符合条件时执行的命令。&lt;/li&gt;
&lt;li&gt;commands2：不符合条件时执行的命令。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;awk &amp;#x27;$1 &amp;gt; 10 &amp;#123;print $1&amp;#125; else &amp;#123;print $2&amp;#125;&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;条件分支（if-elif-else）：多个条件分支。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;if (condition1) &amp;#123; commands1 &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;else if (condition2) &amp;#123; commands2 &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;else &amp;#123; commands3 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;condition1, condition2, …：条件表达式。&lt;/li&gt;
&lt;li&gt;commands1, commands2, …：符合条件时执行的命令。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;awk &amp;#x27;$1 &amp;gt; 10 &amp;#123;print $1&amp;#125; else if ($1 &amp;lt; 5) &amp;#123;print $2&amp;#125; else &amp;#123;print $3&amp;#125;&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;退出循环（next）：退出当前循环。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;next&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;awk &amp;#x27;$1 == &amp;quot;exit&amp;quot; &amp;#123;next&amp;#125; &amp;#123;print $1&amp;#125;&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结束处理（END）：在处理完所有输入后执行命令。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;END &amp;#123; commands &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;awk &amp;#x27;&amp;#123;sum += $1&amp;#125; END &amp;#123;print sum&amp;#125;&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开始处理（BEGIN）：在处理任何输入之前执行命令。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;BEGIN &amp;#123; commands &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;awk &amp;#x27;BEGIN &amp;#123;print &amp;quot;Starting...&amp;quot;&amp;#125; &amp;#123;print $1&amp;#125;&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;条件分支（? :）：三元条件运算符。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;condition ? expr1 : expr2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;awk &amp;#x27;$1 &amp;gt; 10 ? print $1 : print $2&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自定义分隔符（FS）：设置字段分隔符。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;FS = &amp;quot;separator&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;awk -F: &amp;#x27;&amp;#123;print $1&amp;#125;&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;记录计数（NR）：记录当前处理的行数。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;NR&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;awk &amp;#x27;NR % 2 == 0 &amp;#123;print $1&amp;#125;&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字段计数（NF）：记录当前行的字段数。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;NF&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;awk &amp;#x27;NF &amp;gt; 2 &amp;#123;print $1&amp;#125;&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;记录本身（$0）：记录当前行的内容。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;awk &amp;#x27;&amp;#123;print $0&amp;#125;&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字符串操作（length, substr, index, tolower, toupper）：字符串长度、子串、索引、转换大小写等。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;length(string)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;substr(string, start, length)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;index(string, substring)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;tolower(string)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;toupper(string)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;awk &amp;#x27;&amp;#123;print length($1), tolower($2)&amp;#125;&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数学函数（sin, cos, exp, log, sqrt, int）：数学函数。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sin(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cos(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;exp(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;log(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sqrt(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int(x)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;awk &amp;#x27;&amp;#123;print sqrt($1)&amp;#125;&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数组操作（(split, asprintf）：分割字符串为数组。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;split(string, array, separator)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;asprintf(format, ...)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;awk &amp;#x27;&amp;#123;split($1, a, &amp;quot;:&amp;quot;); print a[1]&amp;#125;&amp;#x27; file.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模式和命令：awk 命令的基本格式为 awk ‘模式 {命令}’ 文件名。模式用于匹配行，命令用于处理匹配的行。&lt;/li&gt;
&lt;li&gt;变量和函数：awk 支持内置变量（如 NR、NF）和用户定义的变量。还可以使用内置函数（如 sum、print）进行计算和输出。&lt;/li&gt;
&lt;li&gt;分隔符：使用 -F 选项可以设置自定义的字段分隔符，这在处理 CSV 或其他格式的文件时非常有用。&lt;/li&gt;
&lt;li&gt;多条件匹配：可以使用逻辑运算符（如 &amp;amp;&amp;amp;、||）进行多条件匹配。&lt;/li&gt;
&lt;li&gt;数组和循环：awk 支持数组和循环结构，可以进行复杂的数据处理。&lt;/li&gt;
&lt;li&gt;脚本文件：可以将多个 awk 命令写入一个文件，并通过 -f 选项读取。&lt;/li&gt;
&lt;li&gt;性能考虑：对于非常大的文件，awk 可以高效地处理文本，因为它逐行读取和处理文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;文件编辑vivim&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文件编辑vivim&#34;&gt;#&lt;/a&gt; 文件编辑（vi，vim）&lt;/h4&gt;
&lt;p&gt;vi 和 vim（Vi IMproved）是 Linux 中广泛使用的文本编辑器。它们功能强大且灵活，适用于从简单的文本编辑到复杂的脚本编写等多种场景。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;vi [选项] 文件名&lt;/code&gt; 和 &lt;code&gt;vim [选项] 文件名&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件名：要编辑的文件名。如果没有指定文件名，vi 或 vim 将打开一个空白文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-c command：执行完 command 后退出。&lt;/li&gt;
&lt;li&gt;-e：编辑最后一个被编辑的文件。&lt;/li&gt;
&lt;li&gt;-n：以行号模式启动。&lt;/li&gt;
&lt;li&gt;-R：只读模式。&lt;/li&gt;
&lt;li&gt;+ command：执行完 command 后继续编辑。&lt;/li&gt;
&lt;li&gt;+ line：从指定行开始编辑。&lt;/li&gt;
&lt;li&gt;-V n：在 n 行的垂直分割窗口中打开文件。&lt;/li&gt;
&lt;li&gt;-S session：使用会话文件恢复编辑环境。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;工作模式&lt;/p&gt;
&lt;p&gt;vi 和 vim 有三种主要工作模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命令模式（Command Mode）：默认模式，用于输入编辑命令。&lt;/li&gt;
&lt;li&gt;插入模式（Insert Mode）：用于输入文本。&lt;/li&gt;
&lt;li&gt;末行模式（Ex Mode）：用于执行命令行命令。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常用命令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命令模式：
&lt;ul&gt;
&lt;li&gt;i：进入插入模式，在光标当前位置插入文本。&lt;/li&gt;
&lt;li&gt;a：进入插入模式，在光标当前位置之后插入文本。&lt;/li&gt;
&lt;li&gt;o：在当前行下一行新开一行并进入插入模式。&lt;/li&gt;
&lt;li&gt;x：删除光标所在字符。&lt;/li&gt;
&lt;li&gt;dd：删除当前行。&lt;/li&gt;
&lt;li&gt;yy：复制当前行。&lt;/li&gt;
&lt;li&gt;p：粘贴已复制或剪切的内容。&lt;/li&gt;
&lt;li&gt;u：撤销上一步操作。&lt;/li&gt;
&lt;li&gt;Ctrl + r：重做上一步操作。&lt;/li&gt;
&lt;li&gt;:：进入末行模式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;插入模式：
&lt;ul&gt;
&lt;li&gt;Esc：返回命令模式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;末行模式：
&lt;ul&gt;
&lt;li&gt;:w：保存文件。&lt;/li&gt;
&lt;li&gt;:q：退出编辑器。&lt;/li&gt;
&lt;li&gt;:q!：强制退出，不保存修改。&lt;/li&gt;
&lt;li&gt;:wq：保存并退出。&lt;/li&gt;
&lt;li&gt;:set nu：显示行号。&lt;/li&gt;
&lt;li&gt;:set nonu：取消显示行号。&lt;/li&gt;
&lt;li&gt;:help：查看帮助文档。&lt;/li&gt;
&lt;li&gt;:set number：显示行号。&lt;/li&gt;
&lt;li&gt;:set nocursorline：取消高亮显示当前行。&lt;/li&gt;
&lt;li&gt;:set cursorline：高亮显示当前行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打开一个名为 example.txt 的文件进行编辑：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;vi example.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;进程和系统管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#进程和系统管理&#34;&gt;#&lt;/a&gt; 进程和系统管理&lt;/h3&gt;
&lt;h4 id=&#34;显示进程信息ps补充&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#显示进程信息ps补充&#34;&gt;#&lt;/a&gt; 显示进程信息（ps）补充&lt;/h4&gt;
&lt;h4 id=&#34;查看系统资源top&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看系统资源top&#34;&gt;#&lt;/a&gt; 查看系统资源（top)&lt;/h4&gt;
&lt;p&gt;top 命令是一个实时监控系统资源状态的工具，主要用于查看和管理正在运行的进程。它可以显示系统的 CPU 使用率、内存使用情况、进程列表等信息，并且可以动态更新这些信息。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;top [选项]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数与选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;-d：指定更新间隔时间（秒）。&lt;/li&gt;
&lt;li&gt;-p：指定监控特定 PID 的进程。&lt;/li&gt;
&lt;li&gt;-q：高优先级模式，减少系统调度开销。&lt;/li&gt;
&lt;li&gt;-c：显示完整的命令行。&lt;/li&gt;
&lt;li&gt;-S：累积模式，显示每个进程自启动以来的 CPU 使用情况。&lt;/li&gt;
&lt;li&gt;-s：安全模式，禁用信号发送功能。&lt;/li&gt;
&lt;li&gt;-n：指定运行次数，之后退出。&lt;/li&gt;
&lt;li&gt;-b：批处理模式，输出到标准输出或重定向到文件。&lt;/li&gt;
&lt;li&gt;-h：显示帮助信息。&lt;/li&gt;
&lt;li&gt;-V：显示版本信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认运行 top 命令：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;top&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;指定更新间隔时间为 2 秒：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;top -d 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;监控特定 PID 的进程：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;top -p 1234&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示完整的命令行：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;top -c&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;累积模式显示每个进程的 CPU 使用情况：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;top -S&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;安全模式禁用信号发送功能：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;top -s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;指定运行次数后退出：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;top -n 5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;批处理模式输出到文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;top&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示帮助信息：：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;top -h&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示版本信息：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;top -V&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;交互式操作&lt;br&gt;
一旦进入 top 命令界面，可以通过以下按键进行各种操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;h：显示帮助信息。&lt;/li&gt;
&lt;li&gt;k：发送信号终止进程。&lt;/li&gt;
&lt;li&gt;r：重新安排进程的优先级。&lt;/li&gt;
&lt;li&gt;P：按 CPU 使用率排序。&lt;/li&gt;
&lt;li&gt;M：按内存使用率排序。&lt;/li&gt;
&lt;li&gt;S：按累积 CPU 使用率排序。&lt;/li&gt;
&lt;li&gt;f：定制显示列。&lt;/li&gt;
&lt;li&gt;q：退出 top 命令。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更新间隔时间：使用 -d 选项可以设置更新间隔时间，通常建议不要设置得太短，以免增加系统负担。&lt;/li&gt;
&lt;li&gt;监控特定进程：使用 -p 选项可以监控特定 PID 的进程，适用于监控关键进程的状态。&lt;/li&gt;
&lt;li&gt;批处理模式：使用 -b 选项可以将 top 的输出重定向到文件，适用于自动化监控和日志记录。&lt;/li&gt;
&lt;li&gt;安全模式：使用 -s 选项可以禁用信号发送功能，适用于安全环境下的监控。&lt;/li&gt;
&lt;li&gt;累积模式：使用 -S 选项可以显示每个进程自启动以来的 CPU 使用情况，适用于长时间运行的监控任务。&lt;/li&gt;
&lt;li&gt;显示完整的命令行：使用 -c 选项可以显示完整的命令行，便于识别进程的具体信息。&lt;/li&gt;
&lt;li&gt;系统负载：top 命令本身也会占用一定的系统资源，因此在高负载环境下应谨慎使用。&lt;/li&gt;
&lt;li&gt;信号发送：使用 k 键可以发送信号终止进程，但应谨慎操作，以免误杀关键进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;发送信号给进程kill补充&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#发送信号给进程kill补充&#34;&gt;#&lt;/a&gt; 发送信号给进程（kill）补充&lt;/h4&gt;
&lt;h4 id=&#34;发送信号给多个进程killall补充&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#发送信号给多个进程killall补充&#34;&gt;#&lt;/a&gt; 发送信号给多个进程（killall）补充&lt;/h4&gt;
&lt;h4 id=&#34;设置进程优先级nice补充&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#设置进程优先级nice补充&#34;&gt;#&lt;/a&gt; 设置进程优先级（nice）补充&lt;/h4&gt;
&lt;h4 id=&#34;编辑进程优先级renice补充&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#编辑进程优先级renice补充&#34;&gt;#&lt;/a&gt; 编辑进程优先级（renice）补充&lt;/h4&gt;
&lt;h4 id=&#34;在后台运行命令nohup补充&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在后台运行命令nohup补充&#34;&gt;#&lt;/a&gt; 在后台运行命令（nohup）补充&lt;/h4&gt;
&lt;h4 id=&#34;将作业放到后台运行bg补充&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#将作业放到后台运行bg补充&#34;&gt;#&lt;/a&gt; 将作业放到后台运行（bg）补充&lt;/h4&gt;
&lt;h4 id=&#34;将后台作业放到前台运行fg补充&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#将后台作业放到前台运行fg补充&#34;&gt;#&lt;/a&gt; 将后台作业放到前台运行（fg）补充&lt;/h4&gt;
&lt;h3 id=&#34;网络和通信&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#网络和通信&#34;&gt;#&lt;/a&gt; 网络和通信&lt;/h3&gt;
&lt;h4 id=&#34;测试网络连通性ping补充&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#测试网络连通性ping补充&#34;&gt;#&lt;/a&gt; 测试网络连通性（ping）补充&lt;/h4&gt;
&lt;h4 id=&#34;显示数据包到达目标主机的路径traceroute补充&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#显示数据包到达目标主机的路径traceroute补充&#34;&gt;#&lt;/a&gt; 显示数据包到达目标主机的路径（traceroute）补充&lt;/h4&gt;
&lt;h4 id=&#34;显示网络连接信息netstat补充&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#显示网络连接信息netstat补充&#34;&gt;#&lt;/a&gt; 显示网络连接信息（netstat）补充&lt;/h4&gt;
&lt;h4 id=&#34;显示网络接口信息ifconfig补充&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#显示网络接口信息ifconfig补充&#34;&gt;#&lt;/a&gt; 显示网络接口信息（ifconfig）补充&lt;/h4&gt;
&lt;h4 id=&#34;远程连接ssh&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#远程连接ssh&#34;&gt;#&lt;/a&gt; 远程连接（ssh）&lt;/h4&gt;
&lt;p&gt;ssh（Secure Shell）是一个用于远程登录和管理系统的命令行工具。它通过加密连接来保证通信的安全性，广泛应用于远程服务器管理和文件传输。&lt;/p&gt;
&lt;p&gt;基本格式： &lt;code&gt;ssh [选项] [用户名@]主机名 [命令]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数与选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-l: 指定远程主机上的用户名。&lt;/li&gt;
&lt;li&gt;-p: 指定 SSH 服务的端口号。&lt;/li&gt;
&lt;li&gt;-i: 指定私钥文件。&lt;/li&gt;
&lt;li&gt;-X: 允许 X11 转发。&lt;/li&gt;
&lt;li&gt;-Y: 允许可信的 X11 转发。&lt;/li&gt;
&lt;li&gt;-D: 设置 SOCKS 代理。&lt;/li&gt;
&lt;li&gt;-N: 不执行远程命令。&lt;/li&gt;
&lt;li&gt;-T: 不分配伪终端。&lt;/li&gt;
&lt;li&gt;-A: 允许代理转发。&lt;/li&gt;
&lt;li&gt;-a: 禁止代理转发。&lt;/li&gt;
&lt;li&gt;-C: 启用压缩。&lt;/li&gt;
&lt;li&gt;-c: 指定加密算法。&lt;/li&gt;
&lt;li&gt;-v: 显示详细信息。&lt;/li&gt;
&lt;li&gt;-q: 禁用所有消息。&lt;/li&gt;
&lt;li&gt;-n: 不分配标准输入。&lt;/li&gt;
&lt;li&gt;-f: 在后台运行。&lt;/li&gt;
&lt;li&gt;-R: 远程端口转发。&lt;/li&gt;
&lt;li&gt;-L: 本地端口转发。&lt;/li&gt;
&lt;li&gt;-g: 允许远程主机连接。&lt;/li&gt;
&lt;li&gt;-o: 指定 SSH 配置选项。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;登录到 hostname 主机上的 user 用户：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ssh user@hostname&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;在 hostname 主机上的 user 用户执行 ls -l 命令：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ssh user@hostname &amp;quot;ls -l&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;使用端口号 2222 登录到 hostname 主机上的 user 用户：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ssh -p 2222 user@hostname&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;使用私钥文件～/.ssh/id_rsa 登录到 hostname 主机上的 user 用户：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ssh -i ~/.ssh/id_rsa user@hostname&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;允许 X11 转发，可以在远程主机上运行图形界面应用：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ssh -X user@hostname&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;设置本地端口 1080 作为 SOCKS 代理：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ssh -D 1080 user@hostname&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;不执行任何远程命令，只建立 SSH 连接：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ssh -N user@hostname&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;不分配伪终端，通常用于自动化脚本：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ssh -T user@hostname&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;允许代理转发：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ssh -A user@hostname&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;禁止代理转发：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ssh -a user@hostname&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;启用压缩，提高传输速度：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ssh -C user@hostname&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;指定加密算法为 aes256-cbc：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ssh -c aes256-cbc user@hostname&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示详细信息，便于调试：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ssh -v user@hostname&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;禁用所有消息，减少输出：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ssh -q user@hostname&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;不分配标准输入，通常用于后台任务：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ssh -n user@hostname&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;在后台运行 SSH 连接：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ssh -f user@hostname&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;将远程主机的 8080 端口转发到本地主机的 80 端口：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ssh -R 8080:localhost:80 user@hostname&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;将本地主机的 8080 端口转发到远程主机的 80 端口：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ssh -L 8080:localhost:80 user@hostname&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;允许远程主机连接到转发的端口：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ssh -g user@hostname&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;指定 SSH 配置选项 StrictHostKeyChecking=no：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ssh -o StrictHostKeyChecking=no user@hostname&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;端口号：确保指定了正确的端口号。默认端口号为 22，如果使用其他端口，请使用 -p 选项。&lt;/li&gt;
&lt;li&gt;私钥文件：使用私钥文件进行身份验证时，确保私钥文件的路径正确并且具有适当的权限。&lt;/li&gt;
&lt;li&gt;X11 转发：使用 -X 或 -Y 选项时，确保远程主机上安装了 X11 服务器，并且防火墙允许 X11 连接。&lt;/li&gt;
&lt;li&gt;端口转发：使用 -L 或 -R 选项时，确保防火墙规则允许转发的端口。&lt;/li&gt;
&lt;li&gt;代理转发：使用 -A 或 -a 选项时，确保代理转发符合安全策略。&lt;/li&gt;
&lt;li&gt;压缩：使用 -C 选项可以提高传输速度，但对于带宽受限的环境可能会增加 CPU 负载。&lt;/li&gt;
&lt;li&gt;详细信息：使用 -v 选项可以显示详细信息，便于调试和故障排除。&lt;/li&gt;
&lt;li&gt;安全配置：使用 -o 选项可以指定 SSH 配置选项，确保安全设置符合要求。&lt;/li&gt;
&lt;li&gt;权限问题：确保有足够的权限执行 ssh 命令。通常需要 root 权限或使用 sudo 命令。&lt;/li&gt;
&lt;li&gt;日志记录：确保 SSH 服务器的日志记录功能开启，以便跟踪和审计 SSH 连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;安全文件传输scp&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#安全文件传输scp&#34;&gt;#&lt;/a&gt; 安全文件传输（scp）&lt;/h4&gt;
&lt;p&gt;scp (Secure Copy) 是一个用于在计算机之间安全传输文件的命令行工具。它利用 SSH（Secure Shell）协议来加密传输过程，确保文件的安全性和完整性。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;scp [选项] 本地文件 远程主机:远程目录&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数与选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-r: 递归复制目录。&lt;/li&gt;
&lt;li&gt;-p: 保留文件权限、时间戳等属性。&lt;/li&gt;
&lt;li&gt;-P: 指定 SSH 的端口号。&lt;/li&gt;
&lt;li&gt;-C: 启用压缩（默认启用）。&lt;/li&gt;
&lt;li&gt;-q: 禁用进度条。&lt;/li&gt;
&lt;li&gt;-v: 显示详细信息。&lt;/li&gt;
&lt;li&gt;-i: 指定私钥文件。&lt;/li&gt;
&lt;li&gt;-B: 使用后台模式传输大文件。&lt;/li&gt;
&lt;li&gt;-3: 允许多主机之间的传输。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;scp 的命令格式可以分为几种常见的情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从本地到远程：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;scp [options] local_file user@remote_host:/remote/path&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;从远程到本地：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;scp [options] user@remote_host:/remote/path local_file&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;从远程到远程：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;scp [options] user1@remote_host1:/remote/path user2@remote_host2:/remote/path&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;从本地到本地（通过 SSH 转发）：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;scp [options] -3 local_file user@remote_host:/remote/path local_file&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从本地到远程传输文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;scp -r local_file user@remote_host:/remote/path&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;从远程到本地传输文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;scp -r user@remote_host:/remote/path local_file&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;从本地到远程传输目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;scp -r local_directory user@remote_host:/remote/path&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;从远程到本地传输目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;scp -r user@remote_host:/remote/path local_directory&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;从远程到远程传输文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;scp -r user1@remote_host1:/remote/path user2@remote_host2:/remote/pa&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;从本地到本地传输文件（通过 SSH 转发）：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;scp -3 -r local_file user@remote_host:/remote/path local_file&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;保留文件权限和时间戳：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;scp -rp local_file user@remote_host:/remote/path&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;指定 SSH 端口号：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;scp -r -P 2222 local_file user@remote_host:/remote/path&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;启用压缩：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;scp -r -C local_file user@remote_host:/remote/path&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;禁用进度条：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;scp -r -q local_file user@remote_host:/remote/path&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示详细信息：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;scp -r -v local_file user@remote_host:/remote/path&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;使用私钥文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;scp -r -i ~/.ssh/id_rsa local_file user@remote_host:/remote/path&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SSH 配置：确保 SSH 服务已经在远程主机上启动，并且有相应的用户权限。&lt;/li&gt;
&lt;li&gt;私钥文件：如果使用私钥文件进行身份验证，确保私钥文件的路径和权限正确。&lt;/li&gt;
&lt;li&gt;端口号：如果远程主机的 SSH 服务使用了非标准端口（默认为 22），需要使用 -P 选项指定端口号。&lt;/li&gt;
&lt;li&gt;递归复制：在复制目录时，务必使用 -r 选项，否则只会复制目录中的文件而不是整个目录结构。&lt;/li&gt;
&lt;li&gt;文件权限：使用 -p 选项可以保留文件的权限和时间戳，避免不必要的权限问题。&lt;/li&gt;
&lt;li&gt;压缩：默认情况下，scp 已经启用了压缩。如果网络带宽有限，可以禁用压缩以提高传输速度。&lt;/li&gt;
&lt;li&gt;后台模式：对于大文件传输，可以使用 -B 选项在后台模式下传输，避免阻塞其他任务。&lt;/li&gt;
&lt;li&gt;多主机传输：在多主机之间传输文件时，使用 -3 选项可以提高效率。&lt;/li&gt;
&lt;li&gt;安全性：确保使用强密码或密钥对进行身份验证，避免未经授权的访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;文件传输ftp&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文件传输ftp&#34;&gt;#&lt;/a&gt; 文件传输（ftp）&lt;/h4&gt;
&lt;p&gt;ftp (File Transfer Protocol) 是一个用于在计算机之间传输文件的标准协议。&lt;br&gt;
ftp 命令行工具允许用户连接到 FTP 服务器，上传、下载文件，浏览目录结构等。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;ftp [选项] [主机名]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数与选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-n: 禁止自动登录。&lt;/li&gt;
&lt;li&gt;-i: 忽略所有输入。&lt;/li&gt;
&lt;li&gt;-d: 显示调试信息。&lt;/li&gt;
&lt;li&gt;-v: 显示详细信息。&lt;/li&gt;
&lt;li&gt;-s: 从脚本文件读取命令。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是一些常用的 ftp 命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;open: 连接到 FTP 服务器。&lt;/li&gt;
&lt;li&gt;user: 登录用户名。&lt;/li&gt;
&lt;li&gt;pass: 登录密码。&lt;/li&gt;
&lt;li&gt;cd: 切换目录。&lt;/li&gt;
&lt;li&gt;pwd: 显示当前目录。&lt;/li&gt;
&lt;li&gt;ls: 列出目录内容。&lt;/li&gt;
&lt;li&gt;lcd: 切换本地目录。&lt;/li&gt;
&lt;li&gt;get: 下载文件。&lt;/li&gt;
&lt;li&gt;put: 上传文件。&lt;/li&gt;
&lt;li&gt;mget: 批量下载文件。&lt;/li&gt;
&lt;li&gt;mput: 批量上传文件。&lt;/li&gt;
&lt;li&gt;bye: 退出 FTP 会话。&lt;/li&gt;
&lt;li&gt;quit: 退出 FTP 会话。&lt;/li&gt;
&lt;li&gt;ascii: 设置文本模式。&lt;/li&gt;
&lt;li&gt;binary: 设置二进制模式。&lt;/li&gt;
&lt;li&gt;prompt: 开启或关闭提示符。&lt;/li&gt;
&lt;li&gt;rename: 重命名文件或目录。&lt;/li&gt;
&lt;li&gt;delete: 删除文件。&lt;/li&gt;
&lt;li&gt;mkdir: 创建目录。&lt;/li&gt;
&lt;li&gt;rmdir: 删除目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;连接到 FTP 服务器：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ftp example.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;登录 FTP 服务器：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;user username&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pass password&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;切换目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cd /path/to/directory&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;列出目录内容：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ls&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;切换本地目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;lcd /local/path&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;下载文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;get remote_file local_file&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;上传文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;put local_file remote_file&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;批量下载文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mget *.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;批量上传文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mput *.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;设置文本模式：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ascii&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;设置二进制模式：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;binary&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;退出 FTP 会话：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;bye&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;重命名文件或目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;rename old_name new_name&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;删除文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;delete file_name&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;创建目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mkdir directory_name&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;删除目录：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;rmdir directory_name&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安全性：FTP 传输默认是明文传输，容易被截获。建议使用更安全的协议，如 SFTP 或 FTPS。&lt;/li&gt;
&lt;li&gt;认证信息：登录 FTP 服务器时，确保使用正确的用户名和密码。&lt;/li&gt;
&lt;li&gt;目录结构：在 FTP 服务器上切换目录时，注意当前目录的位置，以免误操作。&lt;/li&gt;
&lt;li&gt;文件类型：根据文件类型选择正确的传输模式（ASCII 或 Binary）。&lt;/li&gt;
&lt;li&gt;批量传输：批量上传或下载文件时，确保本地目录和远程目录匹配。&lt;/li&gt;
&lt;li&gt;脚本文件：可以将常用命令写入脚本文件，通过 -s 选项执行脚本。&lt;/li&gt;
&lt;li&gt;资源管理：长时间运行 FTP 会话时，注意监控系统资源使用情况，避免占用过多带宽和磁盘空间。&lt;/li&gt;
&lt;li&gt;防火墙和路由器设置：确保 FTP 服务器的 IP 地址和端口号（默认为 21）没有被防火墙或路由器阻止。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;系统信息和维护&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#系统信息和维护&#34;&gt;#&lt;/a&gt; 系统信息和维护&lt;/h3&gt;
&lt;h4 id=&#34;系统基本信息查看uname&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#系统基本信息查看uname&#34;&gt;#&lt;/a&gt; 系统基本信息查看（uname）&lt;/h4&gt;
&lt;p&gt;uname（Unix Name）命令用于显示系统的基本信息，包括内核名称、主机名、操作系统版本等。它是一个常用的系统信息查询工具，广泛应用于系统管理和诊断。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;uname [选项]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数与选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-a：显示所有信息。&lt;/li&gt;
&lt;li&gt;-s：显示内核名称。&lt;/li&gt;
&lt;li&gt;-n：显示主机名。&lt;/li&gt;
&lt;li&gt;-r：显示内核版本号。&lt;/li&gt;
&lt;li&gt;-v：显示内核发布版本。&lt;/li&gt;
&lt;li&gt;-m：显示机器硬件名称。&lt;/li&gt;
&lt;li&gt;-p：显示处理器类型。&lt;/li&gt;
&lt;li&gt;-i：显示硬件平台。&lt;/li&gt;
&lt;li&gt;-o：显示操作系统名称。&lt;/li&gt;
&lt;li&gt;-r：显示内核版本号。&lt;/li&gt;
&lt;li&gt;-v：显示内核版本。&lt;/li&gt;
&lt;li&gt;-m：显示机器硬件名称。&lt;/li&gt;
&lt;li&gt;-p：显示处理器类型。&lt;/li&gt;
&lt;li&gt;-i：显示硬件平台。&lt;/li&gt;
&lt;li&gt;-o：显示操作系统名称。&lt;/li&gt;
&lt;li&gt;-v：显示内核版本。&lt;/li&gt;
&lt;li&gt;-r：显示内核版本号。&lt;/li&gt;
&lt;li&gt;-m：显示机器硬件名称。&lt;/li&gt;
&lt;li&gt;-p：显示处理器类型。&lt;/li&gt;
&lt;li&gt;-i：显示硬件平台。&lt;/li&gt;
&lt;li&gt;-o：显示操作系统名称。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显示所有信息：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;uname -a&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示内核名称：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;uname -s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示主机名：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;uname -n&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示内核版本号：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;uname -r&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示内核发布版本：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;uname -v&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示机器硬件名称：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;uname -m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示处理器类型：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;uname -p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示硬件平台：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;uname -i&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示操作系统名称：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;uname -o&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例输出&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显示所有信息：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Linux myhost 5.4.0-77-generic #86-Ubuntu SMP Thu Sep 16 22:10:41 UTC &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示内核名称：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Linux&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示主机名：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;myhost&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示内核版本号：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;5.4.0-77-generic&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示内核发布版本：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;86-Ubuntu SMP Thu Sep 16 22:10:41 UTC 2021&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示机器硬件名称：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;x86_64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示处理器类型：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;x86_64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示硬件平台：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;x86_64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示操作系统名称：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;GNU/Linux&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内核名称：使用 -s 选项可以显示内核名称，通常为 Linux。&lt;/li&gt;
&lt;li&gt;主机名：使用 -n 选项可以显示主机名，这对于网络管理非常有用。&lt;/li&gt;
&lt;li&gt;内核版本号：使用 -r 选项可以显示内核版本号，例如 5.4.0-77-generic。&lt;/li&gt;
&lt;li&gt;内核发布版本：使用 -v 选项可以显示内核发布版本，例如 #86-Ubuntu SMP Thu Sep 16 22:10:41 UTC 2021。&lt;/li&gt;
&lt;li&gt;机器硬件名称：使用 -m 选项可以显示机器硬件名称，例如 x86_64。&lt;/li&gt;
&lt;li&gt;处理器类型：使用 -p 选项可以显示处理器类型，例如 x86_64。&lt;/li&gt;
&lt;li&gt;硬件平台：使用 -i 选项可以显示硬件平台，例如 x86_64。&lt;/li&gt;
&lt;li&gt;操作系统名称：使用 -o 选项可以显示操作系统名称，例如 GNU/Linux。&lt;/li&gt;
&lt;li&gt;所有信息：使用 -a 选项可以显示所有系统信息，这对于系统管理和诊断非常有用。&lt;/li&gt;
&lt;li&gt;自动化脚本：uname 命令的输出可以方便地用于自动化脚本中，例如提取特定信息进行进一步处理。&lt;/li&gt;
&lt;li&gt;版本一致性：确保内核版本和操作系统版本的一致性，避免因版本不一致导致的问题。&lt;/li&gt;
&lt;li&gt;系统升级：在进行系统升级时，可以通过 uname 命令确认当前内核版本，确保升级过程顺利。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;查看系统磁盘使用情况df&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看系统磁盘使用情况df&#34;&gt;#&lt;/a&gt; 查看系统磁盘使用情况（df）&lt;/h4&gt;
&lt;p&gt;df（disk free）命令用于显示文件系统的磁盘空间使用情况。它可以帮助用户了解各个分区的使用情况，包括总容量、已用空间、可用空间等信息。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;df [选项]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数与选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-h, --human-readable：以人类易读的格式显示磁盘空间（如 K、M、G 等）。&lt;/li&gt;
&lt;li&gt;-H, --si：以 1000 字节为单位显示磁盘空间（如 K、M、G 等）。&lt;/li&gt;
&lt;li&gt;-k, --kilobytes：以千字节（KB）为单位显示磁盘空间。&lt;/li&gt;
&lt;li&gt;-m, --megabytes：以兆字节（MB）为单位显示磁盘空间。&lt;/li&gt;
&lt;li&gt;-t, --type=TYPE：只显示指定类型的文件系统（如 ext4、xfs 等）。&lt;/li&gt;
&lt;li&gt;-T, --print-type：显示文件系统的类型。&lt;/li&gt;
&lt;li&gt;-x, --exclude-type=TYPE：排除指定类型的文件系统。&lt;/li&gt;
&lt;li&gt;-P, --portability：兼容旧版 df 命令的输出格式。&lt;/li&gt;
&lt;li&gt;-l, --local：只显示本地文件系统的信息。&lt;/li&gt;
&lt;li&gt;-a, --all：显示所有文件系统的信息，包括临时文件系统（如 tmpfs）。&lt;/li&gt;
&lt;li&gt;-i, --inodes：显示 inode 信息，而非磁盘空间。&lt;/li&gt;
&lt;li&gt;-hT, --output=OPTLIST：指定输出格式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认显示磁盘空间使用情况：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;df&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;以人类易读的格式显示磁盘空间：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;df -h&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;以 SI 单位显示磁盘空间：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;df -H&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;以千字节（KB）为单位显示磁盘空间：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;df -k&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;以兆字节（MB）为单位显示磁盘空间：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;df -m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;只显示指定类型的文件系统：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;df -t ext4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示文件系统的类型：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;df -T&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;排除指定类型的文件系统：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;df -x tmpfs&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;只显示本地文件系统的信息：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;df -l&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示所有文件系统的信息：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;df -a&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示 inode 信息：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;df -i&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;指定输出格式：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;df -hT&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;df 命令的输出通常包括以下列：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Filesystem：文件系统的挂载点。&lt;/li&gt;
&lt;li&gt;Size：文件系统的总容量。&lt;/li&gt;
&lt;li&gt;Used：已使用的空间。&lt;/li&gt;
&lt;li&gt;Avail：可用的空间。&lt;/li&gt;
&lt;li&gt;Use%：使用百分比。&lt;/li&gt;
&lt;li&gt;Mounted on：文件系统的挂载点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例输出&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Filesystem      Size  Used Avail Use% Mounted on&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/dev/sda1       100G   50G   50G  50% /&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;tmpfs           2.0G     0  2.0G   0% /dev/shm&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/dev/sdb1       200G  100G  100G  50% /data&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;磁盘空间不足：定期检查磁盘空间，避免因磁盘空间不足导致系统异常。&lt;/li&gt;
&lt;li&gt;inode 使用情况：使用 -i 选项可以显示 inode 的使用情况，这对于文件数量较多的情况非常有用。&lt;/li&gt;
&lt;li&gt;指定单位：使用 -h 或 -H 选项可以使输出更易于阅读，尤其是当磁盘空间较大时。&lt;/li&gt;
&lt;li&gt;文件系统类型：使用 -t 或 -T 选项可以指定或显示特定类型的文件系统，适用于特定场景下的监控。&lt;/li&gt;
&lt;li&gt;排除临时文件系统：使用 -x 选项可以排除临时文件系统（如 tmpfs），以便专注于永久存储设备。&lt;/li&gt;
&lt;li&gt;本地文件系统：使用 -l 选项可以只显示本地文件系统的信息，排除网络文件系统（如 NFS）。&lt;/li&gt;
&lt;li&gt;所有文件系统：使用 -a 选项可以显示所有文件系统的信息，包括临时文件系统，适用于全面监控。&lt;/li&gt;
&lt;li&gt;输出格式：使用 -hT 选项可以指定输出格式，便于自动化脚本处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;查看目录或文件的磁盘使用情况du补充&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看目录或文件的磁盘使用情况du补充&#34;&gt;#&lt;/a&gt; 查看目录或文件的磁盘使用情况（du）补充&lt;/h4&gt;
&lt;h4 id=&#34;查看系统内存使用情况free&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看系统内存使用情况free&#34;&gt;#&lt;/a&gt; 查看系统内存使用情况（free）&lt;/h4&gt;
&lt;p&gt;free 命令用于显示系统中的内存使用情况，包括物理内存、交换空间（swap）和缓冲区（buffers）等信息。它可以帮助用户了解当前系统的内存使用状况，对于系统管理和性能监控非常有用。&lt;br&gt;
用途&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;free [选项]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数与选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-b：以字节（bytes）为单位显示内存大小。&lt;/li&gt;
&lt;li&gt;-k：以千字节（KB）为单位显示内存大小（默认）。&lt;/li&gt;
&lt;li&gt;-m：以兆字节（MB）为单位显示内存大小。&lt;/li&gt;
&lt;li&gt;-g：以吉字节（GB）为单位显示内存大小。&lt;/li&gt;
&lt;li&gt;-h：以人类易读的格式显示内存大小（自动选择单位）。&lt;/li&gt;
&lt;li&gt;-l：显示锁定内存（locked memory）。&lt;/li&gt;
&lt;li&gt;-s：指定更新间隔时间（秒），持续显示内存使用情况。&lt;/li&gt;
&lt;li&gt;-t：显示总计（total）内存。&lt;/li&gt;
&lt;li&gt;-V：显示版本信息。&lt;/li&gt;
&lt;li&gt;-h：以人类易读的格式显示内存大小（自动选择单位）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认显示内存使用情况：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;free&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;以人类易读的格式显示内存大小：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;free -h&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;以兆字节（MB）为单位显示内存大小：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;free -m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;以千字节（KB）为单位显示内存大小：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;free -k&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;以字节（bytes）为单位显示内存大小：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;free -b&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;以吉字节（GB）为单位显示内存大小：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;free -g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示锁定内存：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;free -l&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;指定更新间隔时间为 2 秒，持续显示内存使用情况：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;free -s 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示总计内存：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;free -t&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示版本信息：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;free -V&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;free 命令的输出通常包括以下几部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Total：总内存。&lt;/li&gt;
&lt;li&gt;Used：已使用的内存。&lt;/li&gt;
&lt;li&gt;Free：空闲的内存。&lt;/li&gt;
&lt;li&gt;Shared：共享内存。&lt;/li&gt;
&lt;li&gt;Buffers：缓冲区内存。&lt;/li&gt;
&lt;li&gt;Cached：缓存内存。&lt;/li&gt;
&lt;li&gt;Available：可用内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例输出&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;              total        used        free      shared  buff/cache   available&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Mem:           8114        1519        2793          0        3802        4335&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Swap:         40960          16       40944&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存单位的选择：
&lt;ul&gt;
&lt;li&gt;使用 -h 选项可以自动选择合适的单位（如 K、M、G），使输出更易于阅读。&lt;/li&gt;
&lt;li&gt;使用 -m 或 -k 选项可以固定单位显示，适用于自动化脚本。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;持续更新内存使用情况：使用 -s 选项可以指定更新间隔时间，持续显示内存使用情况。这在监控系统性能时非常有用。&lt;/li&gt;
&lt;li&gt;锁定内存：使用 -l 选项可以显示锁定内存（locked memory），适用于需要关注锁定内存的应用场景。&lt;/li&gt;
&lt;li&gt;总计内存：使用 -t 选项可以显示总计内存，方便查看整体内存使用情况。&lt;/li&gt;
&lt;li&gt;内存不足的诊断：定期检查内存使用情况，避免因内存不足导致系统性能下降或崩溃。&lt;/li&gt;
&lt;li&gt;内存缓冲区和缓存：Buffers 和 Cached 列显示了缓冲区和缓存内存，这部分内存通常可以快速释放，有助于提高系统性能。&lt;/li&gt;
&lt;li&gt;可用内存：Available 列显示了当前系统可用的内存，这是系统实际可分配给新进程的内存。&lt;/li&gt;
&lt;li&gt;版本信息：使用 -V 选项可以显示 free 命令的版本信息，确保使用的是最新版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;查看和设置系统时间date&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看和设置系统时间date&#34;&gt;#&lt;/a&gt; 查看和设置系统时间（date）&lt;/h4&gt;
&lt;p&gt;date 命令用于显示和设置系统日期和时间。它是一个非常常用的工具，不仅可以查看当前的日期和时间，还可以用来设置系统的时间。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;date [选项] [日期时间字符串]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数与选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-u：以 UTC（协调世界时）显示日期和时间。&lt;/li&gt;
&lt;li&gt;+FORMAT：指定输出格式。&lt;/li&gt;
&lt;li&gt;-d：指定日期时间字符串。&lt;/li&gt;
&lt;li&gt;-s：设置系统日期和时间。&lt;/li&gt;
&lt;li&gt;-R：RFC 2822 格式输出。&lt;/li&gt;
&lt;li&gt;-r：以自上次系统启动以来的秒数表示时间。&lt;/li&gt;
&lt;li&gt;-d：指定日期时间字符串并计算结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显示当前日期和时间：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;date&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;以 UTC 时间显示当前日期和时间：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;date -u&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;指定输出格式：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;date +&amp;quot;%Y-%m-%d %H:%M:%S&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;指定日期时间字符串并计算结果：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;date -d &amp;quot;now + 1 day&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;设置系统日期和时间：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;date -s &amp;quot;2023-10-01 12:00:00&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;以 RFC 2822 格式输出：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;date -R&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;以自上次系统启动以来的秒数表示时间：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;date -r&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;date 命令支持多种输出格式，常见的格式符包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;% Y：年份，如 2023。&lt;/li&gt;
&lt;li&gt;% m：月份，如 10。&lt;/li&gt;
&lt;li&gt;% d：日期，如 01。&lt;/li&gt;
&lt;li&gt;% H：小时（24 小时制），如 12。&lt;/li&gt;
&lt;li&gt;% M：分钟，如 30。&lt;/li&gt;
&lt;li&gt;% S：秒，如 45。&lt;/li&gt;
&lt;li&gt;% a：星期几的缩写，如 Sun。&lt;/li&gt;
&lt;li&gt;% A：星期几的全称，如 Sunday。&lt;/li&gt;
&lt;li&gt;% b：月份的缩写，如 Oct。&lt;/li&gt;
&lt;li&gt;% B：月份的全称，如 October。&lt;/li&gt;
&lt;li&gt;% c：日期和时间的表示，如 Mon Oct 2 12:30:45 2023。&lt;/li&gt;
&lt;li&gt;% r：12 小时制的时间表示，如 12:30:45 PM。&lt;/li&gt;
&lt;li&gt;% T：24 小时制的时间表示，如 12:30:45。&lt;/li&gt;
&lt;li&gt;% Z：时区名称，如 CST。&lt;/li&gt;
&lt;li&gt;% z：时区偏移量，如 +0800。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例输出&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显示当前日期和时间：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Mon Oct 2 12:30:45 CST 2023&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;指定输出格式：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;2023-10-02 12:30:45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;指定日期时间字符串并计算结果：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Mon Oct 3 12:30:45 CST 2023&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;设置系统日期和时间：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Mon Oct 1 12:00:00 CST 2023&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;以 RFC 2822 格式输出：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Mon, 02 Oct 2023 12:30:45 +0800&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;以自上次系统启动以来的秒数表示时间：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;12345678&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置系统日期和时间：
&lt;ul&gt;
&lt;li&gt;使用 -s 选项可以设置系统日期和时间，但在某些系统中可能需要管理员权限。&lt;/li&gt;
&lt;li&gt;设置时间时，确保时间格式正确无误。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;输出格式：使用 +FORMAT 选项可以指定输出格式，便于自动化脚本处理。熟悉常用的格式符，以便灵活使用。&lt;/li&gt;
&lt;li&gt;UTC 时间：使用 -u 选项可以显示 UTC 时间，适用于跨时区的应用场景。&lt;/li&gt;
&lt;li&gt;日期时间字符串：使用 -d 选项可以指定日期时间字符串并计算结果，例如 now + 1 day。&lt;/li&gt;
&lt;li&gt;自动化脚本：date 命令常用于自动化脚本中，例如定时任务、日志记录等。&lt;/li&gt;
&lt;li&gt;系统同步：确保系统时间准确，可以使用 NTP（Network Time Protocol）服务进行同步。&lt;/li&gt;
&lt;li&gt;时间格式一致性：在不同的系统和环境中，时间格式可能略有不同，确保格式一致性。&lt;/li&gt;
&lt;li&gt;时区问题：处理跨时区的数据时，注意时区转换和调整。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;显示日历cal补充&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#显示日历cal补充&#34;&gt;#&lt;/a&gt; 显示日历（cal）补充&lt;/h4&gt;
&lt;h4 id=&#34;显示当前登录用户who补充&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#显示当前登录用户who补充&#34;&gt;#&lt;/a&gt; 显示当前登录用户（who）补充&lt;/h4&gt;
&lt;h4 id=&#34;显示最近的登录记录last补充&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#显示最近的登录记录last补充&#34;&gt;#&lt;/a&gt; 显示最近的登录记录（last）补充&lt;/h4&gt;
&lt;h4 id=&#34;显示命令历史history补充&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#显示命令历史history补充&#34;&gt;#&lt;/a&gt; 显示命令历史（history）补充&lt;/h4&gt;
&lt;h4 id=&#34;命令手册man&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#命令手册man&#34;&gt;#&lt;/a&gt; 命令手册（man）&lt;/h4&gt;
&lt;p&gt;man 命令用于查看系统命令、实用工具、库函数以及其他系统组件的手册页。手册页提供了详细的文档，包括命令的使用方法、参数、环境变量、文件位置、退出状态、错误信息等信息。&lt;br&gt;
以下是 man 命令的一些基本用法和参数：&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;man [选项] [章节号] 命令名&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;章节号：每个手册页都有一个章节号，用来区分不同类型的文档。例如：
&lt;ul&gt;
&lt;li&gt;1：用户命令。&lt;/li&gt;
&lt;li&gt;2：系统调用。&lt;/li&gt;
&lt;li&gt;3：库函数。&lt;/li&gt;
&lt;li&gt;4：特殊文件（通常是设备文件）。&lt;/li&gt;
&lt;li&gt;5：文件格式和配置文件。&lt;/li&gt;
&lt;li&gt;6：游戏。&lt;/li&gt;
&lt;li&gt;7：杂项（包括宏包和惯例）。&lt;/li&gt;
&lt;li&gt;8：系统管理命令。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-a 或 --all：在所有的手册页中搜索指定的命令或主题。&lt;/li&gt;
&lt;li&gt;-f 或 --apropos：等价于 whatis 命令，显示给定关键字的简短描述信息。&lt;/li&gt;
&lt;li&gt;-k 或 --apropos：等价于 -f，显示给定关键字的简短描述信息。&lt;/li&gt;
&lt;li&gt;-P 或 --pager：指定内容时使用分页程序，例如 less。&lt;/li&gt;
&lt;li&gt;-M 或 --manualdir：指定手册页搜索路径。&lt;/li&gt;
&lt;li&gt;-m 或 --arch：指定架构。&lt;/li&gt;
&lt;li&gt;-w 或 --where：显示手册页的位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看 ls 命令的手册页：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;man ls&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;查看 ls 命令的第 1 章节的手册页：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;man 1 ls&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;在所有手册页中搜索 grep：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;man -a grep&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;使用 less 分页器查看 man 命令的手册页：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;man -P less man&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;查看与 grep 相关的手册页摘要：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;man -f grep&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;查找与 grep 相关的手册页：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;man -k grep&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示 ls 手册页的位置：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;man -w ls&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;p&gt;在手册页中导航&lt;br&gt;
一旦进入了手册页，你可以使用以下按键来进行导航和操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空格键：向下滚动一页。&lt;/li&gt;
&lt;li&gt;b 或 Page Up：向上滚动一页。&lt;/li&gt;
&lt;li&gt;Enter：向下滚动一行。&lt;/li&gt;
&lt;li&gt;u 或 Page Down：向上滚动一行。&lt;/li&gt;
&lt;li&gt;/ 或？：搜索关键词（使用 / 向前搜索，? 向后搜索）。&lt;/li&gt;
&lt;li&gt;n 或 N：跳转到下一个或上一个搜索结果。&lt;/li&gt;
&lt;li&gt;q：退出手册页。&lt;/li&gt;
&lt;li&gt;h：显示帮助信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;显示命令的信息页info补充&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#显示命令的信息页info补充&#34;&gt;#&lt;/a&gt; 显示命令的信息页（info）补充&lt;/h4&gt;
&lt;h4 id=&#34;系统命令查看whereis&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#系统命令查看whereis&#34;&gt;#&lt;/a&gt; 系统命令查看（whereis）&lt;/h4&gt;
&lt;p&gt;whereis 命令用于查找系统中指定命令或程序的位置，包括二进制文件、源代码文件和手册页等。它是一个快速定位命令位置的工具，常用于开发和系统管理。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;whereis [选项] 命令名&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数与选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-b：仅查找二进制文件。&lt;/li&gt;
&lt;li&gt;-m：仅查找手册页。&lt;/li&gt;
&lt;li&gt;-s：仅查找源代码文件。&lt;/li&gt;
&lt;li&gt;-u：仅查找用户手册页。&lt;/li&gt;
&lt;li&gt;-a：查找所有类型的位置（默认行为）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查找命令的位置：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;whereis ls&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;仅查找二进制文件的位置：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;whereis -b ls&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;仅查找手册页的位置：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;whereis -m ls&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;仅查找源代码文件的位置：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;whereis -s ls&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;查找所有类型的位置：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;whereis -a ls&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;查找多个命令的位置：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;whereis ls grep&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命令名称的准确性：确保输入的命令名称准确无误，否则 whereis 可能找不到对应的位置。&lt;/li&gt;
&lt;li&gt;环境变量的影响：whereis 的搜索路径受环境变量 PATH 和 MANPATH 的影响。确保这些环境变量配置正确，以便 whereis 能够找到正确的文件。&lt;/li&gt;
&lt;li&gt;源代码文件的查找：whereis 查找源代码文件时，通常是在 /usr/src 目录下查找。如果源代码不在这个目录下，whereis 可能无法找到。&lt;/li&gt;
&lt;li&gt;手册页的查找：手册页通常位于 /usr/share/man 目录下。如果手册页不在这个目录下，whereis 可能无法找到。&lt;/li&gt;
&lt;li&gt;命令别名的影响：如果某个命令是别名或者软链接，whereis 可能会显示实际的命令路径，而不是别名或软链接本身。&lt;/li&gt;
&lt;li&gt;系统更新后的变化：系统更新后，某些命令或手册页的位置可能会发生变化。此时，建议重新运行 whereis 命令以获取最新的位置信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;系统命令路径查看which&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#系统命令路径查看which&#34;&gt;#&lt;/a&gt; 系统命令路径查看（which）&lt;/h4&gt;
&lt;p&gt;which 命令用于查找系统中可执行命令的完整路径。它可以帮助用户确定某个命令的具体位置，通常用于开发和系统管理环境中。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;which [选项] 命令名&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数与选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-a：显示所有匹配的命令路径。&lt;/li&gt;
&lt;li&gt;-m：显示命令的多个匹配路径。&lt;/li&gt;
&lt;li&gt;-s：仅显示第一个匹配的命令路径。&lt;/li&gt;
&lt;li&gt;-t：将结果输出到标准输出，而不是打印。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查找命令的完整路径：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;which ls&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;查找多个命令的完整路径：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;which ls grep&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示所有匹配的命令路径：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;which -a ls&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示命令的多个匹配路径：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;which -m ls&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;仅显示第一个匹配的命令路径：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;which -s ls&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;将结果输出到标准输出：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;which -t ls&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命令名称的准确性：确保输入的命令名称准确无误，否则 which 可能找不到对应的位置。&lt;/li&gt;
&lt;li&gt;环境变量的影响：which 的搜索路径受环境变量 PATH 的影响。确保 PATH 变量配置正确，以便 which 能够找到正确的文件。&lt;/li&gt;
&lt;li&gt;命令别名的影响：如果某个命令是别名或者软链接，which 可能会显示实际的命令路径，而不是别名或软链接本身。&lt;/li&gt;
&lt;li&gt;系统更新后的变化：系统更新后，某些命令的位置可能会发生变化。此时，建议重新运行 which 命令以获取最新的位置信息。&lt;/li&gt;
&lt;li&gt;多路径匹配：使用 -a 或 -m 选项时，which 会显示所有匹配的路径。这在某些情况下非常有用，尤其是在系统中有多个版本的命令时。&lt;/li&gt;
&lt;li&gt;仅显示第一个匹配路径：使用 -s 选项时，which 只显示第一个匹配的路径。这对于简单验证命令是否存在非常方便。&lt;/li&gt;
&lt;li&gt;输出到标准输出：使用 -t 选项时，which 将结果输出到标准输出，而不是打印。这在脚本中非常有用，可以方便地处理输出结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;关闭系统shutdown&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#关闭系统shutdown&#34;&gt;#&lt;/a&gt; 关闭系统（shutdown）&lt;/h4&gt;
&lt;p&gt;基本语法： &lt;code&gt;shutdown [选项] [时间] [警告信息]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间：指定何时执行关机或重启。可以是 &lt;code&gt;立即执行（now），几分钟后（+分钟数），或者指定的时间（hh:mm）&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;警告信息：可以附加一个消息给所有登录的用户，通知他们即将发生的动作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-h：关机。shutdown -h now 会立即关机。&lt;/li&gt;
&lt;li&gt;-r：重启。shutdown -r now 会立即重启。&lt;/li&gt;
&lt;li&gt;-k：发送警告信息给所有用户，但不执行关机或重启。&lt;/li&gt;
&lt;li&gt;-c：取消已经计划的关机或重启。&lt;/li&gt;
&lt;li&gt;-f：强制关机或重启，不执行文件系统检查（fsck）。&lt;/li&gt;
&lt;li&gt;-F：强制关机或重启，并且执行文件系统检查。&lt;/li&gt;
&lt;li&gt;-n：不通过 init 而直接由 shutdown 命令执行关机或重启。&lt;/li&gt;
&lt;li&gt;-t 秒数：指定从警告信息发出到真正执行关机或重启之间的延迟秒数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;立即关机：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo shutdown -h now&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;立即重启：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo shutdown -r now&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;在 10 分钟后关机，并附带警告信息：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo shutdown -h +10 &amp;quot;System will shutdown in 10 minutes&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;在晚上 10 点 30 分关机：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo shutdown -h 22:30 &amp;quot;System will shutdown at 22:30&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;发送警告信息而不执行关机：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo shutdown -k now &amp;quot;This is a warning message&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;取消已经计划的关机：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo shutdown -c&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;强制关机，不执行文件系统检查：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo shutdown -hf now&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;强制重启，并且执行文件系统检查：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo shutdown -Fr now&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;延迟 60 秒后关机：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo shutdown -h +60&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;shutdown 命令通常需要超级用户权限，因此通常需要使用 sudo 前缀。&lt;/li&gt;
&lt;li&gt;当使用 shutdown 来计划关机或重启时，系统会向所有登录的用户发送通知。&lt;/li&gt;
&lt;li&gt;如果没有指定时间，shutdown 会默认在 1 分钟后执行关机或重启。&lt;/li&gt;
&lt;li&gt;使用 -k 选项时，系统不会真正关机或重启，只会发送警告信息给用户。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;切换用户su&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#切换用户su&#34;&gt;#&lt;/a&gt; 切换用户（su）&lt;/h4&gt;
&lt;p&gt;su（switch user）命令在 Linux 和 Unix-like 操作系统中用于切换当前用户到另一个用户的身份。&lt;br&gt;
这个命令允许你临时以另一个用户的身份执行命令或继续工作，通常是为了获得更高的权限（如 root 用户权限）来执行某些需要特权的操作。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;su [选项] [用户名]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户名：指定要切换到的用户名。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;- 或 -l 或 --login：模拟一个完整的登录环境，这意味着它会加载目标用户的环境变量、家目录等。&lt;br&gt;
如果不使用这个选项，su 只会改变用户 ID，而不会改变环境变量。&lt;/li&gt;
&lt;li&gt;-c 或 --command=command：变更用户身份并执行指定的命令，执行完毕后自动返回到原来的用户身份。&lt;/li&gt;
&lt;li&gt;-s 或 --shell=shell：指定要使用的 shell。默认情况下，su 会使用 /etc/passwd 文件中定义的目标用户的 shell。&lt;/li&gt;
&lt;li&gt;-m 或 -p 或 --preserve-environment：执行 su 时不改变环境变量。&lt;/li&gt;
&lt;li&gt;-f 或 --fast：不读取启动文件（如 csh.cshrc 等），仅适用于 csh 或 tcsh shell。&lt;/li&gt;
&lt;li&gt;-h 或 --help：显示帮助信息。&lt;/li&gt;
&lt;li&gt;-v 或 --version：显示版本信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;切换到 root 用户： 使用如下命令并输入 root 用户的密码后，你将切换到 root 用户身份，并且提示符会变为 root 用户的提示符。&lt;/p&gt;
 &lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;su root&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;切换到任意用户： 这里 username 是你要切换到的用户名称。&lt;/p&gt;
 &lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;su username&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以 root 用户身份执行单个命令： 这条命令将以 root 用户的身份执行 ls -l 命令，并在命令执行完毕后回到原始用户。&lt;/p&gt;
 &lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;su -c &amp;#x27;ls -l&amp;#x27; root&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;模拟登录到 root 用户： 这将模拟一个完整的登录环境，加载 root 用户的环境变量和 home 目录。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;su&lt;/span&gt; - root&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;--code￼401--&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保持当前环境变量不变的情况下切换用户：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;su&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-m&lt;/span&gt; username&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;--code￼402--&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指定 shell 来执行命令：&lt;/p&gt;
 &lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;su -s /bin/bash username&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;快速切换用户：&lt;/p&gt;
 &lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;su - username&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;密码要求：当切换到另一个用户时，通常需要输入该用户的密码。&lt;/li&gt;
&lt;li&gt;环境变量：使用 - 或 -l 选项时，会加载目标用户的环境变量，这可能会影响当前的工作环境。&lt;/li&gt;
&lt;li&gt;安全性：频繁使用 su 切换到 root 用户可能会增加系统的安全风险，因为这给予了用户完全的系统控制权。&lt;br&gt;
在现代 Linux 系统中，推荐使用 sudo 命令来执行需要特权的操作，这样可以避免暴露 root 密码，并且可以对用户的权限进行细粒度控制。&lt;/li&gt;
&lt;li&gt;命令执行：使用 -c 选项时，要注意命令的引号包围问题，确保命令能够正确执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;以其他用户的身份执行命令sudo&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#以其他用户的身份执行命令sudo&#34;&gt;#&lt;/a&gt; 以其他用户的身份执行命令（sudo）&lt;/h4&gt;
&lt;p&gt;sudo（superuser do）命令在 Linux 和 Unix-like 操作系统中用于以其他用户（通常是 root 用户）的身份执行命令。&lt;br&gt;
它提供了一种安全的方式来临时提升权限，以便执行需要特权的操作。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;sudo [选项] 命令&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命令：要以其他用户身份执行的具体命令。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-u 用户名：指定要以哪个用户的身份执行命令，默认为 root 用户。&lt;/li&gt;
&lt;li&gt;-s：执行一个 shell，而不是具体的命令。&lt;/li&gt;
&lt;li&gt;-i：模拟一个完整的登录环境，类似于 su -。&lt;/li&gt;
&lt;li&gt;-l：列出当前用户可以执行的命令。&lt;/li&gt;
&lt;li&gt;-v：验证当前用户的密码，但不执行任何命令。&lt;/li&gt;
&lt;li&gt;-k：清除当前用户的 sudo 记录。&lt;/li&gt;
&lt;li&gt;-E 或 --preserve-env：保留当前环境变量。&lt;/li&gt;
&lt;li&gt;-H 或 --set-home：设置 HOME 环境变量为目标用户的家目录。&lt;/li&gt;
&lt;li&gt;-S：从标准输入读取密码。&lt;/li&gt;
&lt;li&gt;-V 或 --version：显示版本信息。&lt;/li&gt;
&lt;li&gt;-h 或 --help：显示帮助信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以 root 用户身份执行命令：这条命令将以 root 用户的身份执行 ls -l 命令。&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo ls -l&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;以指定用户身份执行命令：这条命令将以 username 用户的身份执行 ls -l 命令。&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo -u username ls -l&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;执行一个 shell：这条命令将以 root 用户的身份打开一个 shell。&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo -s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;模拟登录环境：这条命令将以 root 用户的身份模拟一个完整的登录环境。&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo -i&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;列出可执行的命令：这条命令将列出当前用户可以执行的命令。&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo -l&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;验证密码但不执行命令：这条命令将验证当前用户的密码，但不执行任何命令。&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo -v&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;保留当前环境变量：这条命令将以 root 用户的身份执行 ls -l 命令，并保留当前环境变量。&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo -E ls -l&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;设置 HOME 环境变量：这条命令将以 root 用户的身份执行 ls -l 命令，并设置 HOME 环境变量为 root 用户的家目录。&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo -H ls -l&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;从标准输入读取密码：这条命令将从标准输入读取密码，并以 root 用户的身份执行 ls -l 命令。&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;echo &amp;quot;password&amp;quot; | sudo -S ls -l&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;密码验证：使用 sudo 时通常需要输入当前用户的密码。密码验证的有效期通常为 5 分钟，之后需要重新输入密码。&lt;/li&gt;
&lt;li&gt;配置文件：sudo 的行为可以通过 /etc/sudoers 文件进行配置。只有被允许的用户才能使用 sudo 命令。&lt;br&gt;
编辑 sudoers 文件通常需要使用 visudo 命令。&lt;/li&gt;
&lt;li&gt;安全性：sudo 命令提供了更好的安全性，因为它不需要暴露 root 密码，并且可以限制用户执行特定的命令。&lt;br&gt;
建议尽量使用 sudo 而不是直接使用 su 切换到 root 用户。&lt;/li&gt;
&lt;li&gt;环境变量：使用 -E 选项时，会保留当前环境变量。如果不使用 -E，则会加载目标用户的环境变量。&lt;/li&gt;
&lt;li&gt;命令执行：使用 sudo 时，注意命令的引号包围问题，确保命令能够正确执行。&lt;/li&gt;
&lt;li&gt;日志记录：sudo 命令通常会被记录在系统日志中，便于审计和追踪。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;挂载文件系统mount&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#挂载文件系统mount&#34;&gt;#&lt;/a&gt; 挂载文件系统（mount）&lt;/h4&gt;
&lt;p&gt;mount 命令用于将文件系统挂载到系统中的某个目录上。它是一个非常重要的系统管理工具，广泛应用于挂载硬盘分区、USB 设备、网络文件系统（NFS）等。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;mount [选项] [设备名] [挂载点]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数与选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-a：挂载 /etc/fstab 文件中的所有条目。&lt;/li&gt;
&lt;li&gt;-t：指定文件系统类型。&lt;/li&gt;
&lt;li&gt;-o：指定挂载选项。&lt;/li&gt;
&lt;li&gt;-v：显示详细信息。&lt;/li&gt;
&lt;li&gt;-n：不更新 /etc/mtab 文件。&lt;/li&gt;
&lt;li&gt;-l：列出当前挂载的所有文件系统。&lt;/li&gt;
&lt;li&gt;-u：重新挂载已挂载的文件系统。&lt;/li&gt;
&lt;li&gt;-r：以只读方式挂载。&lt;/li&gt;
&lt;li&gt;-w：以读写方式挂载。&lt;/li&gt;
&lt;li&gt;-nolock：不使用锁机制。&lt;/li&gt;
&lt;li&gt;-o remount：重新挂载已挂载的文件系统。&lt;/li&gt;
&lt;li&gt;-o ro：以只读方式挂载。&lt;/li&gt;
&lt;li&gt;-o rw：以读写方式挂载。&lt;/li&gt;
&lt;li&gt;-o loop：挂载循环设备（如 ISO 镜像）。&lt;/li&gt;
&lt;li&gt;-o bind：绑定挂载。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;挂载一个硬盘分区：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mount /dev/sda1 /mnt/data&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;挂载一个 USB 设备：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mount /dev/sdc1 /mnt/usb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;挂载一个网络文件系统（NFS）：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mount -t nfs server:/export/path /mnt/nfs&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;挂载一个 ISO 镜像：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mount -o loop /path/to/image.iso /mnt/cdrom&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;挂载一个文件系统，并指定挂载选项：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mount -t ext4 -o defaults,noatime /dev/sda1 /mnt/data&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;挂载所有条目：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mount -a&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;重新挂载一个已挂载的文件系统：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mount -o remount /mnt/data&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;以只读方式挂载：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mount -o ro /dev/sda1 /mnt/data&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;以读写方式挂载：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mount -o rw /dev/sda1 /mnt/data&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;绑定挂载：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mount --bind /src /mnt/bind&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在挂载之前，确保挂载点目录已经存在。&lt;/li&gt;
&lt;li&gt;使用 -o 选项可以指定挂载选项，如 defaults、noatime 等，这些选项会影响文件系统的性能和行为。&lt;/li&gt;
&lt;li&gt;使用 -t 选项指定文件系统类型，例如 ext4、nfs 等。&lt;/li&gt;
&lt;li&gt;使用 -o remount 选项可以重新挂载已挂载的文件系统，而不卸载后再挂载。&lt;/li&gt;
&lt;li&gt;使用 -o ro 可以以只读方式挂载，使用 -o rw 可以以读写方式挂载。&lt;/li&gt;
&lt;li&gt;使用 -o loop 选项可以挂载 ISO 镜像等循环设备。&lt;/li&gt;
&lt;li&gt;使用 --bind 选项可以将一个目录的内容绑定到另一个目录，适用于共享数据的场景。&lt;/li&gt;
&lt;li&gt;使用 -a 选项可以挂载 /etc/fstab 文件中的所有条目，适用于系统启动时自动挂载。&lt;/li&gt;
&lt;li&gt;使用 -v 选项可以显示详细的挂载信息，适用于调试和诊断。&lt;/li&gt;
&lt;li&gt;使用 -n 选项可以不更新 /etc/mtab 文件，适用于不需要记录挂载信息的场景。&lt;/li&gt;
&lt;li&gt;在挂载文件系统时，确保有足够的权限。通常需要 root 用户权限才能挂载。&lt;/li&gt;
&lt;li&gt;将挂载信息添加到 /etc/fstab 文件中，可以在系统启动时自动挂载。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;管理系统服务service&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#管理系统服务service&#34;&gt;#&lt;/a&gt; 管理系统服务（service）&lt;/h4&gt;
&lt;p&gt;service 命令是用于管理系统服务的命令行工具。它提供了启动、停止、重启、状态查询等功能，适用于不同的系统初始化系统（如&lt;br&gt;
 SysVinit、Upstart 和 Systemd）。&lt;/p&gt;
&lt;p&gt;基本格式： &lt;code&gt;service [服务名称] [命令]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;命令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;start: 启动服务。&lt;/li&gt;
&lt;li&gt;stop: 停止服务。&lt;/li&gt;
&lt;li&gt;restart: 重启服务。&lt;/li&gt;
&lt;li&gt;reload: 重新加载服务配置。&lt;/li&gt;
&lt;li&gt;status: 查看服务状态。&lt;/li&gt;
&lt;li&gt;enable: 使服务在系统启动时自动启动。&lt;/li&gt;
&lt;li&gt;disable: 禁用服务在系统启动时自动启动。&lt;/li&gt;
&lt;li&gt;force-reload: 强制重新加载服务配置。&lt;/li&gt;
&lt;li&gt;condrestart: 如果服务未运行，则启动服务。&lt;/li&gt;
&lt;li&gt;try-restart: 尝试重启服务，如果服务未运行则启动服务。&lt;/li&gt;
&lt;li&gt;once: 仅运行一次服务。&lt;/li&gt;
&lt;li&gt;is-enabled: 检查服务是否设置为随系统启动自动启动。&lt;/li&gt;
&lt;li&gt;is-active: 检查服务是否正在运行。&lt;/li&gt;
&lt;li&gt;is-failed: 检查服务是否处于失败状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动服务：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;service nginx start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;停止服务：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;service nginx stop&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;重启服务：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;service nginx restart&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;检查服务状态：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;service nginx status&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;重新加载服务配置：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;service nginx reload&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;强制重新加载服务配置：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;service nginx force-reload&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;使服务在系统启动时自动启动：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;service nginx enable&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;禁用服务在系统启动时自动启动：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;service nginx disable&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;如果服务未运行，则启动服务：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;service nginx condrestart&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;尝试重启服务，如果服务未运行则启动服务：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;service nginx try-restart&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;仅运行一次服务：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;service nginx once&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;检查服务是否设置为随系统启动自动启动：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;service nginx is-enabled&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;检查服务是否正在运行：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;service nginx is-active&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;检查服务是否处于失败状态：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;service nginx is-failed&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务名称：确保服务名称正确无误。服务名称通常是服务程序的名称，如 nginx、httpd、mysql 等。&lt;/li&gt;
&lt;li&gt;初始化系统：service 命令的行为取决于系统的初始化系统。在 SysVinit 系统中，service 命令直接调用 /etc/init.d/ 目录下的脚本；在&lt;/li&gt;
&lt;li&gt;Systemd 系统中，service 命令实际上调用的是 systemctl 命令。&lt;/li&gt;
&lt;li&gt;依赖关系：某些服务可能依赖于其他服务。在执行操作之前，确保所有依赖的服务都已正确启动。&lt;/li&gt;
&lt;li&gt;权限问题：通常需要 root 权限才能执行 service 命令。如果没有 root 权限，可以使用 sudo 命令。&lt;/li&gt;
&lt;li&gt;配置文件：重新加载服务配置时，确保配置文件已经正确修改并保存。&lt;/li&gt;
&lt;li&gt;日志文件：如果服务出现问题，可以通过查看相关的日志文件来诊断问题。例如，nginx 的日志文件通常位于 /var/log/nginx/ 目录下。&lt;/li&gt;
&lt;li&gt;状态检查：在执行操作前后，可以使用 status 命令检查服务的状态，确保操作成功。&lt;/li&gt;
&lt;li&gt;自动启动管理：使用 enable 和 disable 选项可以方便地管理服务的自动启动设置。&lt;/li&gt;
&lt;li&gt;错误处理：如果遇到错误，可以查看详细的错误信息，或者使用 journalctl 命令查看 Systemd 日志。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;包管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#包管理&#34;&gt;#&lt;/a&gt; 包管理&lt;/h3&gt;
&lt;h4 id=&#34;apt-命令debianubuntu&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#apt-命令debianubuntu&#34;&gt;#&lt;/a&gt; apt 命令（Debian/Ubuntu）&lt;/h4&gt;
&lt;p&gt;apt (Advanced Package Tool) 是 Debian 系及其衍生系统（如 Ubuntu）中常用的包管理工具。它可以处理软件包的安装、更新、删除等操作，并且能够自动解决依赖关系。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;apt [选项] [命令] [参数]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数与选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;install: 安装指定的软件包。&lt;/li&gt;
&lt;li&gt;update: 更新本地包索引。&lt;/li&gt;
&lt;li&gt;upgrade: 更新已安装的软件包到最新版本。&lt;/li&gt;
&lt;li&gt;remove: 卸载指定的软件包。&lt;/li&gt;
&lt;li&gt;purge: 卸载指定的软件包并删除其配置文件。&lt;/li&gt;
&lt;li&gt;list: 列出可用的软件包。&lt;/li&gt;
&lt;li&gt;show: 显示软件包的详细信息。&lt;/li&gt;
&lt;li&gt;search: 搜索软件仓库中符合关键字的所有软件包。&lt;/li&gt;
&lt;li&gt;autoremove: 卸载不再需要的自动安装的软件包。&lt;/li&gt;
&lt;li&gt;clean: 清除下载的包缓存。&lt;/li&gt;
&lt;li&gt;autoclean: 清除旧的、不再需要的包缓存。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更新本地包索引：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo apt update&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;安装软件包：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo apt install httpd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;更新所有已安装的软件包：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo apt upgrade&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;删除软件包：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo apt remove httpd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;删除软件包并清除配置文件：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo apt purge httpd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;查找软件包：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo apt search firewall&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示软件包信息：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo apt show httpd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;清理缓存：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo apt clean&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;自动清理旧的缓存：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo apt autoclean&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;卸载不再需要的自动安装的软件包：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo apt autoremove&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在执行任何涉及系统软件变更的操作前，最好先运行 sudo apt update 来确保本地包索引是最新的。&lt;/li&gt;
&lt;li&gt;对于大型软件包或者多个软件包的安装，可以考虑使用 apt install package1 package2 来一次性安装多个软件包。&lt;/li&gt;
&lt;li&gt;当遇到依赖问题时，可以尝试使用 --no-install-recommends 选项来忽略推荐的软件包，但这可能会导致缺少某些功能。&lt;/li&gt;
&lt;li&gt;避免在生产环境中直接使用 apt upgrade 而不检查更新的内容，以防意外升级导致兼容性问题。&lt;/li&gt;
&lt;li&gt;如果遇到软件包冲突或依赖问题，可以使用 apt policy &lt;package&gt; 查看当前的状态，并使用 apt install --fix-broken 来尝试修复。&lt;/li&gt;
&lt;li&gt;对于重要的系统更新，建议先阅读官方文档或发行说明，了解可能的影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;yum-命令centosrhel&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#yum-命令centosrhel&#34;&gt;#&lt;/a&gt; yum 命令（CentOS/RHEL）&lt;/h4&gt;
&lt;p&gt;yum (Yellowdog Updater Modified) 是一个在 Fedora 和 Red Hat 系统上常用的包管理器，用于安装、更新和删除软件包。它通过仓库来获取软件包，并且可以自动处理依赖关系。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;yum [选项] [命令] [参数]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数与选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;install: 安装指定的软件包。&lt;/li&gt;
&lt;li&gt;update: 更新已安装的软件包到最新版本。&lt;/li&gt;
&lt;li&gt;remove: 卸载指定的软件包。&lt;/li&gt;
&lt;li&gt;list: 列出可用的软件包。&lt;/li&gt;
&lt;li&gt;info: 显示软件包的详细信息。&lt;/li&gt;
&lt;li&gt;clean: 清除缓存目录下的软件包。&lt;/li&gt;
&lt;li&gt;search: 搜索软件仓库中符合关键字的所有软件包。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装软件包&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo yum install httpd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;更新所有已安装的软件包：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo yum update&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;删除软件包：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo yum remove httpd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;查找软件包：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo yum search firewall&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示软件包信息：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo yum info httpd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;清理缓存：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo yum clean all&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 yum 前，请确保已经配置了正确的仓库文件。这些文件通常位于 /etc/yum.repos.d/ 目录下。&lt;/li&gt;
&lt;li&gt;在执行任何涉及系统软件变更的操作前，最好先运行 sudo yum update 来确保系统是最新的。&lt;/li&gt;
&lt;li&gt;当遇到依赖问题时，可以尝试使用 --setopt=tsflags=nodocs 选项来忽略文档包，但这可能会导致缺少文档。&lt;/li&gt;
&lt;li&gt;避免在生产环境中直接使用 yum update 而不检查更新的内容，以防意外升级导致兼容性问题。&lt;/li&gt;
&lt;li&gt;对于大型软件包或者多个软件包的安装，考虑使用 yum groupinstall “Development Tools” 这样的组安装命令来简化流程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;rpm-命令centosrhel&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rpm-命令centosrhel&#34;&gt;#&lt;/a&gt; rpm 命令（CentOS/RHEL）&lt;/h4&gt;
&lt;p&gt;rpm (Red Hat Package Manager) 是一个广泛使用的包管理工具，主要用于基于 RPM 的 Linux 发行版（如 Red Hat、Fedora、CentOS&lt;br&gt;
 等）。它支持安装、更新、删除软件包，并能处理依赖关系。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;rpm [选项] [命令] [参数]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数与选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-i: 安装指定的软件包。&lt;/li&gt;
&lt;li&gt;-U: 更新已安装的软件包。&lt;/li&gt;
&lt;li&gt;-F: 更新已安装的软件包（仅当现有包版本较旧时才更新）。&lt;/li&gt;
&lt;li&gt;-e: 卸载指定的软件包。&lt;/li&gt;
&lt;li&gt;-q: 查询已安装的软件包。&lt;/li&gt;
&lt;li&gt;-qp: 显示未安装的软件包信息。&lt;/li&gt;
&lt;li&gt;-V: 验证已安装的软件包。&lt;/li&gt;
&lt;li&gt;-qa: 列出所有已安装的软件包。&lt;/li&gt;
&lt;li&gt;-ql: 列出已安装软件包的文件列表。&lt;/li&gt;
&lt;li&gt;-qi: 显示已安装软件包的详细信息。&lt;/li&gt;
&lt;li&gt;-qc: 显示已安装软件包的配置文件列表。&lt;/li&gt;
&lt;li&gt;-qd: 显示已安装软件包的文档文件列表。&lt;/li&gt;
&lt;li&gt;-qf: 根据文件路径查询所属的软件包。&lt;/li&gt;
&lt;li&gt;-qs: 显示已安装软件包的状态信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装软件包：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo rpm -i httpd.rpm&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;更新软件包：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo rpm -U httpd.rpm&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;更新软件包（仅当现有版本较旧时）：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo rpm -F httpd.rpm&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;删除软件包：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo rpm -e httpd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;查询已安装的软件包：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;rpm -q httpd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示未安装的软件包信息：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;rpm -qp httpd.rpm&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;验证已安装的软件包：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;rpm -V httpd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;列出所有已安装的软件包：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;rpm -qa&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;列出已安装软件包的文件列表：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;rpm -ql httpd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示已安装软件包的详细信息：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;rpm -qi httpd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示已安装软件包的配置文件列表：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;rpm -qc httpd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示已安装软件包的文档文件列表：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;rpm -qd httpd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;根据文件路径查询所属的软件包：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;rpm -qf /etc/httpd/conf/httpd.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;显示已安装软件包的状态信息：&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;rpm -qs httpd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在安装或更新软件包之前，最好先确认软件包的来源可靠，避免安装恶意软件。&lt;/li&gt;
&lt;li&gt;使用 rpm -i 或 rpm -U 时，如果遇到依赖问题，可以尝试使用 rpm -ivh --nodeps 强制安装，但这可能会导致系统不稳定。&lt;/li&gt;
&lt;li&gt;在删除软件包之前，最好先用 rpm -ql 查看该软件包包含的文件，确保不会误删重要文件。&lt;/li&gt;
&lt;li&gt;如果遇到依赖问题，可以使用 rpm -qa | grep &lt;pattern&gt; 来查找相关软件包，并尝试手动解决依赖问题。&lt;/li&gt;
&lt;li&gt;对于复杂的依赖问题，可以考虑使用 yum 或 dnf 这样的高级包管理器来自动解决依赖关系。&lt;/li&gt;
&lt;li&gt;在安装新软件包时，建议先用 rpm -qp --verify 检查软件包的完整性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;dnf-命令fedora补充&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dnf-命令fedora补充&#34;&gt;#&lt;/a&gt; dnf 命令（Fedora）补充&lt;/h4&gt;
&lt;h4 id=&#34;pacman-命令arch-linux补充&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#pacman-命令arch-linux补充&#34;&gt;#&lt;/a&gt; pacman 命令（Arch Linux）补充&lt;/h4&gt;
</content>
        <category term="后端" />
        <category term="操作系统" />
        <category term="Linux" />
        <updated>2024-09-25T01:54:17.000Z</updated>
    </entry>
    <entry>
        <id>https://silvercrow42.github.io/joker.github.io/2024/09/24/%E3%80%90Zookeeper%E3%80%91Zookeeper%E8%AF%A6%E8%A7%A3/</id>
        <title>【Zookeeper】Zookeeper详解</title>
        <link rel="alternate" href="https://silvercrow42.github.io/joker.github.io/2024/09/24/%E3%80%90Zookeeper%E3%80%91Zookeeper%E8%AF%A6%E8%A7%A3/"/>
        <content type="html">&lt;h2 id=&#34;什么是zookeeper&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是zookeeper&#34;&gt;#&lt;/a&gt; 什么是 Zookeeper&lt;/h2&gt;
&lt;p&gt;Zookeeper 是一个开源的主动协调服务，用于分布式应用程序，提供了诸如配置维护、域名服务、分布式同步、组服务等功能。它是一个为分布式应用提供一致性服务的软件，其内部使用了一种称为&lt;br&gt;
 Zab 的协议（在选举过程中使用 Paxos 协议）来保证分布式环境中不同节点之间的数据一致性。&lt;/p&gt;
&lt;p&gt;Zookeeper 的主要特点包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高可用性：Zookeeper 可以构建为集群模式，通过多数派存活原则来保证服务的高可用性。&lt;/li&gt;
&lt;li&gt;顺序一致性：客户端请求按照发起顺序进行处理。&lt;/li&gt;
&lt;li&gt;原子性：所有事务要么全部成功，要么全部失败。&lt;/li&gt;
&lt;li&gt;单一视图：无论客户端连接到集群中的哪个服务器，看到的服务视图都是一样的。&lt;/li&gt;
&lt;li&gt;可靠性：一旦一个更新被应用并确认，该更新将一直有效，即使此时 Zookeeper 发生故障。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Zookeeper 的应用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据发布与订阅&lt;/p&gt;
&lt;p&gt;顾名思义就是将数据发布到 ZooKeeper 节点上，供订阅者动态获取数据，实现配置信息的集中式管理和动态更新。例如全局的配置信息，地址列表等就非常适合使用。&lt;br&gt;
数据发布 / 订阅的一个常见的场景是配置中心，发布者把数据发布到 ZooKeeper 的一个或一系列的节点上，供订阅者进行数据订阅，达到动态获取数据的目的。&lt;br&gt;
配置信息一般有几个特点:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据量小的 KV&lt;/li&gt;
&lt;li&gt;数据内容在运行时会发生动态变化&lt;/li&gt;
&lt;li&gt;集群机器共享，配置一致&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ZooKeeper 采用的是推拉结合的方式。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;推：服务端会推给注册了监控节点的客户端 Wathcer 事件通知&lt;/li&gt;
&lt;li&gt;拉：客户端获得通知后，然后主动到服务端拉取最新的数据&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命名服务&lt;/p&gt;
&lt;p&gt;作为分布式命名服务，命名服务是指通过指定的名字来获取资源或者服务的地址，利用 ZooKeeper 创建一个全局的路径，这个路径就可以作为一个名字，指向集群中的集群，提供的服务的地址，或者一个远程的对象等等。统一命名服务的命名结构图如下所示：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在分布式环境下，经常需要对应用 / 服务进行统一命名，便于识别不同服务。类似于域名与 IP 之间对应关系，IP 不容易记住，而域名容易记住。通过名称来获取资源或服务的地址，提供者等信息。&lt;/li&gt;
&lt;li&gt;按照层次结构组织服务 / 应用名称。可将服务名称以及地址信息写到 ZooKeeper 上，客户端通过 ZooKeeper 获取可用服务列表类。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分布式锁&lt;/p&gt;
&lt;p&gt;处于不同节点上不同的服务，它们可能需要顺序的访问一些资源，这里需要一把分布式的锁。&lt;br&gt;
分布式锁具有以下特性：写锁、读锁、时序锁。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写锁：在 zk 上创建的一个临时的无编号的节点。由于是无序编号，在创建时不会自动编号，导致只能客户端有一个客户端得到锁，然后进行写入。&lt;/li&gt;
&lt;li&gt;读锁：在 zk 上创建一个临时的有编号的节点，这样即使下次有客户端加入是同时创建相同的节点时，他也会自动编号，也可以获得锁对象，然后对其进行读取。&lt;/li&gt;
&lt;li&gt;时序锁：在 zk 上创建的一个临时的有编号的节点根据编号的大小控制锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;集群管理&lt;/p&gt;
&lt;p&gt;所谓集群管理就是：是否有机器退出和加入、选举 master。&lt;br&gt;
集群管理主要指集群监控和集群控制两个方面。前者侧重于集群运行时的状态的收集，后者则是对集群进行操作与控制。开发和运维中，面对集群，经常有如下需求:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;希望知道集群中究竟有多少机器在工作&lt;/li&gt;
&lt;li&gt;对集群中的每台机器的运行时状态进行数据收集&lt;/li&gt;
&lt;li&gt;对集群中机器进行上下线的操作&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;集群管理结构如下所示：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;分布式环境中，实时掌握每个节点的状态是必要的，可根据节点实时状态做出一些调整。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可交由 ZooKeeper 实现。&lt;br&gt;
可将节点信息写入 ZooKeeper 上的一个 Znode。&lt;br&gt;
监听这个 Znode 可获取它的实时状态变化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;典型应用&lt;/p&gt;
&lt;p&gt;Hbase 中 Master 状态监控与选举。&lt;br&gt;
利用 ZooKeeper 的强一致性，能够保证在分布式高并发情况下节点创建的全局唯一性，即：同时有多个客户端请求创建&lt;br&gt;
 /currentMaster&lt;br&gt;
 节点，最终一定只有一个客户端请求能够创建成功&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分布式通知与协调&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;分布式环境中，经常存在一个服务需要知道它所管理的子服务的状态。
&lt;ol&gt;
&lt;li&gt;NameNode 需知道各个 Datanode 的状态。&lt;/li&gt;
&lt;li&gt;JobTracker 需知道各个 TaskTracker 的状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;心跳检测机制可通过 ZooKeeper 来实现。&lt;/li&gt;
&lt;li&gt;信息推送可由 ZooKeeper 来实现，ZooKeeper 相当于一个发布 / 订阅系统。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分布式队列管理&lt;/p&gt;
&lt;p&gt;分布式队列分为两种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当一个队列的成员都聚齐时，这个队列才可用，否则一直等待所有成员到达，这种是同步队列。
&lt;ol&gt;
&lt;li&gt;一个 job 由多个 task 组成，只有所有任务完成后，job 才运行完成。&lt;/li&gt;
&lt;li&gt;可为 job 创建一个 /job 目录，然后在该目录下，为每个完成的 task 创建一个临时的 Znode，一旦临时节点数目达到 task 总数，则表明 job 运行完成。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;队列按照 FIFO 方式进行入队和出队操作，例如实现生产者和消费者模型&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;znode&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#znode&#34;&gt;#&lt;/a&gt; Znode&lt;/h2&gt;
&lt;p&gt;Znode 是 Zookeeper 中的基本数据结构，用于存储数据和组织数据结构。&lt;br&gt;
每个 Znode 都有一个唯一的路径，路径类似于文件系统的路径，以 / 开头。&lt;/p&gt;
&lt;p&gt;Znode 的属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据内容：
&lt;ul&gt;
&lt;li&gt;data：Znode 存储的数据内容，最大为 1MB。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ACL（Access Control List）：
&lt;ul&gt;
&lt;li&gt;权限控制列表：定义了对 Znode 的访问权限，包括读、写、创建子节点等权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;版本信息：
&lt;ul&gt;
&lt;li&gt;version：Znode 的版本号，用于数据一致性检查。&lt;/li&gt;
&lt;li&gt;cversion：子节点的版本号。&lt;/li&gt;
&lt;li&gt;aversion：ACL 的版本号。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;时间戳：
&lt;ul&gt;
&lt;li&gt;ctime：创建时间。&lt;/li&gt;
&lt;li&gt;mtime：最后修改时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;子节点：
&lt;ul&gt;
&lt;li&gt;children：Znode 可以拥有子节点，形成树状结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Znode 的类型包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;持久节点（Persistent）：持久节点在 ZooKeeper 服务器重启后不会丢失，除非显式删除。Java 创建示例如下：&lt;/p&gt;
 &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;zookeeper.create(&lt;span class=&#34;string&#34;&gt;&amp;quot;/path&amp;quot;&lt;/span&gt;, data, acl, CreateMode.PERSISTENT);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;临时节点（Ephemeral）：创建后，如果创建该节点的客户端会话断开，则自动删除。且其不能有子节点。Java 创建示例如下：&lt;/p&gt;
 &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;zookeeper.create(&lt;span class=&#34;string&#34;&gt;&amp;quot;/path&amp;quot;&lt;/span&gt;, data, acl, CreateMode.EPHEMERAL);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;顺序节点（Sequential）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;顺序节点在创建时自动获得一个唯一的序号，用于排序。例如，如果路径为 /path，创建的第一个顺序节点可能是&lt;br&gt;
 /path00000001。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;顺序节点也包含持久节点和临时节点两种持久化类型。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过 Java 创建一个路径为 &amp;quot;/path&amp;quot; 的持久顺序节点示例如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;zookeeper.create(&lt;span class=&#34;string&#34;&gt;&amp;quot;/path&amp;quot;&lt;/span&gt;, data, acl, CreateMode.PERSISTENT_SEQUENTIAL);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;默认情况下创建的 Znode 为持久节点类型。&lt;/p&gt;
&lt;p&gt;注意事项：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建节点时，必须要带上全路径。&lt;/li&gt;
&lt;li&gt;创建节点时，如果父节点不存在，ZooKeeper 会自动创建父节点。&lt;/li&gt;
&lt;li&gt;同一级节点 key 名称是唯一的。&lt;/li&gt;
&lt;li&gt;delete 命令只能一层一层删除，不能删除一个节点下的所有子节点。新版本可以通过 deleteall 命令递归删除。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;watch机制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#watch机制&#34;&gt;#&lt;/a&gt; Watch 机制&lt;/h2&gt;
&lt;h3 id=&#34;概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#概述&#34;&gt;#&lt;/a&gt; 概述&lt;/h3&gt;
&lt;p&gt;ZooKeeper 的 watch 机制是一种非常重要的特性，用于实现实时监控 ZooKeeper 中的数据变化。&lt;br&gt;
在 Spring Cloud 应用中，可以通过 Curator 框架结合 Spring Boot 来实现对 ZooKeeper 数据的监控。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本概念&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Watch：一种一次性触发的通知机制。&lt;/li&gt;
&lt;li&gt;Watcher：客户端注册的监听器，用于接收 ZooKeeper 的通知。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;工作原理&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注册 Watcher：客户端在执行某些操作（如获取节点数据、获取子节点列表等）时，可以注册一个 Watcher。&lt;/li&gt;
&lt;li&gt;触发 Watcher：当节点数据或子节点列表发生变化时，ZooKeeper 会触发相应的 Watcher。&lt;/li&gt;
&lt;li&gt;处理事件：客户端在收到 Watcher 触发的通知后，可以处理相应的事件，并重新注册 Watcher。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;事件类型&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NodeCreatedEvent：节点创建事件。&lt;/li&gt;
&lt;li&gt;NodeDeletedEvent：节点删除事件。&lt;/li&gt;
&lt;li&gt;NodeDataChangedEvent：节点数据变化事件。&lt;/li&gt;
&lt;li&gt;NodeChildrenChangedEvent：子节点列表变化事件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;使用场景&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置管理：在分布式系统中，配置管理需要实时监控配置的变化，以保持配置的实时一致性。&lt;/li&gt;
&lt;li&gt;监控服务：在分布式系统中，需要实时监控服务的状态，以确定服务的可用性。&lt;/li&gt;
&lt;li&gt;负载均衡：在分布式系统中，需要根据负载情况动态调整服务实例的数量，以实现负载均衡。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;在-spring-cloud-应用中的使用方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在-spring-cloud-应用中的使用方法&#34;&gt;#&lt;/a&gt; 在 Spring Cloud 应用中的使用方法&lt;/h3&gt;
&lt;h4 id=&#34;curator&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#curator&#34;&gt;#&lt;/a&gt; Curator&lt;/h4&gt;
&lt;p&gt;Curator 框架提供了简化 ZooKeeper 使用的 API，使得注册和处理 Watcher 更加方便。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建 Curator 客户端&lt;/p&gt;
&lt;p&gt;在 Spring Boot 应用中，可以通过配置 Curator 客户端来管理 ZooKeeper 连接。&lt;/p&gt;
 &lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;spring:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;curator:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;connect-string:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;localhost:2181&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;session-timeout-ms:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;5000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;connection-timeout-ms:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;3000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;retry-policy:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;base-sleep-time-ms:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;max-retries:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置 Curator 客户端&lt;/p&gt;
&lt;p&gt;在 Spring Boot 应用中，可以通过 @Configuration 类来配置 Curator 客户端。&lt;/p&gt;
 &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.curator.RetryPolicy;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.curator.framework.CuratorFramework;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.curator.framework.CuratorFrameworkFactory;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.curator.retry.ExponentialBackoffRetry;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.springframework.context.annotation.Bean;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.springframework.context.annotation.Configuration;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CuratorConfig&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CuratorFramework &lt;span class=&#34;title function_&#34;&gt;curatorFramework&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;RetryPolicy&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;retryPolicy&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ExponentialBackoffRetry&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;CuratorFramework&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;client&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; CuratorFrameworkFactory.builder()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                .connectString(&lt;span class=&#34;string&#34;&gt;&amp;quot;localhost:2181&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                .sessionTimeoutMs(&lt;span class=&#34;number&#34;&gt;5000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                .connectionTimeoutMs(&lt;span class=&#34;number&#34;&gt;3000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                .retryPolicy(retryPolicy)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                .build();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        client.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; client;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注册 Watcher&lt;/p&gt;
&lt;p&gt;在 Spring Boot 应用中，可以通过 Curator 框架提供的 NodeCache 和 PathChildrenCache 来注册 Watcher。&lt;/p&gt;
 &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.curator.framework.CuratorFramework;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.curator.framework.api.ACLProvider;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.curator.framework.recipes.cache.ChildData;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.curator.framework.recipes.cache.NodeCache;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.curator.framework.recipes.cache.NodeCacheListener;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.curator.framework.recipes.cache.PathChildrenCache;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.curator.framework.recipes.cache.PathChildrenCacheEvent;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.curator.framework.recipes.cache.PathChildrenCacheListener;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.curator.utils.CloseableUtils;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.zookeeper.CreateMode;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.zookeeper.WatchedEvent;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.apache.zookeeper.Watcher;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.springframework.beans.factory.annotation.Autowired;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.springframework.stereotype.Component;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;WatcherService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; CuratorFramework curatorFramework;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;watchNodeData&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;NodeCache&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;nodeCache&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;NodeCache&lt;/span&gt;(curatorFramework, &lt;span class=&#34;string&#34;&gt;&amp;quot;/testNode&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nodeCache.getListenable().addListener(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;NodeCacheListener&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;nodeChanged&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;type&#34;&gt;ChildData&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;currentData&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; nodeCache.getCurrentData();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (currentData != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Node data changed: &amp;quot;&lt;/span&gt; + &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;String&lt;/span&gt;(currentData.getData()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nodeCache.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;watchChildrenChanges&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;PathChildrenCache&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;childrenCache&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;PathChildrenCache&lt;/span&gt;(curatorFramework, &lt;span class=&#34;string&#34;&gt;&amp;quot;/testNode&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        childrenCache.getListenable().addListener(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;PathChildrenCacheListener&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;childEvent&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CuratorFramework client, PathChildrenCacheEvent event)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (event.getType()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; CHILD_ADDED:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Child added: &amp;quot;&lt;/span&gt; + event.getData().getPath());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; CHILD_UPDATED:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Child updated: &amp;quot;&lt;/span&gt; + event.getData().getPath());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; CHILD_REMOVED:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Child removed: &amp;quot;&lt;/span&gt; + event.getData().getPath());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Unknown event type: &amp;quot;&lt;/span&gt; + event.getType());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        childrenCache.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;zookeeper-命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#zookeeper-命令&#34;&gt;#&lt;/a&gt; Zookeeper 命令&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;ls: 列出指定节点下的所有子节点。 &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ls /path/to/node&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;get: 获取指定节点的数据以及其状态信息。 &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;get /path/to/node&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;set: 设置指定节点的数据。 &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;set /path/to/node new_data&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;create: 创建一个新的节点，并可以设置节点的权限和类型（持久化或临时）。 &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;create /path/to/new_node data [acl] [flags]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
其中 [acl] 表示访问控制列表，[flags] 可以是 0（持久化节点）或 1（临时节点）。&lt;/li&gt;
&lt;li&gt;delete: 删除指定的节点。 &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;delete /path/to/node&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;stat: 获取指定节点的状态信息。 &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ls /path/to/node&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;rmr: 递归删除一个节点及其所有的子节点。 &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;rmr /path/to/node&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;sync: 强制同步节点到所有服务器。 &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sync /path/to/node&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;close: 关闭当前客户端连接。 &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;close&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;zookeeper集群&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#zookeeper集群&#34;&gt;#&lt;/a&gt; Zookeeper 集群&lt;/h2&gt;
&lt;p&gt;Zookeeper 集群是一种分布式协调服务，主要用于解决分布式系统中的一致性问题。它通过一组服务器组成集群，共同维护一个高度一致的状态。&lt;/p&gt;
&lt;p&gt;Zookeeper 集群的组成和角色如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;领导者（Leader）：&lt;/p&gt;
&lt;p&gt;Leader 是 Zookeeper 集群中的核心角色，负责处理客户端请求并协调其他服务器的状态。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;处理客户端请求：
&lt;ul&gt;
&lt;li&gt;Leader 负责接收客户端的所有读写请求，并处理这些请求。&lt;/li&gt;
&lt;li&gt;对于读请求，Leader 可以直接返回结果。&lt;/li&gt;
&lt;li&gt;对于写请求，Leader 会广播给所有 Follower 和 Observer。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据同步：
&lt;ul&gt;
&lt;li&gt;Leader 负责将写请求广播给所有的 Follower，并确保所有 Follower 都正确地执行了写操作。&lt;/li&gt;
&lt;li&gt;Leader 通过事务日志（transaction log）和快照（snapshot）来保证数据的一致性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;选举协调：
&lt;ul&gt;
&lt;li&gt;当集群中出现故障或需要重新选举时，Leader 负责协调选举过程。&lt;/li&gt;
&lt;li&gt;Leader 通过投票机制来确定新的 Leader。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;跟随者（Follower）：&lt;/p&gt;
&lt;p&gt;Follower 是 Zookeeper 集群中的重要角色之一，负责接收客户端请求并将请求转发给 Leader。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收客户端请求：
&lt;ul&gt;
&lt;li&gt;Follower 可以接收客户端的请求，并将请求转发给 Leader。&lt;/li&gt;
&lt;li&gt;Follower 也可以直接处理客户端的读请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据同步：
&lt;ul&gt;
&lt;li&gt;Follower 负责同步 Leader 的状态。&lt;/li&gt;
&lt;li&gt;当 Leader 发送写请求时，Follower 会执行相同的写操作，并确认操作完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;选举参与：
&lt;ul&gt;
&lt;li&gt;Follower 参与选举过程，通过投票机制选举新的 Leader。&lt;/li&gt;
&lt;li&gt;当集群中出现故障时，Follower 会参与重新选举。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;观察者（Observer）：&lt;/p&gt;
&lt;p&gt;Observer 是 Zookeeper 集群中的辅助角色，主要用于提高集群的吞吐量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收客户端请求：
&lt;ul&gt;
&lt;li&gt;Observer 可以接收客户端的请求，并将请求转发给 Leader。&lt;/li&gt;
&lt;li&gt;Observer 不参与选举过程，因此不会影响选举的结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据同步：
&lt;ul&gt;
&lt;li&gt;Observer 负责同步 Leader 的状态。&lt;/li&gt;
&lt;li&gt;当 Leader 发送写请求时，Observer 会执行相同的写操作，并确认操作完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;提高吞吐量：
&lt;ul&gt;
&lt;li&gt;Observer 可以接收更多的客户端请求，从而提高集群的整体吞吐量。&lt;/li&gt;
&lt;li&gt;Observer 不参与选举过程，因此不会增加选举的复杂度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;数据一致性：Zookeeper 通过 ZAB 算法保证数据的一致性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事务日志：
&lt;ul&gt;
&lt;li&gt;每个服务器都会记录事务日志（transaction log），确保数据的一致性。&lt;/li&gt;
&lt;li&gt;在选举过程中，Leader 会根据事务日志同步其他服务器的状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;快照：
&lt;ul&gt;
&lt;li&gt;定期生成快照（snapshot），减少事务日志的大小，提高性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;zookeeper集群的读写流程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#zookeeper集群的读写流程&#34;&gt;#&lt;/a&gt; Zookeeper 集群的读写流程&lt;/h3&gt;
&lt;p&gt;Zookeeper 单机均遵循先写磁盘后写内存的写入模式，能够确保数据一致性。&lt;br&gt;
在集群模式下，当客户端向 Zookeeper 发送一个数据变更请求时，请求首先到达 Leader 节点。以下是详细的流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;写入事务日志
&lt;ol&gt;
&lt;li&gt;Leader 收到变更请求：
&lt;ul&gt;
&lt;li&gt;Leader 节点首先接收到客户端发送的数据变更请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;生成事务记录：
&lt;ul&gt;
&lt;li&gt;Leader 节点生成一条事务记录，这条记录包含了变更请求的所有细节，例如操作类型（创建、删除、更新）、节点路径、数据等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;写入事务日志：
&lt;ul&gt;
&lt;li&gt;Leader 节点将这条事务记录写入事务日志文件中。事务日志文件通常位于磁盘上，以确保数据的持久性。&lt;/li&gt;
&lt;li&gt;事务日志文件通常以 .log 或 .txn 结尾。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;写入内存
&lt;ol&gt;
&lt;li&gt;应用变更到内存：
&lt;ul&gt;
&lt;li&gt;在事务日志写入完成后，Leader 节点将变更请求应用到内存中的数据树。&lt;/li&gt;
&lt;li&gt;这一步确保了数据的一致性和实时性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;广播变更请求
&lt;ol&gt;
&lt;li&gt;广播变更请求：
&lt;ul&gt;
&lt;li&gt;Leader 节点将变更请求广播给所有 Follower 节点。&lt;/li&gt;
&lt;li&gt;Follower 节点接收到变更请求后，同样先写入事务日志，再写入内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;确认变更
&lt;ol&gt;
&lt;li&gt;Follower 处理变更：
&lt;ul&gt;
&lt;li&gt;每个 Follower 节点接收到变更请求后，先将其写入自己的事务日志文件中，然后再应用到内存中的数据树。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多数确认：
&lt;ul&gt;
&lt;li&gt;当大多数 Follower 节点确认收到并处理完变更请求后，Leader 节点认为变更成功。&lt;/li&gt;
&lt;li&gt;这一步确保了数据的一致性和可靠性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;返回结果：
&lt;ul&gt;
&lt;li&gt;Leader 节点将变更成功的消息返回给客户端。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;zookeeper集群的选举机制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#zookeeper集群的选举机制&#34;&gt;#&lt;/a&gt; Zookeeper 集群的选举机制&lt;/h3&gt;
&lt;p&gt;Zookeeper 的选举机制基于 Fast Leader Election (FLE) 算法，确保在一个分布式环境中快速且正确地选出领导者。&lt;/p&gt;
&lt;p&gt;Zookeeper 集群中的选举机制通常在以下几种情况下被触发：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始启动：当集群中的所有服务器首次启动时，它们需要选举出一个 Leader。&lt;/li&gt;
&lt;li&gt;Leader 故障：当当前的 Leader 发生故障（如宕机或网络分区）时，需要重新选举新的 Leader。&lt;/li&gt;
&lt;li&gt;Leader 步骤落后：当 Leader 的步骤落后于其他服务器时，可能需要重新选举新的 Leader。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在进行 Zookeeper 集群中，进行选举的节点具有以下状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LOOKING
&lt;ul&gt;
&lt;li&gt;定义：节点处于寻找领导者的状态。&lt;/li&gt;
&lt;li&gt;行为：节点会发起投票，并接收来自其他节点的投票信息。一旦收集到足够的投票信息，它会尝试成为领导者或者选择一个合适的领导者。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LEADING
&lt;ul&gt;
&lt;li&gt;定义：节点成为领导者。&lt;/li&gt;
&lt;li&gt;行为：负责协调集群中的所有事务操作，并向其他节点发送心跳信息以维持集群的一致性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FOLLOWING
&lt;ul&gt;
&lt;li&gt;定义：节点作为跟随者。&lt;/li&gt;
&lt;li&gt;行为：接收领导者的心跳信息和指令，并执行相应的操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OBSERVING
&lt;ul&gt;
&lt;li&gt;定义：节点作为观察者。&lt;/li&gt;
&lt;li&gt;行为：观察者可以参与投票过程，但不参与决策制定。观察者主要用于扩展集群的读取能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 ZooKeeper 的选举过程中，投票信息通常包含一个五元组，用于描述候选节点的状态和其他相关信息。这个五元组包括以下五个元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;epoch（纪元号）
&lt;ul&gt;
&lt;li&gt;定义：纪元号（epoch）是一个整数，用于标识选举周期。每次选举都会有一个新的纪元号。&lt;/li&gt;
&lt;li&gt;作用：纪元号用于区分不同的选举周期，防止旧的投票信息影响新的选举。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;zxid（事务 ID）
&lt;ul&gt;
&lt;li&gt;定义：事务 ID（zxid）是一个 64 位的整数，用于标识事务的唯一性。&lt;/li&gt;
&lt;li&gt;组成：zxid 由两部分组成：高 32 位是纪元号（epoch），低 32 位是事务编号（transaction number）。&lt;/li&gt;
&lt;li&gt;作用：用于确定哪个节点具有最新的事务信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;peerId（节点 ID）
&lt;ul&gt;
&lt;li&gt;定义：节点 ID（peerId）是一个唯一的标识符，用于标识集群中的每个节点。&lt;/li&gt;
&lt;li&gt;作用：用于识别投票来自哪个节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;leaderId（Leader ID）
&lt;ul&gt;
&lt;li&gt;定义：Leader ID（leaderId）是一个标识符，用于标识当前投票支持的候选 Leader。&lt;/li&gt;
&lt;li&gt;作用：用于确定哪个节点被投票支持作为新的 Leader。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;type（投票类型）
&lt;ul&gt;
&lt;li&gt;定义：投票类型（type）是一个标识符，用于描述当前投票的类型。&lt;/li&gt;
&lt;li&gt;作用：用于区分不同类型的投票，如 LOOKING、LEADING 或 LEADER。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参与运算的关键变量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;myid
&lt;ul&gt;
&lt;li&gt;定义：每个节点的唯一标识符。&lt;/li&gt;
&lt;li&gt;作用：用于区分不同的节点，在选举过程中用于投票。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;zxid
&lt;ul&gt;
&lt;li&gt;定义：事务 ID，表示最后一次提交的事务编号。&lt;/li&gt;
&lt;li&gt;作用：用于判断节点的状态是否最新。具有更大 zxid 的节点被认为是更 “新” 的节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;epoch
&lt;ul&gt;
&lt;li&gt;定义：选举轮次。&lt;/li&gt;
&lt;li&gt;作用：防止过期的投票信息干扰当前的选举过程。每次选举开始时，epoch 增加。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;peerState
&lt;ul&gt;
&lt;li&gt;定义：节点的当前状态。&lt;/li&gt;
&lt;li&gt;作用：记录节点当前处于哪种状态（LOOKING, LEADING, FOLLOWING, OBSERVING）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;votesReceived
&lt;ul&gt;
&lt;li&gt;定义：节点接收到的投票数量。&lt;/li&gt;
&lt;li&gt;作用：用于统计当前节点是否获得了大多数投票。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;lastVote
&lt;ul&gt;
&lt;li&gt;定义：节点上一次投票的对象。&lt;/li&gt;
&lt;li&gt;作用：记录上一次投票的对象，避免重复投票。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;electionType
&lt;ul&gt;
&lt;li&gt;定义：选举类型（例如普通选举或重新选举）。&lt;/li&gt;
&lt;li&gt;作用：用于区分不同类型的选举过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;详细流程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始化状态：当一个节点启动时，它会进入 LOOKING 状态。这意味着它正在寻找或试图成为领导者。&lt;/li&gt;
&lt;li&gt;初始化投票：每个节点在启动时会给自己投一票，并将投票信息（包括 myid 和 zxid）发送给集群中的其他节点。&lt;/li&gt;
&lt;li&gt;接收投票信息：节点会接收到其他节点的投票信息。&lt;/li&gt;
&lt;li&gt;比较和更新投票
&lt;ol&gt;
&lt;li&gt;比较 epoch：节点会比较接收到的投票信息中的 epoch 和自己的 epoch。
&lt;ul&gt;
&lt;li&gt;当接收到的 epoch 大于自己的 epoch，则更新自己的 epoch，并将新的投票信息再次发送给集群中的所有节点，防止投票过期。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;比较 zxid：节点会比较接收到的投票信息中的 zxid 和自己的 zxid。
&lt;ul&gt;
&lt;li&gt;如果接收到的投票信息中的 zxid 大于自己的 zxid，则更新自己的投票信息，并将新的投票信息再次发送给集群中的所有节点。&lt;/li&gt;
&lt;li&gt;如果接收到的投票信息中的 zxid 等于自己的 zxid，则比较 myid。
&lt;ul&gt;
&lt;li&gt;如果接收到的投票信息中的 myid 大于自己的 myid，则更新自己的投票信息，并将新的投票信息再次发送给集群中的所有节点。&lt;/li&gt;
&lt;li&gt;如果接收到的投票信息中的 myid 小于自己的 myid，则保持当前的投票信息不变。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果接收到的投票信息中的 zxid 小于自己的 zxid，则保持当前的投票信息不变。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;统计投票结果：每个节点会统计接收到的投票信息。如果一个特定的节点得到了大多数（超过半数）的投票，那么这个节点就被认为是领导者。
&lt;ul&gt;
&lt;li&gt;大多数投票：对于奇数个节点的集群，大多数意味着 (N + 1) / 2；对于偶数个节点，则需要 N / 2 + 1 才能构成大多数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;领导者确认：成功获得大多数投票的节点会向集群广播它的领导者身份。&lt;br&gt;
其他节点接收到这条消息后，会切换到 FOLLOWING 状态，并开始跟随新的领导者。&lt;/li&gt;
&lt;li&gt;故障转移：如果当前的领导者失效了，跟随者会重新进入 LOOKING 状态并开始新一轮的选举。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;示例流程&lt;/p&gt;
&lt;p&gt;假设有一个 Zookeeper 集群，包含三个节点 A、B 和 C：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始化状态：A、B 和 C 都进入 LOOKING 状态。&lt;/li&gt;
&lt;li&gt;投票：A、B 和 C 各自给自己投一票，并将投票信息发送给其他节点。假设
&lt;ul&gt;
&lt;li&gt;A 的 zxid 是 100。&lt;/li&gt;
&lt;li&gt;B 的 zxid 是 90。&lt;/li&gt;
&lt;li&gt;C 的 zxid 是 110。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接收投票：
&lt;ul&gt;
&lt;li&gt;A 收到 B 和 C 的投票信息。&lt;/li&gt;
&lt;li&gt;B 收到 A 和 C 的投票信息。&lt;/li&gt;
&lt;li&gt;C 收到 A 和 B 的投票信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;比较和更新投票：
&lt;ul&gt;
&lt;li&gt;A 发现 C 的 zxid 更大，更新自己的投票信息，并重新发送投票给 B 和 C。&lt;/li&gt;
&lt;li&gt;B 发现 C 的 zxid 更大，更新自己的投票信息，并重新发送投票给 A 和 C。&lt;/li&gt;
&lt;li&gt;C 发现自己的 zxid 最大，保持投票信息不变。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;统计投票结果：C 收到 A 和 B 的投票，统计后发现自己的投票数达到 2（超过半数）。&lt;/li&gt;
&lt;li&gt;领导者确认：
&lt;ul&gt;
&lt;li&gt;C 向 A 和 B 广播自己成为领导者的信息。&lt;/li&gt;
&lt;li&gt;A 和 B 收到消息后，切换到 FOLLOWING 状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;故障转移：如果 C 故障，A 和 B 重新进入 LOOKING 状态，重复上述流程。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;zookeeper的数据同步机制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#zookeeper的数据同步机制&#34;&gt;#&lt;/a&gt; Zookeeper 的数据同步机制&lt;/h3&gt;
&lt;p&gt;Zookeeper 使用 ZAB（Zookeeper Atomic Broadcast）协议来保证数据的一致性和高可用性。&lt;/p&gt;
&lt;p&gt;在集群中已经选举出 Leader 后，集群中的其他服务器会通过以下步骤与 Leader 保持同步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;状态同步&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新领导者确定事务状态：新领导者需要确定哪些事务应该保留，哪些事务应该撤销。&lt;/li&gt;
&lt;li&gt;事务日志检查：新领导者检查所有节点的事务日志，找出最新的事务状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;冲突解决&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;冲突检测：新领导者检查事务日志，找出冲突的事务。&lt;/li&gt;
&lt;li&gt;冲突解决策略：
&lt;ul&gt;
&lt;li&gt;基于事务编号（ZXID）：保留编号较大的事务。&lt;/li&gt;
&lt;li&gt;基于事务时间戳：保留时间戳较新的事务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Leader 同步&lt;/p&gt;
&lt;p&gt;选举出新的 Leader 后，Leader 会开始与其他 Follower 进行数据同步。具体步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Leader 发送事务日志：
&lt;ul&gt;
&lt;li&gt;Leader 将最新的事务日志（transaction log）发送给所有 Follower。&lt;/li&gt;
&lt;li&gt;事务日志包含了所有未提交的事务记录。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Follower 接收事务日志：
&lt;ul&gt;
&lt;li&gt;Follower 接收到事务日志后，会将其应用到本地状态上。&lt;/li&gt;
&lt;li&gt;Follower 会确认事务日志的正确性，并将确认信息发送回 Leader。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Leader 确认同步：
&lt;ul&gt;
&lt;li&gt;Leader 收到所有 Follower 的确认信息后，会确认数据同步完成。&lt;/li&gt;
&lt;li&gt;Leader 会发送确认信息给所有 Follower，表明数据同步完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Follower 同步&lt;/p&gt;
&lt;p&gt;Follower 在同步过程中需要确保与 Leader 的状态一致。具体步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Leader 发送写请求：
&lt;ul&gt;
&lt;li&gt;当 Leader 收到客户端的写请求时，会将写请求广播给所有 Follower。&lt;/li&gt;
&lt;li&gt;写请求包含具体的写操作和事务 ID（zxid）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Follower 执行写操作：
&lt;ul&gt;
&lt;li&gt;Follower 接收到写请求后，会执行相同的写操作，并记录事务日志。&lt;/li&gt;
&lt;li&gt;Follower 会将确认信息发送回 Leader，表明写操作已完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Leader 确认写操作：
&lt;ul&gt;
&lt;li&gt;Leader 收到所有 Follower 的确认信息后，会确认写操作完成。&lt;/li&gt;
&lt;li&gt;Leader 会发送确认信息给所有 Follower，表明写操作完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Observer 同步&lt;/p&gt;
&lt;p&gt;Observer 不参与选举过程，但需要同步 Leader 的数据以保持最新状态。具体步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Observer 同步数据：
&lt;ul&gt;
&lt;li&gt;Observer 从 Leader 获取最新的数据。&lt;/li&gt;
&lt;li&gt;Leader 将最新的事务日志发送给 Observer。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Observer 应用事务日志：
&lt;ul&gt;
&lt;li&gt;Observer 接收到事务日志后，会将其应用到本地状态上。&lt;/li&gt;
&lt;li&gt;Observer 会确认事务日志的正确性，并将确认信息发送回 Leader。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Leader 确认同步：
&lt;ul&gt;
&lt;li&gt;Leader 收到 Observer 的确认信息后，会确认数据同步完成。&lt;/li&gt;
&lt;li&gt;Leader 会发送确认信息给 Observer，表明数据同步完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;详细流程示例&lt;/p&gt;
&lt;p&gt;假设集群中有三个服务器：Server A、Server B 和 Server C。Server A 成为 Leader，Server B 和 Server C 作为 Follower。此外，还有一个&lt;br&gt;
 Observer 服务器 Server D。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Leader 同步：
&lt;ul&gt;
&lt;li&gt;Server A 发送最新的事务日志给 Server B 和 Server C。&lt;/li&gt;
&lt;li&gt;Server B 和 Server C 接收到事务日志后，应用到本地状态，并发送确认信息给 Server A。&lt;/li&gt;
&lt;li&gt;Server A 收到所有 Follower 的确认信息后，确认数据同步完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Follower 同步：
&lt;ul&gt;
&lt;li&gt;当 Server A 收到客户端的写请求时，将写请求广播给 Server B 和 Server C。&lt;/li&gt;
&lt;li&gt;Server B 和 Server C 执行相同的写操作，并记录事务日志。&lt;/li&gt;
&lt;li&gt;Server B 和 Server C 发送确认信息给 Server A。&lt;/li&gt;
&lt;li&gt;Server A 收到所有 Follower 的确认信息后，确认写操作完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Observer 同步：
&lt;ul&gt;
&lt;li&gt;Server D 从 Server A 获取最新的事务日志。&lt;/li&gt;
&lt;li&gt;Server A 发送最新的事务日志给 Server D。&lt;/li&gt;
&lt;li&gt;Server D 接收到事务日志后，应用到本地状态，并发送确认信息给 Server A。&lt;/li&gt;
&lt;li&gt;Server A 收到 Observer 的确认信息后，确认数据同步完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;zookeeper的持久化机制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#zookeeper的持久化机制&#34;&gt;#&lt;/a&gt; Zookeeper 的持久化机制&lt;/h3&gt;
&lt;p&gt;Zookeeper 的数据持久化机制是其可靠性的关键组成部分之一。为了确保数据在系统崩溃或重启后仍然可用，Zookeeper 采用了多种机制来实现数据持久化。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;事务日志（Transaction Log）&lt;/p&gt;
&lt;p&gt;事务日志记录了所有对 Zookeeper 数据树的操作。每次写操作都会被记录在事务日志中，以便在系统崩溃后能够恢复数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;事务日志的作用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录所有写操作：每次写操作（如创建节点、删除节点、更新节点数据等）都会被记录在事务日志中。&lt;/li&gt;
&lt;li&gt;支持数据恢复：在系统崩溃后，可以通过事务日志恢复数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事务日志的存储&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事务日志通常存储在磁盘上，以确保数据的安全性和持久性。每个 Server 都有自己的事务日志文件，通常位于配置文件&lt;br&gt;
 zoo.cfg&lt;br&gt;
 中指定的目录下。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事务日志的格式&lt;/p&gt;
&lt;p&gt;事务日志文件通常以 .log 或 .txn 结尾。每个事务日志文件包含一系列事务记录，每条记录包含以下信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事务类型：标识操作类型（如 create、delete、setData 等）。&lt;/li&gt;
&lt;li&gt;事务 ID（zxid）：唯一的事务标识符。&lt;/li&gt;
&lt;li&gt;操作详情：具体的操作内容（如节点路径、数据等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;快照（Snapshot）&lt;/p&gt;
&lt;p&gt;快照是对 Zookeeper 数据树的一个完整备份。快照定期生成，以减少事务日志的大小，并提高恢复速度。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;快照的作用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快速恢复数据：在系统崩溃后，可以通过快照快速恢复数据。&lt;/li&gt;
&lt;li&gt;减少事务日志大小：定期生成快照可以减少事务日志的大小，提高系统性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;快照的存储&lt;/p&gt;
&lt;p&gt;快照通常也存储在磁盘上，与事务日志文件一起存放在配置文件 zoo.cfg 中指定的目录下。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;快照的格式&lt;/p&gt;
&lt;p&gt;快照文件通常以 .snapshot 或 .snap 结尾。每个快照文件包含以下信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据树的完整状态：当前 Zookeeper 数据树的完整状态。&lt;/li&gt;
&lt;li&gt;事务 ID（zxid）：最后一个事务的 ID，用于标识快照的时间点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;恢复机制&lt;/p&gt;
&lt;p&gt;当 Zookeeper 服务器启动时，需要从磁盘上的事务日志和快照文件中恢复数据。恢复过程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;加载快照：服务器启动时，首先加载最新的快照文件，恢复数据树的基本状态。&lt;/li&gt;
&lt;li&gt;重放事务日志：从最新的快照时间点之后的事务日志开始重放，逐条执行事务日志中的操作，直到最新的事务日志为止。&lt;/li&gt;
&lt;li&gt;检查一致性：服务器会检查数据树的状态是否一致，确保没有遗漏的操作。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="后端" />
        <category term="java" />
        <category term="Zookeeper" />
        <updated>2024-09-24T03:39:53.000Z</updated>
    </entry>
    <entry>
        <id>https://silvercrow42.github.io/joker.github.io/2024/09/13/%E3%80%90Redis%E3%80%91Redis%E8%AF%A6%E8%A7%A3/</id>
        <title>【Redis】Redis详解</title>
        <link rel="alternate" href="https://silvercrow42.github.io/joker.github.io/2024/09/13/%E3%80%90Redis%E3%80%91Redis%E8%AF%A6%E8%A7%A3/"/>
        <content type="html">&lt;h1 id=&#34;概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#概念&#34;&gt;#&lt;/a&gt; 概念&lt;/h1&gt;
&lt;h2 id=&#34;redis-是什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis-是什么&#34;&gt;#&lt;/a&gt; Redis 是什么&lt;/h2&gt;
&lt;p&gt;Redis（Remote Dictionary Server）是一个开源的键值存储系统，以其高性能和低延迟著称。它最初由 Salvatore&lt;br&gt;
Sanfilippo 编写，并于 2009 年首次发布。Redis 不仅可以作为数据库使用，还可以作为缓存和消息代理。Redis 支持多种数据结构，如字符串（strings）、散列（hashes）、列表（lists）、集合（sets）、有序集合（sorted&lt;br&gt;
sets）等，这使得它非常适合用于多种应用场景&lt;/p&gt;
&lt;h2 id=&#34;redis-的特点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis-的特点&#34;&gt;#&lt;/a&gt; Redis 的特点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;内存存储：Redis 将所有数据都存储在内存中，这使得它能够提供非常高的读写速度，通常能够达到数十万次每秒的读写操作（QPS）。&lt;/li&gt;
&lt;li&gt;持久化：尽管 Redis 主要是一个内存数据库，但它也提供了数据持久化的机制，包括 RDB（Redis Database Backup）快照和 AOF（Append Only&lt;br&gt;
File）日志两种方式。&lt;/li&gt;
&lt;li&gt;数据结构丰富：除了基本的键值对存储之外，Redis 还支持多种复杂的数据结构，如列表、集合、有序集合等，这使得它非常适合用于构建复杂的数据模型。&lt;/li&gt;
&lt;li&gt;网络透明：Redis 使用 TCP 协议，客户端可以通过网络访问 Redis 服务器，支持跨平台部署。&lt;/li&gt;
&lt;li&gt;主从复制：Redis 支持主从复制机制，可以轻松地设置数据备份和读写分离。&lt;/li&gt;
&lt;li&gt;Lua 脚本：Redis 支持在服务器端执行 Lua 脚本，允许用户将复杂的操作封装成一个原子性的操作。&lt;/li&gt;
&lt;li&gt;事务：Redis 支持事务，允许用户将一系列操作打包成一个单独的命令序列执行。&lt;/li&gt;
&lt;li&gt;发布 / 订阅模式：Redis 支持发布 / 订阅模式，可以用于构建消息队列或事件驱动的应用程序。&lt;/li&gt;
&lt;li&gt;集群：Redis 3.0 之后版本支持官方的集群模式，可以实现数据的水平扩展。&lt;/li&gt;
&lt;li&gt;多线程：Redis 6.0 版本引入了多线程模型，用于异步处理 I/O 和其他耗时操作，进一步提升了性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;redis-的应用场景&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis-的应用场景&#34;&gt;#&lt;/a&gt; Redis 的应用场景&lt;/h2&gt;
&lt;p&gt;由于其高性能和灵活性，Redis 被广泛应用于多种场景中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缓存：由于 Redis 的高速读写能力，它经常被用作 Web 应用的缓存层，以减轻后端数据库的压力。&lt;/li&gt;
&lt;li&gt;会话存储：Redis 可以用来存储用户的会话信息，支持快速的读取和更新操作。&lt;/li&gt;
&lt;li&gt;排行榜：Redis 的有序集合非常适合用来构建排行榜，可以高效地进行排序和范围查询。&lt;/li&gt;
&lt;li&gt;消息队列：通过发布 / 订阅模式，Redis 可以作为一个轻量级的消息队列系统。&lt;/li&gt;
&lt;li&gt;实时数据分析：Redis 的数据结构非常适合用于处理实时数据流，如实时统计、监控等。&lt;/li&gt;
&lt;li&gt;分布式锁：Redis 可以用来实现简单的分布式锁机制，协调多个节点上的并发操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;redis-的数据结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis-的数据结构&#34;&gt;#&lt;/a&gt; Redis 的数据结构&lt;/h2&gt;
&lt;h3 id=&#34;底层数据结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#底层数据结构&#34;&gt;#&lt;/a&gt; 底层数据结构&lt;/h3&gt;
&lt;h4 id=&#34;redisobject&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redisobject&#34;&gt;#&lt;/a&gt; redisObject&lt;/h4&gt;
&lt;p&gt;定义：redisObject（通常缩写为 robj）是 Redis 中用来表示数据库键值对的一个核心数据结构。每一个键值对在 Redis 内部都会被转化为一个 redisObject 实例进行管理。这个结构体不仅包含了键或值本身的数据，还提供了额外的信息来帮助 Redis 更好地管理和操作这些对象。&lt;/p&gt;
&lt;p&gt;用途：redisObject 是 Redis 中键值对存储的数据结构，它封装了键和值，并提供了额外的元数据，如引用计数、过期时间等。其主要作用在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类型和编码：它使得 Redis 能够灵活地存储不同类型的数据，并且可以根据数据的特点选择最合适的编码方式来存储，从而优化内存使用和访问速度。&lt;/li&gt;
&lt;li&gt;内存管理：通过引用计数，redisObject 支持对象的共享和自动内存回收，减少了不必要的内存分配和释放操作。&lt;/li&gt;
&lt;li&gt;LRU 缓存淘汰：通过记录对象的最后访问时间，Redis 可以实现基于 LRU 算法的对象淘汰，从而在内存资源有限的情况下，优先保留最近使用的对象。&lt;/li&gt;
&lt;li&gt;共享对象：对于一些常用的简单对象（如数字 0 和 1，以及空字符串），Redis 会创建一次并复用，这减少了创建和销毁对象的开销。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;底层实现：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;redisObject&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; type:&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; encoding:&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; lru:REDIS_LRU_BITS; &lt;span class=&#34;comment&#34;&gt;/* LRU time (relative to server.lruclock) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; refcount;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; *ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; robj;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;redisObject 的基本结构通常包含以下字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;type: 一个 4 位的无符号整数，用来标识对象的类型。Redis 支持多种数据类型，如字符串（string）、列表（list）、集合（set）、哈希（hash）、有序集合（sorted&lt;br&gt;
set）等，每种类型都有一个对应的标识符。&lt;/li&gt;
&lt;li&gt;encoding: 另一个 4 位的无符号整数，表示对象的编码方式。不同的数据类型有不同的内部编码方式，例如字符串可以是普通的字符串，也可以是压缩后的字符串（embstr），列表可以是链表（list）或者快速列表（quicklist）等。&lt;/li&gt;
&lt;li&gt;lru: 一个时间戳，记录了对象最后一次被访问的时间（相对于服务器的 lruclock）。这个字段用于实现 Redis 的 LRU（Least Recently&lt;br&gt;
Used）缓存淘汰策略。&lt;/li&gt;
&lt;li&gt;refcount: 引用计数器，用来追踪有多少地方引用了这个对象。当一个对象不再被任何地方引用时，其引用计数器减至零，Redis 可以回收该对象占用的内存。&lt;/li&gt;
&lt;li&gt;ptr: 一个指向实际数据的指针。这个指针指向的具体内容依赖于对象的类型和编码方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;动态字符串sds&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#动态字符串sds&#34;&gt;#&lt;/a&gt; 动态字符串（SDS）&lt;/h4&gt;
&lt;p&gt;定义：SDS（Simple Dynamic String）是一种动态字符串，它使用一个结构体来保存字符串的指针、长度和未使用的空间。&lt;/p&gt;
&lt;p&gt;底层实现：使用简单动态字符串（SDS）来存储数据，SDS 是为了克服 C 字符串的一些不足而设计的。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sdshdr&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//记录buf数组中已使用字节的数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//等于 SDS 保存字符串的长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; len;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//记录 buf 数组中未使用字节的数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;free&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//字节数组，用于保存字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; buf[];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用 SDS 保存字符串 “Redis” 具体图示如下：&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/13/%E3%80%90Redis%E3%80%91Redis%E8%AF%A6%E8%A7%A3/1120165-20180528075607627-218845583.png&#34; class=&#34;&#34; title=&#34;1120165-20180528075607627-218845583.png&#34;&gt;
&lt;p&gt;图片来源：《Redis 设计与实现》&lt;/p&gt;
&lt;p&gt;我们看上面对于 SDS 数据类型的定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;len 保存了 SDS 保存字符串的长度&lt;/li&gt;
&lt;li&gt;buf [] 数组用来保存字符串的每个元素&lt;/li&gt;
&lt;li&gt;free j 记录了 buf 数组中未使用的字节数量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面的定义相对于 C 语言对于字符串的定义，有什么好处？&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/13/%E3%80%90Redis%E3%80%91Redis%E8%AF%A6%E8%A7%A3/1120165-20180527234349672-568401853.png&#34; class=&#34;&#34; title=&#34;1120165-20180528075607627-218845583.png&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;常数复杂度获取字符串长度：由于 len 属性的存在，我们获取 SDS 字符串的长度只需要读取 len 属性，时间复杂度为 O (1)。而对于 C&lt;br&gt;
 语言，获取字符串的长度通常是经过遍历计数来实现的，时间复杂度为 O (n)。通过 strlen key 命令可以获取 key 的字符串长度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;杜绝缓冲区溢出：我们知道在 C 语言中使用 strcat 函数来进行两个字符串的拼接，一旦没有分配足够长度的内存空间，就会造成缓冲区溢出。而对于&lt;br&gt;
 SDS 数据类型，在进行字符修改的时候，会首先根据记录的 len 属性检查内存空间是否满足需求。如果不满足，会进行相应的空间扩展，然后在进行修改操作，所以不会出现缓冲区溢出。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;减少修改字符串的内存重新分配次数:&lt;br&gt;
C 语言由于不记录字符串的长度，所以如果要修改字符串，必须要重新分配内存（先释放再申请），因为如果没有重新分配，字符串长度增大时会造成内存缓冲区溢出，字符串长度减小时会造成内存泄露。&lt;/p&gt;
&lt;p&gt;而对于 SDS，由于 len 属性和 free 属性的存在，对于修改字符串 SDS 实现了空间预分配和惰性空间释放两种策略：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;空间预分配：对字符串进行空间扩展的时候，扩展的内存比实际需要的多，这样可以减少连续执行字符串增长操作所需的内存重分配次数。&lt;/li&gt;
&lt;li&gt;惰性空间释放：对字符串进行缩短操作时，程序不立即使用内存重新分配来回收缩短后多余的字节，而是使用 free&lt;br&gt;
 属性将这些字节的数量记录下来，等待后续使用。（当然 SDS 也提供了相应的 API，当我们有需要时，也可以手动释放这些未使用的空间。）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二进制安全&lt;/p&gt;
&lt;p&gt;因为 C 字符串以空字符作为字符串结束的标识，而对于一些二进制文件（如图片等），内容可能包括空字符串，因此 C 字符串无法正确存取；而所有&lt;br&gt;
 SDS 的 API 都是以处理二进制的方式来处理 buf 里面的元素，并且 SDS 不是以空字符串来判断是否结束，而是以 len&lt;br&gt;
 属性表示的长度来判断字符串是否结束。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;兼容部分 C 字符串函数&lt;/p&gt;
&lt;p&gt;虽然 SDS 是二进制安全的，但是一样遵从每个字符串都是以空字符串结尾的惯例，这样可以重用 C 语言库 &amp;lt;string.h&amp;gt; 中的一部分函数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一般来说，SDS 除了保存数据库中的字符串值以外，SDS 还可以作为缓冲区（buffer）来使用。&lt;/p&gt;
&lt;h4 id=&#34;压缩列表zip-list&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#压缩列表zip-list&#34;&gt;#&lt;/a&gt; 压缩列表（Zip List）&lt;/h4&gt;
&lt;p&gt;定义：Ziplist 是一种特殊的内存紧凑型数据结构，用于存储多个相邻的元素。它主要用于实现 Redis 中的列表（List）和哈希（Hash）数据类型，当这些数据类型的数据量较小且元素较短时，使用 ziplist 可以节省内存空间。&lt;/p&gt;
&lt;p&gt;底层实现：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; header; &lt;span class=&#34;comment&#34;&gt;// 标记ziplist的开始，通常是一个固定的字节（例如 0x01）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; length; &lt;span class=&#34;comment&#34;&gt;// 整个ziplist的长度，包括所有条目和前缀信息。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Entries&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Each entry has a length prefix and content&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// The number of entries is determined by the length field&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Example entry structure:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Length prefix (1 or 5 bytes)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Content (variable length)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// End marker&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; end; &lt;span class=&#34;comment&#34;&gt;// 标记ziplist的结束，通常是一个固定的字节（例如 0xff）。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;type&#34;&gt;ziplist_t&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实现细节：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前缀：每个元素的前缀包含了元素的长度信息，以及元素的类型信息。&lt;/li&gt;
&lt;li&gt;长度编码：ziplist 使用可变长度编码来存储元素的长度，这样可以更高效地利用内存。&lt;/li&gt;
&lt;li&gt;内存紧凑：由于 ziplist 将所有元素存储在一个连续的内存区域中，因此它可以有效地减少内存碎片。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;连续存储：ziplist 将多个元素存储在一个连续的内存块中。&lt;/li&gt;
&lt;li&gt;元素和长度信息：每个元素的前面都会有一个前缀，这个前缀包含了元素的长度信息。&lt;/li&gt;
&lt;li&gt;支持多种类型：ziplist 可以存储整数或字符串，整数直接存储在前缀中，字符串则存储在前缀之后。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;双向链表linkedlist&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#双向链表linkedlist&#34;&gt;#&lt;/a&gt; 双向链表（linkedlist）&lt;/h4&gt;
&lt;p&gt;定义：在 Redis 中，linkedlist（通常指的是 Redis 内部实现的双向链表）是 Redis 用来存储 list 键值对的一种底层数据结构。它允许 Redis 从列表的两端高效地添加和移除元素，&lt;/p&gt;
&lt;p&gt;底层实现：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 定义一个双向链表节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt;  &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;listNode&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;comment&#34;&gt;//前置节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;listNode&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;prev&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;comment&#34;&gt;//后置节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;listNode&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;next&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;comment&#34;&gt;//节点的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; *value;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;listNode&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 定义一个双向链表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;list&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;comment&#34;&gt;//表头节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     listNode *head;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;comment&#34;&gt;//表尾节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     listNode *tail;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;comment&#34;&gt;//链表所包含的节点数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; len;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;comment&#34;&gt;//节点值复制函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; (*&lt;span class=&#34;built_in&#34;&gt;free&lt;/span&gt;) (&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; *ptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;comment&#34;&gt;//节点值释放函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; (*&lt;span class=&#34;built_in&#34;&gt;free&lt;/span&gt;) (&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; *ptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;comment&#34;&gt;//节点值对比函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; (*match) (&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; *ptr,&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; *key);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;span class=&#34;built_in&#34;&gt;list&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;数据结构如下图&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/13/%E3%80%90Redis%E3%80%91Redis%E8%AF%A6%E8%A7%A3/1120165-20180528074403440-111834793.png&#34; class=&#34;&#34; title=&#34;1120165-20180528074403440-111834793.png&#34;&gt;
&lt;p&gt;Redis 的 linkedlist 是由一系列 listNode 节点构成的双向链表。&lt;/p&gt;
&lt;p&gt;每个 listNode 包含三个主要部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;prev：指向列表中前一个节点的指针。&lt;/li&gt;
&lt;li&gt;next：指向列表中后一个节点的指针。&lt;/li&gt;
&lt;li&gt;value：存储实际数据的字段，这个字段实际上是指向 redisObject 的指针，redisObject 包含了实际的数据和元数据（如类型、编码等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个 list 包含三个主要部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;head：指向链表的第一个节点。&lt;/li&gt;
&lt;li&gt;tail：指向链表的最后一个节点。&lt;/li&gt;
&lt;li&gt;len：链表的长度，即链表中节点的数量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;双向链接：每个节点都包含前驱和后继指针，这使得可以从链表的任一端开始遍历整个链表。&lt;/li&gt;
&lt;li&gt;无环：表头节点的 prev 指针和表尾节点的 next 指针都指向 NULL, 对链表的访问都是以 NULL 结束。&lt;/li&gt;
&lt;li&gt;带链表长度计数器：通过 len 属性获取链表长度的时间复杂度为 O (1)。&lt;/li&gt;
&lt;li&gt;多态：链表节点使用 void* 指针来保存节点值，可以保存各种不同类型的值。&lt;/li&gt;
&lt;li&gt;动态增长：随着元素的增加，链表可以动态增长。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;哈希表hashtable&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#哈希表hashtable&#34;&gt;#&lt;/a&gt; 哈希表（Hashtable）&lt;/h4&gt;
&lt;p&gt;定义：hashtable（哈希表）是一种用于存储键值对的数据结构，它在 Redis 内部用于实现哈希（hash）类型。哈希表允许快速地插入、查找和删除键值对，并且提供了良好的性能。&lt;/p&gt;
&lt;p&gt;底层实现：Redis 中的哈希表实现主要包括两个核心组件：一个数组和一个链表。数组中的每个槽（slot）都可以存储一个链表，链表中的每个节点代表一个键值对。这种设计允许哈希表处理哈希冲突，即多个键映射到同一个数组索引的情况。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;dict&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dictEntry **table; &lt;span class=&#34;comment&#34;&gt;// 哈希桶数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; size; &lt;span class=&#34;comment&#34;&gt;// 哈希桶数组大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; used; &lt;span class=&#34;comment&#34;&gt;// 已使用的哈希桶数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dictResizeFunc *resize; &lt;span class=&#34;comment&#34;&gt;// 重置哈希表大小的函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; (*rehashidx); &lt;span class=&#34;comment&#34;&gt;// 当前正在进行的哈希表重置索引&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; states; &lt;span class=&#34;comment&#34;&gt;// 哈希表状态标志&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; dict;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Redis 中的哈希表结构定义通常包括以下几个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;table：一个数组，数组的每个元素都是一个链表。&lt;/li&gt;
&lt;li&gt;size：数组的大小。&lt;/li&gt;
&lt;li&gt;used：已使用的槽的数量，即存储键值对的链表数量。&lt;/li&gt;
&lt;li&gt;resize_policy：在某些 Redis 版本中，可能还包括用于控制何时进行重新哈希（resizing）的策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;哈希表 table 中每个元素都是指向 dict.h/dictEntry 结构，dictEntry 结构定义如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;dictEntry&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; *key; &lt;span class=&#34;comment&#34;&gt;// 键&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; *val; &lt;span class=&#34;comment&#34;&gt;// 值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;uint64_t&lt;/span&gt; ival; &lt;span class=&#34;comment&#34;&gt;// 整数值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; v;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;dictEntry&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;next&lt;/span&gt;;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// 指向下一个同散列值的dictEntry&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; dictEntry;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;每个键值对存储在一个 dictEntry 结构体中，该结构体包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;key：键的指针，指向 redisObject。&lt;/li&gt;
&lt;li&gt;val：值的指针，同样指向 redisObject。&lt;/li&gt;
&lt;li&gt;next：指向链表中下一个节点的指针，用于处理哈希冲突。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;哈希冲突的优化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#哈希冲突的优化&#34;&gt;#&lt;/a&gt; 哈希冲突的优化&lt;/h5&gt;
&lt;p&gt;我们知道哈希表最大的问题是存在哈希冲突，如何解决哈希冲突，有开放地址法和链地址法。这里采用的便是链地址法，通过 next 这个指针可以将多个哈希值相同的键值对连接在一起，用来解决哈希冲突。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/13/%E3%80%90Redis%E3%80%91Redis%E8%AF%A6%E8%A7%A3/1120165-20180528080655703-1600710948.png&#34; class=&#34;&#34; title=&#34;1120165-20180528080655703-1600710948.png&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;哈希算法：Redis 计算哈希值和索引值方法如下：&lt;/p&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;、使用字典设置的哈希函数，计算键 key 的哈希值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;hash = dict-&amp;gt;type-&amp;gt;hashFunction(key);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;、使用哈希表的sizemask属性和第一步得到的哈希值，计算索引值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;index = hash &amp;amp; dict-&amp;gt;ht[x].sizemask;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决哈希冲突：这个问题上面我们介绍了，方法是链地址法。通过字典里面的 *next 指针指向下一个具有相同索引值的哈希表节点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;扩容和收缩：当哈希表保存的键值对太多或者太少时，就要通过 rerehash (重新散列）来对哈希表进行相应的扩展或者收缩。具体步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果执行扩展操作，会基于原哈希表创建一个大小等于 ht [0].used*2n 的哈希表（也就是每次扩展都是根据原哈希表已使用的空间扩大一倍创建另一个哈希表）。&lt;br&gt;
相反如果执行的是收缩操作，每次收缩是根据已使用空间缩小一倍创建一个新的哈希表。&lt;/li&gt;
&lt;li&gt;重新利用上面的哈希算法，计算索引值，然后将键值对放到新的哈希表位置上。&lt;/li&gt;
&lt;li&gt;所有键值对都迁徙完毕后，释放原哈希表的内存空间。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;触发扩容的条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务器目前没有执行 BGSAVE 命令或者 BGREWRITEAOF 命令，并且负载因子大于等于 1。&lt;/li&gt;
&lt;li&gt;服务器目前正在执行 BGSAVE 命令或者 BGREWRITEAOF 命令，并且负载因子大于等于 5。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ps：负载因子 = 哈希表已保存节点数量 / 哈希表大小。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;渐近式 rehash&lt;/p&gt;
&lt;p&gt;什么叫渐进式 rehash？ 也就是说扩容和收缩操作不是一次性、集中式完成的，而是分多次、渐进式完成的。如果保存在 Redis 中的键值对只有几个几十个，那么&lt;br&gt;
 rehash 操作可以瞬间完成，但是如果键值对有几百万，几千万甚至几亿，那么要一次性的进行&lt;br&gt;
 rehash，势必会造成 Redis 一段时间内不能进行别的操作。所以 Redis 采用渐进式&lt;br&gt;
 rehash, 这样在进行渐进式 rehash 期间，字典的删除查找更新等操作可能会在两个哈希表上进行，第一个哈希表没有找到，就会去第二个哈希表上进行查找。但是进行&lt;br&gt;
增加操作，一定是在新的哈希表上进行的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;整数集合intset&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#整数集合intset&#34;&gt;#&lt;/a&gt; 整数集合（intset）&lt;/h4&gt;
&lt;p&gt;定义：一种特殊的数据结构，主要用于存储整数类型的集合，并且这些整数集合不允许有重复的元素。&lt;/p&gt;
&lt;p&gt;底层实现：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;intset&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;comment&#34;&gt;//编码方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; encoding;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;comment&#34;&gt;//集合包含的元素数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; length;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;comment&#34;&gt;//保存元素的数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;type&#34;&gt;int8_t&lt;/span&gt; contents[];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;intset;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;intset 的数据结构定义通常包括以下几个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;length：表示集合中元素的数量。&lt;/li&gt;
&lt;li&gt;encoding：表示集合中元素的类型，可以是 int16_t、int32_t 或 int64_t，具体取决于集合中最大的整数值所需的位数。&lt;/li&gt;
&lt;li&gt;contents：一个动态数组，用于存储实际的整数值。每个整数根据 encoding 字段指定的类型占用相应的字节数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;动态升级&lt;/p&gt;
&lt;p&gt;当尝试向 intset 中添加一个超出当前整数类型范围的整数时，Redis 会执行一个称为 “编码升级” 的过程。这个过程会将 intset 中的所有元素转换为更大类型的整数，以适应新加入的元素。例如，如果 intset 当前使用的是 int32_t 类型，而尝试插入一个 int64_t 类型的值，则所有现有的 int32_t 值会被转换成 int64_t 类型。&lt;/p&gt;
&lt;h4 id=&#34;跳表skip-list&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#跳表skip-list&#34;&gt;#&lt;/a&gt; 跳表（Skip List）&lt;/h4&gt;
&lt;p&gt;定义：Skiplist 是一种线性数据结构，它提供了比传统平衡树更快的查找性能，同时实现相对简单。Redis 使用 skiplist 来实现有序集合（Sorted&lt;br&gt;
Set）。&lt;/p&gt;
&lt;p&gt;底层实现：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;zskiplist&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;zskiplistNode&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;header&lt;/span&gt;;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// 跳表头部&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;zskiplistNode&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;tail&lt;/span&gt;;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// 跳表尾部&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; length; &lt;span class=&#34;comment&#34;&gt;// 跳表长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; level; &lt;span class=&#34;comment&#34;&gt;// 跳表层级&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; zskiplist;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;zskiplistNode&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;double&lt;/span&gt; score; &lt;span class=&#34;comment&#34;&gt;// 成员的分数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; *obj; &lt;span class=&#34;comment&#34;&gt;// 成员对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;zskiplistNode&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;backward&lt;/span&gt;;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// 指向前一个节点的指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;zskiplistLevel&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;zskiplistNode&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;forward&lt;/span&gt;;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// 指向后一个节点的指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; span; &lt;span class=&#34;comment&#34;&gt;// 跨越的节点数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; level[]; &lt;span class=&#34;comment&#34;&gt;// 层级数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; zskiplistNode;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实现细节：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节点结构：skiplist 中的每个节点包含一个元素、一个分数（用于排序）、一个指向前一个节点的指针以及一个或多个指向下一层节点的指针。&lt;/li&gt;
&lt;li&gt;层级：每个节点可以有多个层级，每个层级对应一个指针，指向下一个具有相同高度的节点。&lt;/li&gt;
&lt;li&gt;查找：查找时，从最高层开始，沿着指针前进直到找到目标元素或到达最低层。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多级索引：skiplist 通过构建多级索引来加速查找，每一级索引都是前一级索引的一个子集。&lt;/li&gt;
&lt;li&gt;随机高度：新插入的元素的高度是随机确定的，通常使用随机化算法来决定新节点的高度。&lt;/li&gt;
&lt;li&gt;高效插入和删除：由于 skiplist 的多级索引结构，插入和删除操作也相当高效。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据结构的使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据结构的使用&#34;&gt;#&lt;/a&gt; 数据结构的使用&lt;/h3&gt;
&lt;h4 id=&#34;字符串string&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串string&#34;&gt;#&lt;/a&gt; 字符串（String）&lt;/h4&gt;
&lt;p&gt;用途：存储字符串数据，如文本、数字、日期等。&lt;/p&gt;
&lt;p&gt;实现：根据不同的情况下字符串对象的 encoding 有三种，分别是：int、raw、embstr。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;如果一个字符串对象保存的是整数值，并且这个整数值可以用 long 类型标识，那么字符串对象会讲整数值保存在 ptr 属性中，并将&lt;br&gt;
 encoding 设置为 int。比如 set number 10086 命令。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果字符串对象保存的是一个字符串值，并且这个字符串的长度大于 44 字节，那么字符串对象将使用一个简单动态字符串（SDS）来保存这个字符串值，并将对象的编码设置为&lt;br&gt;
 raw。在这种情况下，ptr 字段指向一个 SDS（Simple Dynamic String）结构。S 在这种情况下，ptr 字段指向一个 SDS（Simple Dynamic&lt;br&gt;
String）结构。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果字符串对象保存的是一个字符串值，并且这个字符串的长度小于等于 44 字节，那么字符串对象将使用 embstr&lt;br&gt;
 编码的方式来保存这个字符串。embstr 同样基于 SDS，是一种将 RedisObject 对象头和 SDS 对象连续存在一起，使用 malloc&lt;br&gt;
 方法一次分配内存的存储形式。 这种编码方式的一些优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;embstr 编码将创建字符串对象所需的内存分配次数从 raw 编码的两次降低为一次。&lt;/li&gt;
&lt;li&gt;释放 embstr 编码的字符串对象只需要调用一次内存释放函数，而释放 raw 编码的字符串对象需要调用两次内存释放函数。&lt;/li&gt;
&lt;li&gt;因为 embstr 编码的字符串对象的所有数据都保存在一块连续的内存里面，所以这种编码的字符串对象比起 raw&lt;br&gt;
 编码的字符串对象能够更好地利用缓存带来的优势。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为什么分界线是 44 字节？&lt;/p&gt;
&lt;p&gt;Redis 的 embstr 编码的实现中，字符串对象头和字符串对象本身是连续的，因此需要一个字节来保存字符串的长度。&lt;br&gt;
embstr 最小占用空间为 19（16+3），而 64-19-1（结尾的 \0）=44，所以 embstr 只能容纳 44 字节。&lt;/p&gt;
&lt;p&gt;使用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计数器：例如网站的访问计数，可以使用 INCR 或 INCRBY 命令来递增计数器。&lt;/li&gt;
&lt;li&gt;会话存储：存储用户的登录状态或其他临时信息。&lt;/li&gt;
&lt;li&gt;消息队列：使用 LPUSH 和 BRPOP 命令实现简单的消息队列。&lt;/li&gt;
&lt;li&gt;缓存：存储经常访问的数据，减少数据库的访问压力。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;列表list&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#列表list&#34;&gt;#&lt;/a&gt; 列表（List）&lt;/h4&gt;
&lt;p&gt;用途：用于存储有序的元素列表，如队列、栈等。&lt;/p&gt;
&lt;p&gt;实现：列表对象的 encoding 有 ziplist 和 linkedlist 两种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当列表的长度小于 512，并且所有元素的长度都小于 64 字节时，使用压缩列表 (ziplist) 存储&lt;/li&gt;
&lt;li&gt;当列表的长度大于等于 512，或者有元素长度大于 64 字节时，使用链表 (linkedlist) 存储。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;消息队列：使用 LPUSH 和 BRPOP 命令实现先进先出（FIFO）的消息队列。&lt;/li&gt;
&lt;li&gt;历史记录：保存用户的浏览历史或购买记录，可以使用 RPUSH 和 LPOP 命令。&lt;/li&gt;
&lt;li&gt;排行榜：使用列表存储排名信息，通过 LREM 命令可以移除特定成员。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;哈希hash&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#哈希hash&#34;&gt;#&lt;/a&gt; 哈希（Hash）&lt;/h4&gt;
&lt;p&gt;用途：存储键值对，其中键是唯一的，值可以重复。&lt;/p&gt;
&lt;p&gt;实现：哈希对象的 encoding 有 ziplist 和 hashtable 两种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当哈希对象保存的键值对数量小于 512，并且所有键值对的长度都小于 64 字节时，使用压缩列表存储；&lt;/li&gt;
&lt;li&gt;当哈希对象保存的键值对数量大于等于 512，或者有键值对长度大于 64 字节时，使用 hashtable 存储。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象存储：存储复杂对象，如用户信息，每个字段对应用户的一个属性。&lt;/li&gt;
&lt;li&gt;购物车：每个用户有一个购物车，购物车中的商品信息可以用哈希表来存储。&lt;/li&gt;
&lt;li&gt;会话管理：存储用户的会话信息，每个会话 ID 对应一个哈希表。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;集合set&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#集合set&#34;&gt;#&lt;/a&gt; 集合（Set）&lt;/h4&gt;
&lt;p&gt;用途：存储不重复的元素集合，如集合、去重列表等。&lt;/p&gt;
&lt;p&gt;实现：集合对象的 encoding 有 intset 和 hashtable 两种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当集合中元素数量小于 512，并且所有元素的长度都小于 64 字节时，使用 intset 存储；&lt;/li&gt;
&lt;li&gt;当集合中元素数量大于等于 512，或者有元素长度大于 64 字节时，使用 hashtable 存储。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;去重：例如在一个活动中，确保每个用户只能参与一次。&lt;/li&gt;
&lt;li&gt;标签系统：每个项目可以有多个标签，使用集合来存储项目的标签。&lt;/li&gt;
&lt;li&gt;好友关系：存储用户的好友列表，可以快速判断两个用户是否互为好友。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;有序集合sorted-set&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#有序集合sorted-set&#34;&gt;#&lt;/a&gt; 有序集合（Sorted Set）&lt;/h4&gt;
&lt;p&gt;用途：存储有序的元素集合，其中元素是唯一的，并且可以按照一定的顺序排列。&lt;/p&gt;
&lt;p&gt;实现：有序集合对象的 encoding 有 ziplist 和 skiplist 两种。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当有序集合中的元素数量小于 512，并且所有元素的长度都小于 64 字节时，使用压缩列表 (ziplist) 存储；&lt;/li&gt;
&lt;li&gt;当有序集合中的元素数量大于等于 512，或者有元素长度大于 64 字节时，使用跳表 (skiplist) 存储。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;排行榜：根据分数排序的排行榜，如游戏得分、用户贡献度等。&lt;/li&gt;
&lt;li&gt;优先级队列：每个元素都有一个优先级，可以按优先级取出元素。&lt;/li&gt;
&lt;li&gt;时间轴：按时间戳排序的消息或帖子显示，如微博、Facebook 的时间线。&lt;/li&gt;
&lt;li&gt;地理信息：存储地理位置信息，并使用 GEO 命令查询附近的地点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;其他数据结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#其他数据结构&#34;&gt;#&lt;/a&gt; 其他数据结构&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Bitmaps：二进制位数组，适合用于存储大量稀疏数据，如用户访问记录、权限控制等。&lt;/p&gt;
&lt;p&gt;使用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;统计分析：例如统计某一天有多少独立用户访问了网站，可以使用一个位图来表示每个用户是否访问过。&lt;/li&gt;
&lt;li&gt;权限管理：每个用户可以有多个权限位，使用位图来表示用户的权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HyperLogLog：用于近似计算不重复元素的数量，非常适合处理大规模数据集。&lt;/p&gt;
&lt;p&gt;使用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;近似计数：用于估算大量数据中的不重复元素数量，例如统计网站的独立访客数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Streams：类似于消息队列，用于处理异步消息传递，可以实现类似 Kafka 的功能。&lt;/p&gt;
&lt;p&gt;使用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事件日志：记录系统中的事件，如用户行为日志，可以使用 XADD 添加事件，XREAD 读取事件。&lt;/li&gt;
&lt;li&gt;异步处理：作为消息队列的一部分，将事件发布到流中，然后由消费者异步处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Geo：用于存储地理位置信息，并提供基于地理位置的查询功能。&lt;/p&gt;
&lt;p&gt;使用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;位置服务：存储地理位置信息，并支持基于地理位置的搜索，如查找附近的餐厅或酒店。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;redis-综合应用示例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis-综合应用示例&#34;&gt;#&lt;/a&gt; Redis 综合应用示例&lt;/h4&gt;
&lt;p&gt;假设我们要构建一个社交网络应用，可以使用 Redis 来实现以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户信息存储：使用 Hash 类型存储每个用户的个人信息，如用户名、头像、生日等。&lt;/li&gt;
&lt;li&gt;好友关系：使用 Set 类型存储每个用户的好友列表。&lt;/li&gt;
&lt;li&gt;动态时间线：使用 Sorted Set 类型存储用户的动态，根据发布时间排序。&lt;/li&gt;
&lt;li&gt;消息通知：使用 List 类型作为消息队列，存储用户收到的通知消息。&lt;/li&gt;
&lt;li&gt;在线状态：使用 BitMap 类型记录每天用户的在线状态。&lt;/li&gt;
&lt;li&gt;热门话题：使用 HyperLogLog 类型来估计参与某个话题讨论的独立用户数量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;redis-的持久化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis-的持久化&#34;&gt;#&lt;/a&gt; Redis 的持久化&lt;/h2&gt;
&lt;p&gt;redis 是一个内存数据库，数据保存在内存中，但是我们都知道内存的数据变化是很快的，也容易发生丢失。幸好 Redis 还为我们提供了持久化的机制，分别是 RDB (&lt;br&gt;
Redis DataBase) 和 AOF (Append Only File)。&lt;/p&gt;
&lt;h3 id=&#34;rdb机制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rdb机制&#34;&gt;#&lt;/a&gt; RDB 机制&lt;/h3&gt;
&lt;p&gt;RDB 持久化是指在指定的时间间隔内将内存中的数据集快照写入磁盘。也是默认的持久化方式，这种方式是就是将内存中数据以快照的方式写入到二进制文件中，默认的文件名为 dump.rdb。&lt;/p&gt;
&lt;p&gt;Redis 提供了三种机制：save、bgsave、自动化来触发 RDB 持久化过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;save 触发方式&lt;/p&gt;
&lt;p&gt;该命令会阻塞当前 Redis 服务器，执行 save 命令期间，Redis 不能处理其他命令，直到 RDB 过程完成为止。具体流程如下：&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/13/%E3%80%90Redis%E3%80%91Redis%E8%AF%A6%E8%A7%A3/e7cd7b899e510fb3aa8c05042b22c093d0430ca7.jpeg&#34; class=&#34;&#34; title=&#34;e7cd7b899e510fb3aa8c05042b22c093d0430ca7.jpeg&#34;&gt;
&lt;p&gt;执行完成时候如果存在老的 RDB 文件，就把新的替代掉旧的。我们的客户端可能都是几万或者是几十万，这种方式显然不可取。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bgsave 触发方式&lt;/p&gt;
&lt;p&gt;执行该命令时，Redis 会在后台异步进行快照操作，快照同时还可以响应客户端请求。具体流程如下：&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/13/%E3%80%90Redis%E3%80%91Redis%E8%AF%A6%E8%A7%A3/023b5bb5c9ea15cefb035bc8431132f53b87b21e.jpeg&#34; class=&#34;&#34; title=&#34;023b5bb5c9ea15cefb035bc8431132f53b87b21e.jpeg&#34;&gt;
&lt;p&gt;具体操作是 Redis 进程执行 fork 操作创建子进程，RDB 持久化过程由子进程负责，完成后自动结束。阻塞只发生在 fork 阶段，一般时间很短。基本上&lt;br&gt;
 Redis 内部所有的 RDB 操作都是采用 bgsave 命令。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动触发&lt;/p&gt;
&lt;p&gt;自动触发是由我们的配置文件来完成的。在 redis.conf 配置文件中，里面有如下配置，我们可以去设置：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;save：这里是用来配置触发 Redis 的 RDB 持久化条件，也就是什么时候将内存中的数据保存到硬盘。比如 “save m&lt;br&gt;
n”。表示 m 秒内数据集存在 n 次修改时，自动触发 bgsave。&lt;/li&gt;
&lt;li&gt;stop-writes-on-bgsave-error：默认值为 yes。&lt;br&gt;
当启用了 RDB 且最后一次后台保存数据失败，Redis 是否停止接收数据。这会让用户意识到数据没有正确持久化到磁盘上，否则没有人会注意到灾难（disaster）发生了。如果 Redis 重启了，那么又可以重新开始接收数据了&lt;/li&gt;
&lt;li&gt;rdbcompression；默认值是 yes。对于存储到磁盘中的快照，可以设置是否进行压缩存储。&lt;/li&gt;
&lt;li&gt;rdbchecksum：默认值是 yes。在存储快照后，我们还可以让 redis 使用 CRC64 算法来进行数据校验，但是这样做会增加大约 10% 的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能。&lt;/li&gt;
&lt;li&gt;dbfilename：设置快照的文件名，默认是 dump.rdb&lt;/li&gt;
&lt;li&gt;dir：设置快照文件的存放路径，这个配置项一定是个目录，而不能是文件名。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们可以修改这些配置来实现我们想要的效果。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为第三种方式是配置的，所以我们对前两种进行一个对比：&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/13/%E3%80%90Redis%E3%80%91Redis%E8%AF%A6%E8%A7%A3/1c950a7b02087bf43b4490d50ac25f2a11dfcf7e.jpeg&#34; class=&#34;&#34; title=&#34;1c950a7b02087bf43b4490d50ac25f2a11dfcf7e.jpeg&#34;&gt;
&lt;p&gt;RDB 的优势和劣势&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优势&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RDB 文件紧凑，全量备份，非常适合用于进行备份和灾难恢复。&lt;/li&gt;
&lt;li&gt;生成 RDB 文件的时候，redis 主进程会 fork () 一个子进程来处理所有保存工作，主进程不需要进行任何磁盘 IO 操作。&lt;/li&gt;
&lt;li&gt;RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;劣势&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RDB 快照是一次全量备份，存储的是内存数据的二进制序列化形式，存储上非常紧凑。&lt;br&gt;
当进行快照持久化时，会开启一个子进程专门负责快照持久化，子进程会拥有父进程的内存数据，父进程修改内存子进程不会反应出来，所以在快照持久化期间修改的数据不会被保存，可能丢失数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;aof机制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#aof机制&#34;&gt;#&lt;/a&gt; AOF 机制&lt;/h3&gt;
&lt;p&gt;全量备份总是耗时的，Redis 提供一种更加高效的方式 AOF，工作机制很简单，Redis 会将每一个收到的写命令都通过 write 函数追加到文件中。通俗的理解就是日志记录。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;持久化原理&lt;/p&gt;
&lt;p&gt;他的原理看下面这张图：&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/13/%E3%80%90Redis%E3%80%91Redis%E8%AF%A6%E8%A7%A3/32fa828ba61ea8d3c2502e396b1b3848251f58b0.jpeg&#34; class=&#34;&#34; title=&#34;32fa828ba61ea8d3c2502e396b1b3848251f58b0.jpeg&#34;&gt;
&lt;p&gt;每当有一个写命令过来时，就直接保存在我们的 AOF 文件中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件重写原理&lt;/p&gt;
&lt;p&gt;AOF 的方式也同时带来了另一个问题：持久化文件会变的越来越大。为了解决这个问题，redis 提供了 bgrewriteaof 命令用来压缩 aof 的持久化文件。这条命令会将内存中的数据以命令的方式保存到临时文件中，同时会 fork 出一条新进程来将文件重写。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/13/%E3%80%90Redis%E3%80%91Redis%E8%AF%A6%E8%A7%A3/09fa513d269759ee28454d2c4cea4b106c22dfd3.jpeg&#34; class=&#34;&#34; title=&#34;09fa513d269759ee28454d2c4cea4b106c22dfd3.jpeg&#34;&gt;
&lt;p&gt;重写 aof 文件的操作，并没有读取旧的 aof 文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的 aof 文件，这点和快照有点类似。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;AOF 也有三种触发机制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每修改同步 always：同步持久化 每次发生数据变更会被立即记录到磁盘 性能较差但数据完整性比较好&lt;/li&gt;
&lt;li&gt;每秒同步 everysec：异步操作，每秒记录 如果一秒内宕机，有数据丢失&lt;/li&gt;
&lt;li&gt;不同 no：从不同步&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三种触发机制的对比如下图&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/13/%E3%80%90Redis%E3%80%91Redis%E8%AF%A6%E8%A7%A3/b17eca8065380cd7df69859ba056a5325982816c.jpeg&#34; class=&#34;&#34; title=&#34;b17eca8065380cd7df69859ba056a5325982816c.jpeg&#34;&gt;
&lt;p&gt;AOF 的优势和劣势&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优势
&lt;ul&gt;
&lt;li&gt;AOF 可以更好的保护数据不丢失，一般 AOF 会每隔 1 秒，通过一个后台线程执行一次 fsync 操作，最多丢失 1 秒钟的数据。&lt;/li&gt;
&lt;li&gt;AOF 日志文件没有任何磁盘寻址的开销，写入性能非常高，文件不容易破损。&lt;/li&gt;
&lt;li&gt;AOF 日志文件即使过大的时候，出现后台重写操作，也不会影响客户端的读写。&lt;/li&gt;
&lt;li&gt;AOF 日志文件的命令通过非常可读的方式进行记录，这个特性非常适合做灾难性的误删除的紧急恢复。&lt;br&gt;
比如某人不小心用 flushall 命令清空了所有数据，只要这个时候后台 rewrite 还没有发生，那么就可以立即拷贝 AOF 文件，将最后一条 flushall 命令给删了，然后再将该 AOF 文件放回去，就可以通过恢复机制，自动恢复所有数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点
&lt;ul&gt;
&lt;li&gt;对于同一份数据来说，AOF 日志文件通常比 RDB 数据快照文件更大&lt;/li&gt;
&lt;li&gt;AOF 开启后，支持的写 QPS 会比 RDB 支持的写 QPS 低，因为 AOF 一般会配置成每秒 fsync 一次日志文件，当然，每秒一次 fsync，性能也还是很高的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;持久化机制的选择&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#持久化机制的选择&#34;&gt;#&lt;/a&gt; 持久化机制的选择&lt;/h3&gt;
&lt;p&gt;通常情况下我们是二者结合使用的。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;RDB&lt;/th&gt;
&lt;th&gt;AOF&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;启动优先级&lt;/td&gt;
&lt;td&gt;低&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;体积&lt;/td&gt;
&lt;td&gt;小&lt;/td&gt;
&lt;td&gt;大&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;恢复速度&lt;/td&gt;
&lt;td&gt;快&lt;/td&gt;
&lt;td&gt;慢&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数据安全性&lt;/td&gt;
&lt;td&gt;丢数据&lt;/td&gt;
&lt;td&gt;取决于刷盘策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;轻重&lt;/td&gt;
&lt;td&gt;重&lt;/td&gt;
&lt;td&gt;轻&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;RDB 使用场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据恢复要求不高：如果应用程序可以接受在两次快照之间数据丢失的风险，那么 RDB 是一个很好的选择。&lt;/li&gt;
&lt;li&gt;需要快速恢复大量数据：由于 RDB 文件是一个完整的数据库快照，因此在需要快速恢复大量数据时，RDB 提供了更快的恢复速度。&lt;/li&gt;
&lt;li&gt;定期备份：RDB 适用于需要定期进行完整备份的场景，比如每天一次的全量备份。&lt;/li&gt;
&lt;li&gt;数据归档：RDB 文件可以轻松地传输到远程服务器或存储设备上，用于长期的数据归档或灾难恢复。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AOF 使用场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据安全性要求高：如果应用程序不能容忍任何数据丢失，那么 AOF 是更好的选择，因为它可以保证数据的完整性。&lt;/li&gt;
&lt;li&gt;频繁写入操作：对于写密集型的应用场景，AOF 可以更好地保证数据的一致性。&lt;/li&gt;
&lt;li&gt;数据重放：AOF 文件可以用来重放数据，这对于调试和审计非常有用。&lt;/li&gt;
&lt;li&gt;自动修复：Redis 可以定期对 AOF 文件进行重写，以压缩文件大小并移除冗余命令。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;redis-的内存调度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis-的内存调度&#34;&gt;#&lt;/a&gt; Redis 的内存调度&lt;/h2&gt;
&lt;h3 id=&#34;redis-的过期策略&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis-的过期策略&#34;&gt;#&lt;/a&gt; Redis 的过期策略&lt;/h3&gt;
&lt;h4 id=&#34;设置过期时间&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#设置过期时间&#34;&gt;#&lt;/a&gt; 设置过期时间&lt;/h4&gt;
&lt;p&gt;Redis 对存储值的过期处理实际上是针对该值的键（key）处理的，即时间的设置也是设置 key 的有效时间。Expires 字典保存了所有键的过期时间，Expires 也被称为过期字段。&lt;/p&gt;
&lt;p&gt;一般主要包括 5 种处理过期方式，其中 expire 都是以秒为单位，pexpire 都是以毫秒为单位的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EXPIRE key seconds&lt;/code&gt; ：将 key 的生存时间设置为 ttl 秒&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PEXPIRE key milliseconds&lt;/code&gt; ：将 key 的生成时间设置为 ttl 毫秒&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EXPIREAT key timestamp&lt;/code&gt; ：将 key 的过期时间设置为 timestamp 所代表的的秒数的时间戳&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PEXPIREAT key milliseconds-timestamp&lt;/code&gt; ：将 key 的过期时间设置为 timestamp 所代表的的毫秒数的时间戳&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setex(String key, int seconds, String value)&lt;/code&gt; ：字符串独有的方式，为指定的 key 设置值及其过期时间。如果 key 已经存在，&lt;br&gt;
SETEX 命令将会替换旧的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;timestamp 为 unix 时间戳（例如：timestamp=1499788800 表示将在 2017.07.12 过期）&lt;/li&gt;
&lt;li&gt;1、2 两种方式是设置一个过期的时间段，就是咱们处理验证码最常用的策略，设置三分钟或五分钟后失效，把分钟数转换成秒或毫秒存储到 Redis 中。&lt;/li&gt;
&lt;li&gt;3、4 两种方式是指定一个过期的时间 ，比如优惠券的过期时间是某年某月某日，只是单位不一样。&lt;/li&gt;
&lt;li&gt;如果没有设置时间，那缓存就是永不过期&lt;/li&gt;
&lt;li&gt;如果设置了过期时间，之后又想让缓存永不过期，使用 persist key&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;过期策略&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#过期策略&#34;&gt;#&lt;/a&gt; 过期策略&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定时过期（Active Expiration）&lt;/p&gt;
&lt;p&gt;含义：当一个键设置了过期时间时，Redis 会在键的过期时间到达时立即清除这个键。&lt;/p&gt;
&lt;p&gt;优点：这种方法可以保证内存被尽快释放，过期的键不会占用内存太久。&lt;/p&gt;
&lt;p&gt;缺点：定时过期需要为每个设置了过期时间的键创建一个定时器，这会占用大量的 CPU 资源来处理过期的数据，从而影响 Redis 的响应时间和吞吐量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;被动过期（Lazy Expiration）&lt;/p&gt;
&lt;p&gt;含义：当访问一个键时，Redis 会检查这个键是否已经过期。如果过期，Redis 会删除这个键并返回相应的错误信息给客户端。&lt;/p&gt;
&lt;p&gt;优点：这种方法对 CPU 资源友好，因为它只在访问键时才会检查过期情况。&lt;/p&gt;
&lt;p&gt;缺点：如果过期的键没有被及时访问，那么它将继续占用内存，直到被访问或通过其他方式清理掉为止。&lt;/p&gt;
&lt;p&gt;流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在进行 get 或 setnx 等操作时，先检查 key 是否过期，&lt;/li&gt;
&lt;li&gt;若过期，删除 key，然后执行相应操作；&lt;/li&gt;
&lt;li&gt;若没过期，直接执行相应操作&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定期过期（Periodic Reaping）&lt;/p&gt;
&lt;p&gt;含义：Redis 会周期性地检查过期的键，并删除一部分过期的键。这种策略试图在内存消耗和 CPU 使用之间找到一个平衡点，可以通过&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置 redis.conf 的 hz 选项，默认为 10 （即 1 秒执行 10 次，100ms 一次，值越大说明刷新频率越快，对 Redis 性能损耗也越大）&lt;/li&gt;
&lt;li&gt;配置 redis.conf 的 maxmemory 最大值，当已用内存超过 maxmemory 限定时，就会触发主动清理策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优点：通过周期性地检查和删除过期键，可以有效地减少内存浪费，同时通过限制删除操作的执行时长和频率来减少对 CPU 时间的影响。&lt;/p&gt;
&lt;p&gt;缺点：难以确定删除操作执行的时长和频率。如果删除操作执行得太频繁或执行的时间太长，定期删除策略就会退化成定时删除，导致占用太多的 CPU 执行时间。如果删除操作执行得太少或执行时间太短，定期删除策略又会类似于被动过期，导致内存浪费。&lt;/p&gt;
&lt;p&gt;流程：其核心是对指定个数个库的每一个库随机删除小于等于指定个数个过期 key：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;遍历每个数据库（就是 redis.conf 中配置的 “database” 数量，默认为 16）；
&lt;ol&gt;
&lt;li&gt;检查当前库中的指定个数个 key （默认是每个库检查 20 个，相当于该循环执行 20 次）：
&lt;ol&gt;
&lt;li&gt;如果当前库中没有一个 key 设置了过期时间，直接执行下一个库的遍历；&lt;/li&gt;
&lt;li&gt;随机获取一个设置了过期时间的 key，检查是否过期，如果过期则删除；&lt;/li&gt;
&lt;li&gt;判断定期删除操作是否已经达到指定时长，若已经达到，直接退出定期删除。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综合策略&lt;/p&gt;
&lt;p&gt;在实际应用中，Redis 通常会结合使用上述三种策略来管理过期键。例如，Redis 可能会使用定期过期作为主要的过期策略，同时辅以被动过期来处理未被定期过期策略捕获的过期键。此外，对于一些关键操作，Redis 可能会采用定时过期来确保某些重要键在过期后能够立即被释放。&lt;/p&gt;
&lt;h4 id=&#34;持久化中的过期&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#持久化中的过期&#34;&gt;#&lt;/a&gt; 持久化中的过期&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RDB 对过期 key 的处理&lt;/p&gt;
&lt;p&gt;过期 key 对 RDB 没有任何影响&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从内存数据库持久化数据到 RDB 文件
&lt;ul&gt;
&lt;li&gt;持久化 key 之前，会检查是否过期，过期的 key 不进入 RDB 文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;从 RDB 文件恢复数据到内存数据库
&lt;ul&gt;
&lt;li&gt;数据载入数据库之前，会对 key 先进行过期检查，如果过期，不导入数据库（主库情况）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AOF 对过期 key 的处理&lt;br&gt;
过期 key 对 AOF 没有任何影响&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从内存数据库持久化数据到 AOF 文件：
&lt;ul&gt;
&lt;li&gt;当 key 过期后，还没有被删除，此时进行执行持久化操作（该 key 是不会进入 aof 文件的，因为没有发生修改命令）&lt;/li&gt;
&lt;li&gt;当 key 过期后，在发生删除操作时，程序会向 aof 文件追加一条 del 命令（在将来的以 aof 文件恢复数据的时候该过期的键就会被删掉）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AOF 重写
&lt;ul&gt;
&lt;li&gt;重写时，会先判断 key 是否过期，已过期的 key 不会重写到 aof 文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pipeline&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#pipeline&#34;&gt;#&lt;/a&gt; Pipeline&lt;/h2&gt;
&lt;p&gt;Redis 的 Pipeline 功能允许客户端将多个命令打包成一个请求发送给 Redis 服务器，而不是逐个发送命令。这样做可以显著减少客户端与服务器之间的网络往返次数，从而提高&lt;br&gt;
 Redis 的性能和效率。下面详细介绍 Redis Pipeline 的工作原理、使用场景以及如何使用。&lt;/p&gt;
&lt;p&gt;Pipeline 的工作原理&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打包命令：客户端将多个 Redis 命令打包成一个请求，这个请求包含了所有命令的数据。&lt;/li&gt;
&lt;li&gt;发送请求：客户端一次性将打包好的请求发送给 Redis 服务器。&lt;/li&gt;
&lt;li&gt;执行命令：Redis 服务器接收到请求后，依次执行其中的所有命令。&lt;/li&gt;
&lt;li&gt;返回结果：Redis 服务器将各个命令的结果保存起来，并在所有命令执行完毕后，一次性将所有结果返回给客户端。&lt;/li&gt;
&lt;li&gt;处理结果：客户端接收到所有命令的结果后，按顺序处理这些结果。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pipeline 的优点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;减少网络延迟：通过减少客户端与服务器之间的网络往返次数，Pipeline 可以显著降低网络延迟，提高整体性能。&lt;/li&gt;
&lt;li&gt;提高吞吐量：由于减少了网络交互次数，客户端可以更快地处理更多的命令。&lt;/li&gt;
&lt;li&gt;事务性操作：虽然 Pipeline 不保证命令执行的原子性，但是它可以模拟事务的行为，即可以将一组命令作为一个整体发送和接收结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;批量操作：当你需要执行一系列相关联的命令时，使用 Pipeline 可以提高效率。&lt;/li&gt;
&lt;li&gt;性能优化：在需要频繁与 Redis 进行交互的应用场景中，使用 Pipeline 可以减少网络开销，提升性能。&lt;/li&gt;
&lt;li&gt;模拟事务：虽然 Redis 的 Pipeline 不保证命令的原子性，但是在不需要严格事务性的场景下，可以使用 Pipeline 来模拟事务行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何使用 Pipeline&lt;br&gt;
 在不同的 Redis 客户端库中，使用 Pipeline 的方式略有不同。以下是在几种常见语言中使用 Pipeline 的示例：&lt;/p&gt;
&lt;p&gt;JavaScript (Node.js)&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; redis = &lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;redis&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; client = redis.&lt;span class=&#34;title function_&#34;&gt;createClient&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;client.&lt;span class=&#34;title function_&#34;&gt;pipeline&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .&lt;span class=&#34;title function_&#34;&gt;set&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;foo&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;bar&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .&lt;span class=&#34;title function_&#34;&gt;get&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;foo&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .&lt;span class=&#34;title function_&#34;&gt;exec&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;err, replies&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (err) &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; err;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(replies); &lt;span class=&#34;comment&#34;&gt;// replies is an array of responses&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Python (redis-py)&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const redis = require(&lt;span class=&#34;string&#34;&gt;&amp;quot;redis&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const client = redis.createClient();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;client.pipeline()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;foo&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;bar&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .get(&lt;span class=&#34;string&#34;&gt;&amp;#x27;foo&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;built_in&#34;&gt;exec&lt;/span&gt;((err, replies) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (err) throw err;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    console.log(replies); // replies &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; an array of responses&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;java (jedis)&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; redis.clients.jedis.Jedis;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Jedis jedis=&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Jedis&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Pipeline pipelined=jedis.pipelined();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        pipelined.set(&lt;span class=&#34;string&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        pipelined.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        List&amp;lt;Object&amp;gt; results=pipelined.syncAndReturnAll();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(results);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;span class=&#34;keyword&#34;&gt;finally&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        jedis.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命令数量：虽然 Pipeline 可以显著提高性能，但如果打包的命令数量过多，可能会导致单个请求的体积过大，增加客户端的等待时间，并可能导致网络阻塞。&lt;/li&gt;
&lt;li&gt;命令执行顺序：Pipeline 中的命令是按照发送顺序执行的，因此需要确保命令间的依赖关系不会导致错误。&lt;/li&gt;
&lt;li&gt;错误处理：如果 Pipeline 中的某条命令执行失败，整个 Pipeline 的结果都会受到影响。因此，在处理 Pipeline&lt;br&gt;
 的结果时，需要注意检查每个命令的执行状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原生批命令 (mset, mget) 与 Pipeline 对比&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原生批命令是原子性，pipeline 是非原子性&lt;/li&gt;
&lt;li&gt;原生批命令一命令多个 key, 但 pipeline 支持多命令（存在事务），非原子性&lt;/li&gt;
&lt;li&gt;原生批命令是服务端实现，而 pipeline 需要服务端与客户端共同完成&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;redis-事务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis-事务&#34;&gt;#&lt;/a&gt; Redis 事务&lt;/h2&gt;
&lt;p&gt;Redis 事务是 Redis 中的一个重要特性，它允许客户端在一个事务中执行多个命令，并确保这些命令要么全部执行成功，要么全部执行失败。在事务中，客户端可以提交或回滚整个事务，而不需要关心事务中的命令是否成功执行。尽管&lt;br&gt;
 Redis 事务并不提供传统意义上的 ACID 事务特性（原子性、一致性、隔离性、持久性），但它确实提供了一些基本的功能，使得开发者可以更方便地处理一系列相关的命令。&lt;/p&gt;
&lt;p&gt;Redis 事务的主要功能包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命令队列：客户端可以将多个命令放入一个队列中，然后通过 EXEC 命令一次性发送给 Redis 服务器执行。&lt;/li&gt;
&lt;li&gt;监视（WATCH）：客户端可以监视一个或多个键，如果在执行 EXEC 命令之前这些键被其他客户端修改，则事务会被取消。&lt;/li&gt;
&lt;li&gt;取消（DISCARD）：如果在事务执行之前发现某些条件不满足，客户端可以选择取消事务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Redis 事务的实现分为几个步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事务开始：客户端通过 MULTI 命令开始一个事务。&lt;/li&gt;
&lt;li&gt;命令入队：在 MULTI 命令之后，客户端可以发送任意数量的命令，这些命令将被放入事务队列中，但不会立即执行。&lt;/li&gt;
&lt;li&gt;事务执行：通过 EXEC 命令，客户端可以执行事务队列中的所有命令。如果在此之前使用了 WATCH 命令监视的键被修改，则事务会被取消。&lt;/li&gt;
&lt;li&gt;取消事务：如果在执行 EXEC 命令之前，客户端想要取消事务，可以使用 DISCARD 命令。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Redis 中事务的特性有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原子性：一旦事务开始执行，Redis 会保证事务中的所有命令要么全部执行成功，要么都不执行。然而，如果命令在执行过程中出现错误（如类型错误），Redis&lt;br&gt;
 会继续执行后续命令。&lt;/li&gt;
&lt;li&gt;一致性：Redis 事务在一定程度上保证了一致性，特别是通过使用 WATCH 命令监视键的变化，可以防止脏读。&lt;/li&gt;
&lt;li&gt;隔离性：由于 Redis 是单线程的，事务中的命令会按顺序执行，因此不存在并发事务之间的隔离性问题。&lt;/li&gt;
&lt;li&gt;持久性：Redis 的持久化机制（如 RDB 或 AOF）保证了数据的持久性，但这与事务无关。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Redis 事务的限制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不支持回滚：如果事务中的某个命令失败，Redis 会继续执行剩余的命令，并不会回滚之前的命令。&lt;/li&gt;
&lt;li&gt;错误处理：如果事务中的命令出现错误，Redis 会记录错误并继续执行后续命令。客户端需要处理这些错误。&lt;/li&gt;
&lt;li&gt;性能考虑：虽然事务可以减少网络往返次数，但如果事务中的命令数量过多，可能会导致单个请求过大，反而影响性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Redis 事务的使用场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;批量操作：当需要执行一系列相关的命令时，可以使用事务来减少网络往返次数，提高性能。&lt;/li&gt;
&lt;li&gt;乐观锁：通过 WATCH 命令监视键的变化，可以实现乐观锁机制，确保在执行事务之前键没有被其他客户端修改。&lt;/li&gt;
&lt;li&gt;模拟事务：虽然 Redis 事务不提供严格的 ACID 特性，但在不需要强一致性的场景下，可以使用事务来模拟事务行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;redis-多线程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis-多线程&#34;&gt;#&lt;/a&gt; Redis 多线程&lt;/h2&gt;
&lt;p&gt;Redis 作为一种高性能的键值存储系统，最初是单线程设计的，这意味着 Redis 在处理客户端的请求时，包括获取 (socket 读)&lt;br&gt;
、解析、执行、内容返回 (socket 写) 等都由一个顺序串行的主线程处理，这就是所谓的单线程。但如果严格来讲从 Redis 4&lt;br&gt;
 之后并不是单线程，除了主线程外，它也有后台线程在处理一些较为缓慢的操作，例如清理脏数据、无用连接的释放、大 key 的删除等等。&lt;br&gt;
这样的设计保证了数据的一致性和简单性，但也限制了 Redis 在多核 CPU 环境下的性能潜力。从 Redis 6.0 开始，Redis&lt;br&gt;
 引入了多线程的支持，以充分利用现代多核处理器的优势。&lt;/p&gt;
&lt;p&gt;Redis 6 为何引入多线程？&lt;/p&gt;
&lt;p&gt;随着目前行业内越来越复杂的业务场景，有些公司动不动就上亿的交易量，因此需要更大的&lt;br&gt;
 QPS。常见的解决方案是在分布式架构中对数据进行分区并采用多个服务器，但该方案有非常大的缺点，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;要管理的 Redis 服务器太多，维护代价大；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;某些适用于单个 Redis 服务器的命令不适用于数据分区；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据分区无法解决热点读 / 写问题；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据偏斜，重新分配和放大 / 缩小变得更加复杂等等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从 Redis 自身角度来说，因为读写网络的 read/write 系统调用占用了 Redis 执行期间大部分 CPU 时间，瓶颈主要在于网络的 IO 消耗，&lt;br&gt;
 优化主要有两个方向:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;提高网络 IO 性能，典型的实现比如使用 DPDK 来替代内核网络栈的方式；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用多线程充分利用多核，典型的实现比如 Memcached。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;协议栈优化的这种方式跟 Redis 关系不大，支持多线程是一种最有效最便捷的操作方式。所以总结起来，Redis 支持多线程主要就是两个原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以充分利用服务器 CPU 资源，目前主线程只能利用一个核；&lt;/li&gt;
&lt;li&gt;多线程任务可以分摊 Redis 同步 IO 读写负荷。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Redis 多线程的工作原理&lt;/p&gt;
&lt;p&gt;在 Redis 6.0 中，多线程主要用于处理客户端的网络 I/O 操作，包括读取客户端请求、解析请求以及将响应写回到客户端。具体来说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多线程 I/O：Redis 在主线程之外创建了若干个 I/O 子线程，这些子线程负责读取客户端的请求数据，并将其传递给主线程进行处理。主线程处理完请求后，子线程再负责将响应写回到客户端。&lt;/li&gt;
&lt;li&gt;命令执行：尽管引入了多线程，Redis 的命令执行仍然是单线程的。这意味着 Redis 仍然保证了数据的一致性，因为所有命令都在同一个线程中顺序执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;配置多线程&lt;/p&gt;
&lt;p&gt;Redis 6.0 中的多线程支持需要在 redis.conf 文件中进行配置。Redis 6 的多线程默认是禁用的，只使用主线程。可以通过设置&lt;br&gt;
 io-threads-do-reads 参数来启用多线程 I/O 支持，并指定子线程的数量。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;io-threads 4  # 设置子线程的数量&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;io-threads-do-reads yes  # 启用子线程读取&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;官方建议线程数应小于机器的核数，并且给出了一个简单的指导原则：对于 4 核的机器，建议设置 2 或 3 个线程；对于 8 核的机器，建议设置&lt;br&gt;
 6 个线程。线程数并不是越多越好，一般超过 8 个线程就没有太多的意义了。&lt;/p&gt;
&lt;p&gt;使用场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络 I/O 密集型操作：当 Redis 实例面临大量的网络 I/O 负载时，多线程可以帮助减轻主线程的压力，提高系统的整体吞吐量。&lt;/li&gt;
&lt;li&gt;多核 CPU 利用率：在多核处理器环境下，多线程可以让 Redis 更好地利用硬件资源，特别是在处理高并发请求时。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单线程命令执行：尽管 Redis 引入了多线程支持，但命令的执行仍然是单线程的。这意味着 Redis 依然保证了数据的一致性和事务的安全性。&lt;/li&gt;
&lt;li&gt;适用性：多线程功能最适合在网络 I/O 成为性能瓶颈的情况下使用。如果 Redis 实例的 CPU 占用率已经很高，那么开启多线程可能并不会带来显著的性能提升。&lt;/li&gt;
&lt;li&gt;兼容性：在 Redis 的其他模式（如集群模式）中，多线程功能可能不完全适用，因此在使用时需要谨慎。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;redis-集群&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis-集群&#34;&gt;#&lt;/a&gt; Redis 集群&lt;/h2&gt;
&lt;h3 id=&#34;redis-主从&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis-主从&#34;&gt;#&lt;/a&gt; Redis 主从&lt;/h3&gt;
&lt;p&gt;和 MySQL 需要主从复制的原因一样，Redis 虽然读取写入的速度都特别快，但是也会产生性能瓶颈，特别是在读压力上，为了分担压力，Redis 支持主从复制。&lt;br&gt;
Redis 的主从结构包括一主一从，一主多从或级联结构，复制类型分为全量同步和增量同步。&lt;br&gt;
下图为级联结构：&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/13/%E3%80%90Redis%E3%80%91Redis%E8%AF%A6%E8%A7%A3/1557639147418-27b8b69d-f0a8-4ec0-a771-99c43783190d.png&#34; class=&#34;&#34; title=&#34;1557639147418-27b8b69d-f0a8-4ec0-a771-99c43783190d.png&#34;&gt;
&lt;h4 id=&#34;全量同步&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#全量同步&#34;&gt;#&lt;/a&gt; 全量同步&lt;/h4&gt;
&lt;p&gt;Redis 全量复制一般发生在 slave 的初始阶段，这时 slave 需要将 master 上的数据都复制一份，具体步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;slave 连接 master，发送 SYNC 命令；&lt;/li&gt;
&lt;li&gt;master 街道 SYNC 命令后，执行 BGSAVE 命令生产 RDB 文件并使用缓冲区记录此后执行的所有写命令；&lt;/li&gt;
&lt;li&gt;master 的 BGSAVE 执行完成后，向所有的 slave 发送快照文件，并在发送过程中继续记录执行的写命令；&lt;/li&gt;
&lt;li&gt;slave 收到快照后，丢弃所有的旧数据，载入收到的数据；&lt;/li&gt;
&lt;li&gt;master 快照发送完成后就会开始向 slave 发送缓冲区的写命令；&lt;/li&gt;
&lt;li&gt;slave 完成对快照的载入，并开始接受命令请求，执行来自 master 缓冲区的写命令；&lt;/li&gt;
&lt;li&gt;slave 完成上面的数据初始化后就可以开始接受用户的读请求了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;大致流程图如下：&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/13/%E3%80%90Redis%E3%80%91Redis%E8%AF%A6%E8%A7%A3/1557639652986-bfbcd0af-6688-4047-83df-8f3bea5d0875.png&#34; class=&#34;&#34; title=&#34;1557639652986-bfbcd0af-6688-4047-83df-8f3bea5d0875.png&#34;&gt;
&lt;h4 id=&#34;增量复制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#增量复制&#34;&gt;#&lt;/a&gt; 增量复制&lt;/h4&gt;
&lt;p&gt;增量复制实际上就是在 slave 初始化完成后开始正常工作时 master 发生写操作同步到 slave 的过程。增量复制的具体步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;主节点记录复制偏移量：&lt;br&gt;
在全量复制完成后，主节点开始记录其发送给从节点的所有写命令，并维护一个复制偏移量（replication&lt;br&gt;
offset），这个偏移量表示了主节点已发送了多少字节的数据给从节点。&lt;/li&gt;
&lt;li&gt;从节点记录复制偏移量：&lt;br&gt;
同时，从节点也会记录接收到的命令及其对应的偏移量。这使得从节点能够知道它已经处理了多少数据。&lt;/li&gt;
&lt;li&gt;主节点维护积压队列：&lt;br&gt;
为了支持增量复制，主节点会维护一个 “积压队列”（backlog）。这是一个固定大小的环形缓冲区，用来存储最近的写入命令。这样即使从节点暂时断开连接，也能在重新连接后获取到断开期间丢失的数据。&lt;/li&gt;
&lt;li&gt;从节点请求增量数据：&lt;br&gt;
当从节点重新连接到主节点时，它会发送一个 PSYNC 命令，附带它最后已知的复制偏移量和主节点的运行 ID（run&lt;br&gt;
ID）。主节点会检查这个信息，并决定是否进行增量复制。&lt;/li&gt;
&lt;li&gt;增量复制：
&lt;ul&gt;
&lt;li&gt;如果主节点发现从节点提供的偏移量在积压队列的有效范围内，则主节点会从该偏移量开始向从节点发送所有后续的写命令，这就是增量复制。&lt;/li&gt;
&lt;li&gt;如果偏移量不在有效范围内，或者从节点提供的运行 ID 与主节点当前的运行 ID 不符（可能是因为主节点重启过），那么主节点会选择进行一次全量复制。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;从节点应用增量数据：&lt;br&gt;
从节点接收到增量数据后，会将其应用到自己的数据集上，使自己的数据与主节点保持一致。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Redis 主从同步的特点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;采用异步复制；&lt;/li&gt;
&lt;li&gt;可以一主多从；&lt;/li&gt;
&lt;li&gt;主从复制对于 master 来说是非阻塞的，也就是说 slave 在进行主从复制的过程中，master 依然可以处理请求；&lt;/li&gt;
&lt;li&gt;主从复制对于 slave 来说也是非阻塞的，也就是说 slave 在进行主从复制的过程中也可以接受外界的查询请求，只不过这时候返回的数据不一定是正确的。为了避免这种情况发生，可以在 slave 的配置文件中配置，在同步过程中阻止查询；&lt;/li&gt;
&lt;li&gt;每个 slave 可以接受来自其他 slave 的连接；&lt;/li&gt;
&lt;li&gt;主从复制提高了 Redis 服务的扩展性，避免单节点问题，另外也为数据备份冗余提供了一种解决方案；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为了降低主 redis 服务器写磁盘压力带来的开销，可以配置让主 redis 不在将数据持久化到磁盘，而是通过连接让一个配置的从 redis 服务器及时的将相关数据持久化到磁盘，不过这样会存在一个问题，就是主 redis 服务器一旦重启，因为主 redis 服务器数据为空，这时候通过主从同步可能导致从 redis 服务器上的数据也被清空；&lt;/p&gt;
&lt;h4 id=&#34;redis主从复制搭建&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis主从复制搭建&#34;&gt;#&lt;/a&gt; Redis 主从复制搭建&lt;/h4&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;下载软件包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;wget http://download.redis.io/releases/redis-4.0.10.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;解压软件包，主从都需要做（本次是单机多实例来做主从）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;tar xf redis-4.0.10.tar.gz -C /home/redis/6379/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;tar xf redis-4.0.10.tar.gz -C /home/redis/6380/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;编译安装&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;yum install -y gcc gcc++&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;make MALLOC=libc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;启动Redis（修改了Redis运行方式为守护进程方式）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/home/redis/6379/redis-4.0.10/src/redis-server /home/redis/6379/redis-4.0.10/redis.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;从库做相同的操作，由于是单机多实例，所以修改从库的port为6380，启动从库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/home/redis/6380/redis-4.0.10/src/redis-server /home/redis/6380/redis-4.0.10/redis.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;Redis测试&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;master：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;./src/redis-cli&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127.0.0.1:6379&amp;gt; set name 111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;OK&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127.0.0.1:6379&amp;gt; get name&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;111&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;slave：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;./src/redis-cli -p 6380&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127.0.0.1:6380&amp;gt; set name slave&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;OK&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127.0.0.1:6380&amp;gt; get name&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;slave&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;主从搭建&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;1、只需要配置slave，指明master的IP地址和port就可以了，配置完后重启实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;slaveof &amp;lt;masterip&amp;gt; &amp;lt;masterport&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;slaveof 127.0.0.1 6379&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;测试：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;master：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;./src/redis-cli&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127.0.0.1:6379&amp;gt; set password 123456&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;OK&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127.0.0.1:6379&amp;gt; get password&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;123456&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;slave：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;./src/redis-cli -p 6380&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127.0.0.1:6380&amp;gt; get password&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;123456&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;在master上设定键值对，在slave上能够准确的查出来，主从配置成功&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;redis-哨兵&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis-哨兵&#34;&gt;#&lt;/a&gt; Redis 哨兵&lt;/h3&gt;
&lt;p&gt;在主从复制实现之后，如果想对 master 进行监控，Redis 提供了一种哨兵机制，哨兵的含义就是监控 Redis 系统的运行状态，并做相应的响应。&lt;/p&gt;
&lt;p&gt;其主要的功能有以下两点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;监控所有 Redis 节点是否正常运行；&lt;/li&gt;
&lt;li&gt;master 故障后可以通过投票机制，从 slave 中选举出新的 master，保证集群正常运行。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在一个一主多从的集群中，可以启用多个哨兵进行监控以保证集群足够稳健，这种情况下，哨兵不仅监控主从服务，哨兵之间也会相互监控，建议哨兵至少 3 个并且是奇数。&lt;/p&gt;
&lt;p&gt;哨兵主要用于管理多个 Redis 服务器，主要有以下三个任务：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;监控：哨兵会不断的检测 master 和 slave 之间是否运行正常；&lt;/li&gt;
&lt;li&gt;提醒：当监控的某个 Redis 出现问题，哨兵可以通过 API 向管理员或其他应用程序发送通知；&lt;/li&gt;
&lt;li&gt;故障迁移：当一个 master 不能正常工作时，哨兵会开始一次自动故障迁移操作，它会将失效 master 的其中一个 slave 提升为 master，并让失效 master 和其他 slave 该为复制新的 master。&lt;br&gt;
当客户端试图连接失效的 master 时，集群也会向客户端返回新的 master 地址，使得集群可以使用新的 master 代替失效的 master。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;redis-哨兵的工作原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis-哨兵的工作原理&#34;&gt;#&lt;/a&gt; Redis 哨兵的工作原理&lt;/h4&gt;
&lt;p&gt;Redis 哨兵（Sentinel）是一个分布式系统，用于监控 Redis 主节点和从节点的健康状况，并在主节点发生故障时自动进行故障转移。&lt;br&gt;
哨兵系统由一组哨兵进程组成，它们相互协作来完成监控、通知、选举以及故障转移的任务。下面详细介绍哨兵的工作原理：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;监控（Monitoring）
&lt;ul&gt;
&lt;li&gt;心跳检测：每个哨兵（Sentinel）会定期向主节点、从节点以及其他哨兵发送心跳消息，以此来监控这些节点的健康状况。&lt;/li&gt;
&lt;li&gt;配置文件：哨兵的配置文件中定义了需要监控的主节点的信息，包括名称、IP 地址和端口号等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;选举（Election）
&lt;ul&gt;
&lt;li&gt;选举机制：当某个哨兵发现主节点不可用时，它会向其他哨兵发起询问，以确认主节点是否真的出现了故障。&lt;/li&gt;
&lt;li&gt;投票过程：每个哨兵都有机会投票选出一个领导者（leader），领导者负责执行实际的故障转移操作。&lt;/li&gt;
&lt;li&gt;多数原则：为了防止脑裂现象（Split-brain 指的是系统的一部分节点认为另一部分节点已经失败，而实际上那些被认为失败的节点仍在正常工作。），哨兵系统采用多数原则来决定是否进行故障转移。&lt;br&gt;
只有当超过半数的哨兵同意主节点已经失效时，才会执行故障转移。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;故障转移（Failover）
&lt;ul&gt;
&lt;li&gt;选择从节点：一旦确定主节点失效，领导者哨兵会选择一个合适的从节点来升级为主节点。&lt;/li&gt;
&lt;li&gt;数据同步：被选中的从节点会被提升为主节点，并且其他从节点会重新连接到新的主节点。&lt;/li&gt;
&lt;li&gt;客户端通知：完成故障转移后，哨兵会更新客户端的配置文件，使客户端能够连接到新的主节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;配置更新（Configuration Updates）
&lt;ul&gt;
&lt;li&gt;自动配置更新：哨引不仅会更新客户端的配置文件，还会自动更新从节点的配置，使它们指向新的主节点。&lt;/li&gt;
&lt;li&gt;持续监控：故障转移完成后，哨兵将继续监控新的主节点和从节点的健康状况。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;客户端通知
&lt;ul&gt;
&lt;li&gt;通知机制：哨兵会通知客户端新的主节点地址，以便客户端可以继续正常工作。&lt;/li&gt;
&lt;li&gt;透明切换：这一过程对客户端来说应该是透明的，即客户端不需要做任何额外的操作即可继续访问 Redis 服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实现细节如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;哨兵通信：哨兵之间通过发布 / 订阅模式进行通信，确保所有哨兵都能及时了解系统状态的变化。&lt;/li&gt;
&lt;li&gt;命令交互：哨兵使用特定的命令（如 SENTINEL 命令）来查询和管理哨兵系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主从服务器的数据要经常进行主从复制，这样会造成性能下降；&lt;/li&gt;
&lt;li&gt;当主服务器宕机后，从服务器切换成主服务器的那段时间，服务是不可用的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;redis哨兵模式搭建&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis哨兵模式搭建&#34;&gt;#&lt;/a&gt; Redis 哨兵模式搭建&lt;/h4&gt;
&lt;p&gt;主从模式搭建看上面的步骤，以下主要是在主从搭建完的基础上搭建哨兵模式。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;配置sentinel.conf文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;工作路径，注意路径不要和主重复&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dir &amp;quot;/tmp/23679&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;哨兵监控的master，主从配置一样，这里只用输入redis主节点的ip/port和法定人数。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sentinel monitor mymaster 192.168.125.128 6379 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;master或slave多长时间（默认30秒）不能使用后标记为s_down状态。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sentinel down-after-milliseconds mymaster 5000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;若sentinel在该配置值内未能完成failover操作（即故障时master/slave自动切换），则认为本次failover失败。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sentinel failover-timeout mymaster 18000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;指定了在执行故障转移时， 最多可以有多少个从服务器同时对新的主服务器进行同步，有几个slave就设置几个&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sentinel parallel-syncs mymaster 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;启动哨兵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/home/redis/26379/redis-4.0.10/src/redis-server /home/redis/26379/redis-4.0.10/sentinel.conf --sentinel&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;通过哨兵查看集群状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;./src/redis-cli -p 26379&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127.0.0.1:26379&amp;gt; sentinel master mymaster&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1) &amp;quot;name&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2) &amp;quot;mymaster&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3) &amp;quot;ip&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4) &amp;quot;172.16.0.169&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5) &amp;quot;port&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6) &amp;quot;6379&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7) &amp;quot;runid&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127.0.0.1:26379&amp;gt; sentinel slaves mymaster&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1)  1) &amp;quot;name&amp;quot;                                           # slave 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    2) &amp;quot;127.0.0.1:6381&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    3) &amp;quot;ip&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    4) &amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    5) &amp;quot;port&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    6) &amp;quot;6381&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    7) &amp;quot;runid&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    8) &amp;quot;0419f313098f6af1b4ccdb189d6beb22edf27a1c&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2)  1) &amp;quot;name&amp;quot;                                            # slave2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    2) &amp;quot;127.0.0.1:6380&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    3) &amp;quot;ip&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    4) &amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    5) &amp;quot;port&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    6) &amp;quot;6380&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    7) &amp;quot;runid&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    8) &amp;quot;5b00b502a93245f7916efd1f564bd40b16aa7b22&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;模拟主down掉&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;观察sentinel的状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127.0.0.1:26379&amp;gt; sentinel master mymaster&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1) &amp;quot;name&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2) &amp;quot;mymaster&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3) &amp;quot;ip&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4) &amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5) &amp;quot;port&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6) &amp;quot;6381&amp;quot;                # 已经从6379切换到6381&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7) &amp;quot;runid&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8) &amp;quot;0419f313098f6af1b4ccdb189d6beb22edf27a1c&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;相应的slave也做了切换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127.0.0.1:26379&amp;gt; sentinel slaves mymaster&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1)  1) &amp;quot;name&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    2) &amp;quot;127.0.0.1:6379&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    3) &amp;quot;ip&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    4) &amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    5) &amp;quot;port&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    6) &amp;quot;6379&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    7) &amp;quot;runid&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    8) &amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    9) &amp;quot;flags&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   10) &amp;quot;s_down,slave,disconnected&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2)  1) &amp;quot;name&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    2) &amp;quot;127.0.0.1:6380&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    3) &amp;quot;ip&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    4) &amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    5) &amp;quot;port&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    6) &amp;quot;6380&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    7) &amp;quot;runid&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    8) &amp;quot;5b00b502a93245f7916efd1f564bd40b16aa7b22&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;redis集群&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis集群&#34;&gt;#&lt;/a&gt; Redis 集群&lt;/h3&gt;
&lt;p&gt;Redis 在 3.0 版本开始正式引入集群特性。Redis 集群是一个分布式，高容错的内存 K/V 系统，集群可以使用的功能是普通单机 Redis 所使用的功能的一个子集。比如，Redis 集群并不支持处理多个 keys 的命令，因为这需要在不同节点间移动数据，从而达不到像 Redis 那样的性能，在高负载的情况下可能会出现无法预估的错误。&lt;/p&gt;
&lt;p&gt;Redis 集群有以下几个重要的特征：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Redis 集群的分片特征在于将空间拆分为 16384 个槽位，某一个节点负责其中一些槽位；&lt;/li&gt;
&lt;li&gt;Redis 集群提供一定程度的可用性，可以在某个节点宕机或者不可达的情况继续处理命令；&lt;/li&gt;
&lt;li&gt;Redis 集群不存在中心节点或代理节点，集群的其中一个最重要的设计目标是达到线性可扩展性；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其架构如下：&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/13/%E3%80%90Redis%E3%80%91Redis%E8%AF%A6%E8%A7%A3/1557644289413-437c9a81-dcb1-40bc-8549-2a4867b797c2.png&#34; class=&#34;&#34; title=&#34;1557644289413-437c9a81-dcb1-40bc-8549-2a4867b797c2.png&#34;&gt;
&lt;p&gt;其中每一个圆代表一个节点，任何两个节点是互通的，可以归纳以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有的节点相互连接；&lt;/li&gt;
&lt;li&gt;集群消息通信通过集群总线通信，，集群总线端口大小为客户端服务端口 + 10000，这个 10000 是固定值；&lt;/li&gt;
&lt;li&gt;节点与节点之间通过二进制协议进行通信；&lt;/li&gt;
&lt;li&gt;客户端和集群节点之间通信和通常一样，通过文本协议进行；&lt;/li&gt;
&lt;li&gt;集群节点不会代理查询；&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;redis集群的原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis集群的原理&#34;&gt;#&lt;/a&gt; Redis 集群的原理&lt;/h4&gt;
&lt;p&gt;Redis 集群是一种分布式存储解决方案，旨在通过数据分片和复制来实现高可用性和可扩展性。以下是 Redis 集群的详细运行原理：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;哈希槽（Hash Slots）&lt;br&gt;
Redis 集群中有一个长度为 16384 的哈希槽列表，编号为 0 到 16383。这些哈希槽是虚拟的，并不是真实存在的物理实体。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;哈希计算：当一个键（Key）被存储时，Redis 会计算该键的哈希值，并将哈希值映射到 0 到 16383 之间的某个哈希槽上。&lt;br&gt;
具体映射公式为：slot = CRC16 (key) mod 16384，其中 CRC16 是一个循环冗余校验算法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据分片&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;槽分配：集群中的每个 Master 节点负责一部分哈希槽。例如，如果集群中有 3 个 Master 节点，它们可能会分别负责以下槽范围：
&lt;ul&gt;
&lt;li&gt;Master 1: 槽 0-5461&lt;/li&gt;
&lt;li&gt;Master 2: 槽 5462-10923&lt;/li&gt;
&lt;li&gt;Master 3: 槽 10924-16383&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;键的分配：每个键根据其哈希值被分配到相应的槽上，进而确定存储在哪个 Master 节点上。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里值得一提的是，在 Redis Cluster 中，只有 Master 才拥有槽的所有权。如果是某个 Master 的 slave，这个 slave 只负责槽的使用，但是没有所有权。&lt;br&gt;
槽与节点结构如下所示：&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/13/%E3%80%90Redis%E3%80%91Redis%E8%AF%A6%E8%A7%A3/1557644627263-0159f2b0-f9ff-46d6-acd3-abc6a22d8e87.png&#34; class=&#34;&#34; title=&#34;1557644627263-0159f2b0-f9ff-46d6-acd3-abc6a22d8e87.png&#34;&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主从复制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主节点（Master）：每个 Master 节点负责处理写操作，并拥有槽的所有权。&lt;/li&gt;
&lt;li&gt;从节点（Slave）：每个 Master 节点可以有多个从节点，从节点负责处理读操作，并作为 Master 节点的备份。&lt;/li&gt;
&lt;li&gt;数据同步：从节点通过复制机制与 Master 节点保持数据一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;故障转移&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动故障转移：当一个 Master 节点失效时，集群会自动选择一个从节点提升为主节点，以保持集群的服务可用性。&lt;/li&gt;
&lt;li&gt;选举机制：集群中的其他节点会通过 Gossip 协议来协商并选举一个新的 Master 节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;集群间的通信&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gossip 协议：Redis 集群使用 Gossip 协议来交换节点状态信息。每个节点周期性地与其他节点交换信息，以了解集群中其他节点的状态。&lt;/li&gt;
&lt;li&gt;状态同步：通过 Gossip 协议，节点可以得知集群中的其他节点是否在线、是否有新的节点加入等信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命令路由&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端路由：客户端可以连接到任何一个节点，集群内部会根据键的哈希值来确定该键所在的节点，并将请求路由到正确的节点。&lt;/li&gt;
&lt;li&gt;命令转发：如果客户端请求的键不在当前节点上，那么该节点会将请求转发到正确的节点上。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化与配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化脚本：使用 redis-trib.rb 脚本来初始化集群。该脚本会自动分配槽到各个 Master 节点，并配置从节点。&lt;/li&gt;
&lt;li&gt;配置文件：每个节点的配置文件中需要指定集群模式和其他相关参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;投票机制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;投票过程：集群中所有 Master 节点参与投票。如果超过半数的 Master 节点与某个 Master 节点通信超时（cluster-node-timeout），则认为该&lt;br&gt;
 Master 节点已挂掉。&lt;/li&gt;
&lt;li&gt;集群不可用状态：
&lt;ul&gt;
&lt;li&gt;单个 Master 挂掉：如果某个 Master 节点挂掉，并且没有从节点，集群进入 fail 状态。&lt;/li&gt;
&lt;li&gt;多数 Master 挂掉：如果超过半数的 Master 节点挂掉，无论是否有从节点，集群也进入 fail 状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;投票机制原理图如下：&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/13/%E3%80%90Redis%E3%80%91Redis%E8%AF%A6%E8%A7%A3/1557645005629-3f876a67-45ec-4285-8821-3ebf42dd4345.png&#34; class=&#34;&#34; title=&#34;1557645005629-3f876a67-45ec-4285-8821-3ebf42dd4345.png&#34;&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;redis集群搭建&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis集群搭建&#34;&gt;#&lt;/a&gt; Redis 集群搭建&lt;/h4&gt;
&lt;p&gt;要求：至少 6 个节点，3 主 3 从。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;Redis.conf配置：大致如下&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;port 7000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;cluster-enabled &lt;span class=&#34;built_in&#34;&gt;yes&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;cluster-config-file nodes.conf&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;cluster-node-timeout 5000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;appendonly &lt;span class=&#34;built_in&#34;&gt;yes&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;创建集群&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;redis集群的命令工具redis-trib可以让我们创建集群变得非常简单。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;redis-trib是一个用ruby写的脚本，用于给各节点发指令创建集群、检查集群状态或给集群重新分片等。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;redis-trib在Redis源码的src目录下，需要gem redis来运行redis-trib。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;安装ruby环境&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;yum install rubygems -y&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;1.安装curl&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sudo yum install curl&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;2. 安装RVM&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;curl -L get.rvm.io | bash -s stable &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;3.&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;source /usr/local/rvm/scripts/rvm&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;4. 查看rvm库中已知的ruby版本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rvm list known&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;5. 安装一个ruby版本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rvm install 2.3.3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;6. 使用一个ruby版本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rvm use 2.3.3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;7. 设置默认版本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rvm remove 2.0.0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;8. 卸载一个已知版本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ruby --version&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;9. 再安装redis就可以了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gem install redis&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;启动集群&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;./redis-trib.rb create --replicas 1 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;测试集群&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7000/redis-4.0.10/src/redis-cli -c -p 7000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127.0.0.1:7000&amp;gt; set name alex&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;Redirected to slot [5798] located at 127.0.0.1:7001&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;OK&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127.0.0.1:7001&amp;gt; get name&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;alex&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;redis集群迁移&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis集群迁移&#34;&gt;#&lt;/a&gt; Redis 集群迁移&lt;/h4&gt;
&lt;p&gt;Redis 集群迁移是指将现有的 Redis 集群中的数据移动到另一个集群或新的硬件环境中的过程。&lt;br&gt;
这种迁移可能是因为需要扩大容量、更换硬件、迁移至新的数据中心或云平台等原因。迁移过程中需要考虑数据的一致性、服务的连续性以及最小化对现有业务的影响。&lt;br&gt;
迁移方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;使用 RDB 或 AOF 文件进行离线迁移&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RDB 方式：停止集群服务，执行 bgsave 命令生成 RDB 快照文件，然后将 RDB 文件复制到新的集群中，并重启服务。&lt;/li&gt;
&lt;li&gt;AOF 方式：暂停写服务，将 AOF 文件导出到新的 Redis 集群中完成数据迁移。&lt;br&gt;
这种方式简单直接，但会导致服务中断一段时间，并且适用于数据量不大或能接受短暂服务中断的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 Redis-Shake 进行在线迁移&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Redis-Shake：这是一个开源工具，专为在线迁移设计，可以在不停止服务的情况下迁移数据。&lt;br&gt;
Redis-Shake 支持多种迁移场景，包括 Redis 集群之间的数据迁移。&lt;/li&gt;
&lt;li&gt;实时迁移：在迁移过程中，Redis-Shake 会持续同步源集群和目标集群之间的数据变化，以保证数据的一致性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种方式可以减少服务中断的时间，适合于数据量大且要求服务连续性的场景。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用 Sentinel 或其他工具进行故障转移式迁移&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用 Sentinel：如果当前集群启用了 Sentinel，可以先将数据复制到新集群中，然后通过 Sentinel 触发故障转移，将流量逐渐转移到新集群。&lt;/li&gt;
&lt;li&gt;逐步迁移：这种方式可以在不影响现有服务的情况下，逐步将数据和服务转移到新的集群中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种方式适合于已经有 Sentinel 架构的场景，并且可以灵活控制迁移的节奏。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;迁移步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;准备阶段
&lt;ol&gt;
&lt;li&gt;评估迁移需求：明确迁移的目的地、迁移的规模、时间窗口等。&lt;/li&gt;
&lt;li&gt;备份现有集群：在迁移前对现有集群进行全量备份，以防迁移失败需要回滚。&lt;/li&gt;
&lt;li&gt;准备新集群：搭建新集群环境，包括硬件准备、软件安装、网络配置等。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;执行阶段
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;数据同步：根据选择的方法，开始数据同步或迁移。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果使用 Redis-Shake，启动迁移工具并配置源集群和目标集群的信息。&lt;/li&gt;
&lt;li&gt;如果使用 RDB 或 AOF，执行必要的命令生成快照文件，并将其导入到新集群。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;验证数据一致性：在迁移完成后，检查新集群的数据完整性，确保没有数据丢失或损坏。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;切换流量：当数据迁移完成并且验证无误后，开始将客户端流量切换到新集群。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;后期阶段
&lt;ol&gt;
&lt;li&gt;监控与优化：迁移完成后，持续监控新集群的性能指标，确保一切正常。&lt;/li&gt;
&lt;li&gt;清理旧集群：如果不再需要旧集群，可以安全地卸载或关闭旧集群的相关资源。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;迁移窗口：尽量选择业务低谷时段进行迁移，以减少对业务的影响。&lt;/li&gt;
&lt;li&gt;数据一致性：确保在整个迁移过程中数据的一致性，尤其是在实时迁移过程中。&lt;/li&gt;
&lt;li&gt;测试验证：在正式迁移之前，最好在一个测试环境中模拟迁移过程，确保迁移脚本和工具的正确性。&lt;/li&gt;
&lt;li&gt;回滚计划：准备好回滚计划，以便在迁移过程中出现问题时能够迅速恢复到迁移前的状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;常见面试问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常见面试问题&#34;&gt;#&lt;/a&gt; 常见面试问题&lt;/h2&gt;
&lt;h3 id=&#34;redis-为何这么快&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis-为何这么快&#34;&gt;#&lt;/a&gt; Redis 为何这么快&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;内存存储：Redis 将所有数据存储在内存中，而不是磁盘上。内存的读写速度远超磁盘，这使得 Redis 能够实现极低的延迟和高吞吐量。内存中的数据访问速度几乎是瞬时的，而磁盘则需要等待机械臂移动到正确的位置才能开始读写，这大大降低了速度。&lt;/li&gt;
&lt;li&gt;高效的数据结构：Redis 提供了多种高效的数据结构，如跳跃表（skiplist）用于实现有序集合（Sorted&lt;br&gt;
Set），压缩列表（ziplist）用于节省空间，哈希表（hashtable）用于实现散列（Hash）等。这些数据结构经过优化，能够在内存中高效地存储和检索数据。&lt;/li&gt;
&lt;li&gt;合理的数据编码：Redis 根据数据的不同类型和大小，使用不同的编码格式来存储数据。例如，短字符串可能会使用更为紧凑的编码方式，从而减少内存占用并加快处理速度。&lt;/li&gt;
&lt;li&gt;单线程模型：Redis 采用单线程模型来处理客户端的所有请求。这意味着在任何给定的时间内，只有一个客户端请求正在被执行。虽然这限制了并发处理能力，但也消除了多线程之间上下文切换和锁的竞争，从而减少了不必要的开销。&lt;/li&gt;
&lt;li&gt;非阻塞 I/O：Redis 使用事件驱动模型来处理客户端连接和请求。它使用了类似于 epoll 的 I/O 多路复用技术来监听多个客户端连接上的事件，&lt;br&gt;
当有事件发生时（例如，客户端发送了一个命令），Redis 会立即处理这个事件。这种方式使得 Redis 可以同时处理大量的客户端连接，而不会因为一个客户端的阻塞而影响其他客户端的响应速度。&lt;/li&gt;
&lt;li&gt;异步持久化：为了防止持久化操作影响 Redis 的性能，Redis 提供了异步持久化选项。例如，RDB 快照和 AOF 日志都可以在后台进程执行，不会阻塞主线程处理客户端请求。&lt;/li&gt;
&lt;li&gt;线程分离：Redis 6.0 引入了多线程处理部分 I/O 密集型任务，如 AOF 重写和 RDB 持久化，这样可以进一步提高 Redis 的性能，因为这些任务不再完全阻塞单一线程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;redis为何使用单线程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis为何使用单线程&#34;&gt;#&lt;/a&gt; Redis 为何使用单线程&lt;/h3&gt;
&lt;p&gt;Redis 选择单线程模型的原因有以下几个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存操作速度快：Redis 的所有数据都存储在内存中，内存的读写速度非常快。因此，对于基于内存的操作而言，CPU 并不是性能瓶颈。如果使用多线程，反而需要解决多线程同步的问题，这可能会增加额外的 CPU 负担。&lt;/li&gt;
&lt;li&gt;数据结构简单：Redis 中的数据结构相对简单，操作也较为迅速，这使得单线程就能够高效地处理大量的客户端请求。&lt;/li&gt;
&lt;li&gt;非阻塞 I/O 模型：Redis 使用了非阻塞的 I/O 模型，即多路复用 I/O 机制（如 epoll、select 等）。&lt;br&gt;
这种机制使得单线程可以同时监听多个客户端连接的请求，并在有请求到达时异步地处理这些请求，从而有效地利用了单线程的能力来处理高并发连接。&lt;/li&gt;
&lt;li&gt;简化设计：单线程模型简化了 Redis 的设计和实现。由于不存在多线程间的竞争和同步问题，Redis 的代码更加简洁易懂，同时也减少了潜在的 bug。&lt;/li&gt;
&lt;li&gt;避免上下文切换开销：多线程模型会导致频繁的上下文切换，这会消耗大量的 CPU 资源。单线程模型避免了这种开销，使得 Redis 可以更加高效地使用 CPU 资源。&lt;/li&gt;
&lt;li&gt;易于实现高一致性：单线程模型下，数据的一致性更容易保证，因为不存在多线程并发修改同一份数据的问题。&lt;/li&gt;
&lt;li&gt;避免锁的竞争：在多线程环境下，为了避免数据冲突，通常需要使用锁机制。而锁的竞争会导致一部分线程处于等待状态，从而降低了系统的整体吞吐量。单线程模型避免了这种锁的竞争。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然而，单线程模型也有其局限性。例如，对于 CPU 密集型的任务，单线程模型可能不是最佳选择，因为这样的任务会阻塞主线程，影响 Redis 处理其他请求的能力。为了解决这个问题，Redis 在后来的版本中引入了多线程来处理 I/O 密集型任务，如 AOF 重写和 RDB 持久化，以此来提升性能。&lt;/p&gt;
&lt;h3 id=&#34;缓存三大问题以及解决方案&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#缓存三大问题以及解决方案&#34;&gt;#&lt;/a&gt; 缓存三大问题以及解决方案？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;缓存击穿：指的是当某个 key 非常热点，在并发访问量大的情况下，如果这个 key 恰好在这个时刻失效了，那么所有请求都会落到数据库上，造成数据库瞬间压力过大。&lt;/p&gt;
&lt;p&gt;解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置热点数据永不过期：对于热点数据，可以将其设置为永不过期，或者设置一个较长的过期时间。
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ol&gt;
&lt;li&gt;减少了因缓存失效导致的数据库压力。&lt;/li&gt;
&lt;li&gt;简单易实施。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ol&gt;
&lt;li&gt;可能会导致缓存中的数据长时间不更新，影响数据的新鲜度。&lt;/li&gt;
&lt;li&gt;如果数据量很大，可能会占用较多的内存资源。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;适用场景：
&lt;ol&gt;
&lt;li&gt;数据更新频率较低，且数据新鲜度要求不高的场景。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;互斥锁：使用互斥锁（Mutex）机制来控制缓存更新的过程。当缓存失效时，先获取锁，然后检查数据库中是否有数据，如果有则更新缓存，最后释放锁。
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ol&gt;
&lt;li&gt;可以确保在缓存失效时，只有一部分请求会真正落到数据库上，减少了数据库的压力。&lt;/li&gt;
&lt;li&gt;数据更新及时。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ol&gt;
&lt;li&gt;锁的使用会增加系统的复杂性。&lt;/li&gt;
&lt;li&gt;如果并发量极高，可能会出现锁竞争激烈的情况。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;适用场景：
&lt;ol&gt;
&lt;li&gt;数据更新频繁，且数据新鲜度要求较高的场景。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;懒加载：当缓存失效后，可以先返回旧数据或占位符，然后异步加载最新数据并更新缓存。
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ol&gt;
&lt;li&gt;用户体验较好，不会立即感知到数据陈旧。&lt;/li&gt;
&lt;li&gt;减少了数据库的瞬时压力。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ol&gt;
&lt;li&gt;数据更新可能有延迟。&lt;/li&gt;
&lt;li&gt;实现复杂度较高。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;适用场景：
&lt;ol&gt;
&lt;li&gt;数据更新频率适中，对用户体验有一定要求的场景。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缓存穿透：是指查询一个一定不存在的数据，这个数据在缓存中不存在，同时在数据库中也不存在，每次请求都会直接穿透缓存去查询数据库，造成数据库压力巨大。&lt;/p&gt;
&lt;p&gt;解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置空值缓存：当查询到数据库中不存在的数据时，可以将这个查询结果（通常是 null 或特殊标识）缓存起来，设置一定的过期时间。
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ol&gt;
&lt;li&gt;直接解决了缓存穿透问题，减少了对数据库的无效请求。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ol&gt;
&lt;li&gt;如果恶意攻击者利用不存在的 key 频繁请求，可能会导致缓存中存储大量无效数据。&lt;/li&gt;
&lt;li&gt;需要合理设置过期时间，避免长期占用缓存空间。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;适用场景：
&lt;ol&gt;
&lt;li&gt;适用于存在大量无效查询请求的场景。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;布隆过滤器（Bloom Filter）：使用布隆过滤器来判断数据是否存在，可以有效地拦截那些一定不存在的数据查询。
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ol&gt;
&lt;li&gt;有效拦截不存在的数据查询，减少无效请求。&lt;/li&gt;
&lt;li&gt;占用空间小，查询速度快。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ol&gt;
&lt;li&gt;存在一定的误判率，即可能存在少量的假阳性（False Positive）。&lt;/li&gt;
&lt;li&gt;需要合理设计布隆过滤器的容量和哈希函数数量。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;适用场景：
&lt;ol&gt;
&lt;li&gt;适用于数据量大且对数据精确性有一定容忍度的场景。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;API 层面的验证：在业务逻辑层面增加对输入数据的校验，提前过滤掉非法或无效的查询请求。
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ol&gt;
&lt;li&gt;从源头上过滤掉非法请求，减轻后续处理层的压力。&lt;/li&gt;
&lt;li&gt;提升系统的安全性。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ol&gt;
&lt;li&gt;需要在业务逻辑中增加额外的验证步骤，增加了开发工作量。&lt;/li&gt;
&lt;li&gt;可能需要维护一份合法 key 的列表或规则。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;适用场景：
&lt;ol&gt;
&lt;li&gt;适用于存在非法请求可能性的场景。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缓存雪崩：是指当缓存中的数据集中过期，导致大量请求同时穿透缓存去查询数据库，造成数据库压力剧增甚至崩溃。&lt;/p&gt;
&lt;p&gt;解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分散缓存过期时间：避免大量数据同时过期，可以通过随机化设置过期时间来分散数据的过期时间。
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ol&gt;
&lt;li&gt;有效避免了大量数据同时过期的情况，降低了数据库的压力。&lt;/li&gt;
&lt;li&gt;实现简单。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ol&gt;
&lt;li&gt;需要合理设置随机过期时间，以确保数据分布均匀。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;适用场景：
&lt;ol&gt;
&lt;li&gt;适用于数据量较大且有过期时间一致性的风险的场景。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;限流降级：在缓存失效前，通过限流算法来控制请求的流量，一旦超过阈值则进行降级处理，返回默认值或缓存中的旧数据。
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ol&gt;
&lt;li&gt;通过限流机制保护了后端系统，避免了突发流量的影响。&lt;/li&gt;
&lt;li&gt;可以根据实际情况调整限流策略。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ol&gt;
&lt;li&gt;需要设计合理的降级策略，以确保用户体验不受太大影响。&lt;/li&gt;
&lt;li&gt;实现复杂度较高。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;适用场景：
&lt;ol&gt;
&lt;li&gt;适用于流量波动较大的场景。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;备用缓存：准备一个备用缓存系统，当主缓存系统出现故障或过载时，可以切换到备用缓存继续服务。
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ol&gt;
&lt;li&gt;提供了冗余保障，增强了系统的可用性。&lt;/li&gt;
&lt;li&gt;可以平滑地切换到备用系统，减少服务中断时间。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ol&gt;
&lt;li&gt;需要维护两套缓存系统，增加了运维成本。&lt;/li&gt;
&lt;li&gt;切换逻辑需要考虑数据同步问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;适用场景：
&lt;ol&gt;
&lt;li&gt;适用于对系统可用性要求较高的场景。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;异步更新：当缓存失效时，可以先返回旧数据或占位符，然后异步加载最新数据并更新缓存。
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ol&gt;
&lt;li&gt;用户体验较好，不会立即感知到数据陈旧。&lt;/li&gt;
&lt;li&gt;减少了数据库的瞬时压力。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ol&gt;
&lt;li&gt;数据更新可能有延迟。&lt;/li&gt;
&lt;li&gt;实现复杂度较高。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;适用场景：
&lt;ol&gt;
&lt;li&gt;适用于数据更新频率适中，对用户体验有一定要求的场景。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;如何保证数据库和redis缓存一致性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何保证数据库和redis缓存一致性&#34;&gt;#&lt;/a&gt; 如何保证数据库和 Redis 缓存一致性？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;最终一致性（Eventual Consistency）&lt;/p&gt;
&lt;p&gt;在分布式系统中，通常追求的是最终一致性而非强一致性。最终一致性意味着在一段时间后，所有数据副本将收敛到同一个状态。对于缓存和数据库来说，这意味着在数据更新后，缓存最终会反映数据库中的最新状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双写策略&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;先更新数据库，再删除缓存（Update Database First, Invalidate Cache）&lt;/p&gt;
&lt;p&gt;原理：当数据发生变化时，首先更新数据库中的数据，然后再删除缓存中的对应条目。当下次请求该数据时，由于缓存中没有该数据，所以会重新从数据库中读取并更新缓存。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;简单易实现。&lt;/li&gt;
&lt;li&gt;可以避免数据不一致的问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;如果删除缓存失败，则可能导致缓存中的数据比数据库中的数据旧。&lt;/li&gt;
&lt;li&gt;删除缓存操作可能会失败，需要有重试机制。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;适用场景：
&lt;ul&gt;
&lt;li&gt;更新操作较少，且对数据一致性要求较高的场景。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;先删除缓存，再更新数据库（Invalidate Cache First, Update Database）&lt;/p&gt;
&lt;p&gt;原理：当数据发生变化时，先删除缓存中的数据，然后再更新数据库中的数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;可以避免缓存击穿问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;如果更新数据库失败，而缓存已经被删除，那么这段时间内将无法从缓存中获取数据，导致请求直接访问数据库，增加数据库压力。&lt;/li&gt;
&lt;li&gt;如果删除缓存和更新数据库之间有延迟，可能会导致短暂的数据不一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;适用场景：
&lt;ul&gt;
&lt;li&gt;更新操作频繁，但对数据一致性要求稍低的场景。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;延迟双删策略（Double Eviction with Delay）&lt;/p&gt;
&lt;p&gt;原理：当数据更新时，先删除缓存中的数据，然后立即设置一个临时缓存项（如使用 Redis 的 EXPIRE 命令设置一个很短的过期时间），再更新数据库。当临时缓存项过期后，真正的更新操作完成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;减少了直接访问数据库的概率。&lt;/li&gt;
&lt;li&gt;通过设置临时缓存项，可以减少更新数据库失败导致的数据不一致问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;实现相对复杂。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;适用场景：
&lt;ul&gt;
&lt;li&gt;高并发场景下，对数据一致性要求较高的场景。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用消息队列&lt;/p&gt;
&lt;p&gt;原理：当数据在数据库中更新后，发送一个消息到消息队列中，由另一个消费者监听消息队列并更新缓存。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;解耦数据库和缓存更新操作。&lt;/li&gt;
&lt;li&gt;可以异步处理缓存更新，减少数据库更新时的延迟。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;增加了系统的复杂性。&lt;/li&gt;
&lt;li&gt;需要处理消息队列的可靠性和消息重复消费问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;适用场景：
&lt;ul&gt;
&lt;li&gt;高并发、大数据量的场景。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缓存预热&lt;/p&gt;
&lt;p&gt;原理：在系统启动或数据更新后，主动将数据加载到缓存中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;避免冷启动时大量请求直接访问数据库。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;需要额外的机制来触发预热操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;适用场景：
&lt;ul&gt;
&lt;li&gt;系统启动或数据更新后，希望尽快恢复服务的场景。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;乐观锁或版本号&lt;/p&gt;
&lt;p&gt;原理：在数据库中为数据添加一个版本号字段，每次更新时都需要检查版本号是否匹配。如果不匹配，则说明数据已被其他操作更新，需要重新获取最新数据并再次尝试更新。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;保证了数据的一致性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;可能会出现更新冲突，需要重试机制。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;适用场景：
&lt;ul&gt;
&lt;li&gt;对数据一致性要求极高的场景。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;如何保证-redis-的高并发&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何保证-redis-的高并发&#34;&gt;#&lt;/a&gt; 如何保证 Redis 的高并发？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;单机优化
&lt;ul&gt;
&lt;li&gt;硬件优化：选择高性能的硬件设备，如 SSD 硬盘、高速网络接口卡以及足够的内存。&lt;/li&gt;
&lt;li&gt;内存管理：合理设置 Redis 的最大内存限制，避免内存溢出导致的服务不可用。&lt;/li&gt;
&lt;li&gt;持久化策略：选择合适的持久化方式（RDB 或 AOF），并调整相关的配置，以减少对性能的影响。&lt;/li&gt;
&lt;li&gt;数据结构选择：根据应用场景选择合适的数据结构，以减少内存使用并提高访问效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;主从复制
&lt;ul&gt;
&lt;li&gt;读写分离：通过主从复制实现读写分离，主节点负责写操作，从节点负责读操作，可以显著提高并发处理能力。&lt;/li&gt;
&lt;li&gt;自动故障转移：使用 Redis Sentinel（哨兵）机制来监控主从节点的状态，并在主节点发生故障时自动进行故障转移，保证高可用性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分布式集群
&lt;ul&gt;
&lt;li&gt;Redis Cluster：使用 Redis 集群来水平扩展 Redis，集群可以自动将数据分片存储在不同的节点上，并提供数据复制功能。这样可以支持更高的并发量和更大的数据集。&lt;/li&gt;
&lt;li&gt;数据分片：手动将数据分片存储在不同的 Redis 实例上，可以减轻单个节点的压力。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;客户端优化
&lt;ul&gt;
&lt;li&gt;连接池：使用连接池来复用客户端连接，减少建立和销毁连接的开销。&lt;/li&gt;
&lt;li&gt;批处理：批量处理请求，例如使用 MGET、MSET 等命令来一次处理多个键值对，减少网络往返次数。&lt;/li&gt;
&lt;li&gt;命令管道：使用 Redis 的命令管道（pipelining）特性，将多个命令一次性发送给 Redis 服务器，减少网络延迟。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;调整配置
&lt;ul&gt;
&lt;li&gt;网络配置：优化网络配置，例如调整 TCP 缓冲区大小、禁用 Nagle 算法等，以提高网络传输效率。&lt;/li&gt;
&lt;li&gt;I/O 多路复用：Redis 使用事件驱动模型来处理客户端请求，可以处理大量的并发连接。确保操作系统和 Redis 的事件处理机制配置得当。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;监控与调优
&lt;ul&gt;
&lt;li&gt;性能监控：定期监控 Redis 的性能指标，如 CPU 使用率、内存使用情况、网络延迟等，以便及时发现性能瓶颈。&lt;/li&gt;
&lt;li&gt;负载均衡：使用负载均衡器来分配客户端请求，确保各个 Redis 节点的负载均衡。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;避免热点 Key
&lt;ul&gt;
&lt;li&gt;Key 的设计：合理设计 Key，避免热点 Key 的产生，例如使用哈希分片（Hash Ring）来分散请求。&lt;/li&gt;
&lt;li&gt;过期时间：为热点 Key 设置合理的过期时间，并且可以使用随机化过期时间来避免雪崩效应。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;异步处理
&lt;ul&gt;
&lt;li&gt;异步持久化：使用异步的方式进行持久化操作，避免阻塞主线程。&lt;/li&gt;
&lt;li&gt;多线程处理：Redis 6.0 引入了多线程模型来处理部分 I/O 密集型任务，如 AOF 重写和 RDB 持久化，可以进一步提升性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;redis-如何保证原子性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis-如何保证原子性&#34;&gt;#&lt;/a&gt; Redis 如何保证原子性？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;单线程模型: Redis 采用单线程模型来处理所有的客户端请求。这意味着在同一时间内，只有一个客户端请求被处理，因此消除了并发竞争条件，保证了命令执行的顺序性和原子性。&lt;/li&gt;
&lt;li&gt;命令级别的原子性: Redis 中的大多数命令都是原子性的，这意味着它们在执行过程中不会被其他操作打断。例如，SET, GET, INCR,&lt;br&gt;
DECR, HSET, HGET 等命令在执行时，整个操作过程不会被中断，从而保证了操作的完整性。&lt;/li&gt;
&lt;li&gt;事务机制: Redis 提供了事务机制，允许用户将多个命令打包成一个事务，通过 MULTI 命令开启事务，然后执行一系列命令，最后通过 EXEC 命令提交事务。&lt;br&gt;
在事务中，Redis 会将这些命令放入队列中，等到事务提交时，这些命令会按照顺序依次执行，从而保证了事务内的操作的原子性。&lt;/li&gt;
&lt;li&gt;WATCH 命令: WATCH 命令可以监视一个或多个键，如果监视的键在执行 EXEC 之前被其他客户端修改了，那么事务会被取消。这实际上是一种乐观锁机制，用来保证在某些特定场景下的数据一致性。&lt;/li&gt;
&lt;li&gt;Lua 脚本: Redis 允许在服务器端执行 Lua 脚本来处理复杂的操作。Lua 脚本在执行时具有原子性，即整个脚本作为一个整体执行，期间不会被打断。&lt;br&gt;
这意味着脚本中的多个 Redis 命令会被作为一个单独的操作来执行，从而保证了操作的原子性。&lt;/li&gt;
&lt;li&gt;数据结构的设计: Redis 内部的数据结构设计也是为了支持高效的原子操作。例如，对于有序集合（Sorted&lt;br&gt;
Sets），Redis 使用了跳跃表（Skiplist），这是一种支持快速插入、删除和查找操作的数据结构，可以高效地支持原子性操作。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;常用命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常用命令&#34;&gt;#&lt;/a&gt; 常用命令&lt;/h2&gt;
&lt;h3 id=&#34;cmd访问redis&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cmd访问redis&#34;&gt;#&lt;/a&gt; cmd 访问 redis&lt;/h3&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;redis-cli.exe -h 127.0.0.1 -p 6379&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;字符串string相关命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串string相关命令&#34;&gt;#&lt;/a&gt; 字符串 (String) 相关命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SET key value：设置键 key 的值为 value。&lt;/li&gt;
&lt;li&gt;GET key：获取键 key 的值。&lt;/li&gt;
&lt;li&gt;GETSET key value：设置键 key 的值为 value，并返回键 key 的旧值。&lt;/li&gt;
&lt;li&gt;INCR key：将键 key 的值加一，仅支持整数值。&lt;/li&gt;
&lt;li&gt;INCRBY key increment：将键 key 的值加上指定的增量 increment。&lt;/li&gt;
&lt;li&gt;DECR key：将键 key 的值减一。&lt;/li&gt;
&lt;li&gt;DECRBY key decrement：将键 key 的值减去指定的减量 decrement。&lt;/li&gt;
&lt;li&gt;APPEND key value：将 value 追加到键 key 的值后面。&lt;/li&gt;
&lt;li&gt;STRLEN key：返回键 key 的值的长度。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;列表list相关命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#列表list相关命令&#34;&gt;#&lt;/a&gt; 列表 (List) 相关命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;LPUSH key value [value …]：将一个或多个值 value 插入到键 key 的列表头部。&lt;/li&gt;
&lt;li&gt;RPUSH key value [value …]：将一个或多个值 value 插入到键 key 的列表尾部。&lt;/li&gt;
&lt;li&gt;LPOP key：移除并返回键 key 的列表的第一个元素。&lt;/li&gt;
&lt;li&gt;RPOP key：移除并返回键 key 的列表的最后一个元素。&lt;/li&gt;
&lt;li&gt;LRANGE key start stop：返回键 key 的列表中指定范围内的元素。&lt;/li&gt;
&lt;li&gt;LREM key count value：移除键 key 的列表中等于 value 的元素，count 参数决定了移除的数量。&lt;/li&gt;
&lt;li&gt;LSET key index value：将键 key 的列表中的指定位置 index 的值设为 value。&lt;/li&gt;
&lt;li&gt;LLEN key：返回键 key 的列表的长度。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;哈希hash相关命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#哈希hash相关命令&#34;&gt;#&lt;/a&gt; 哈希 (Hash) 相关命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;HSET key field value：将哈希表 key 中的域 field 的值设为 value。&lt;/li&gt;
&lt;li&gt;HGET key field：返回哈希表 key 中域 field 的值。&lt;/li&gt;
&lt;li&gt;HGETALL key：返回哈希表 key 中所有域的值。&lt;/li&gt;
&lt;li&gt;HDEL key field [field …]：删除一个或多个哈希表 key 中的域 field。&lt;/li&gt;
&lt;li&gt;HEXISTS key field：查看哈希表 key 中指定域 field 是否存在。&lt;/li&gt;
&lt;li&gt;HLEN key：返回哈希表 key 中域的数量。&lt;/li&gt;
&lt;li&gt;HKEYS key：返回哈希表 key 中所有域的列表。&lt;/li&gt;
&lt;li&gt;HVALS key：返回哈希表 key 中所有值的列表。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;集合set相关命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#集合set相关命令&#34;&gt;#&lt;/a&gt; 集合 (Set) 相关命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SADD key member [member …]：将一个或多个成员 member 加入到集合 key 中。&lt;/li&gt;
&lt;li&gt;SMEMBERS key：返回集合 key 中的所有成员。&lt;/li&gt;
&lt;li&gt;SCARD key：返回集合 key 中的成员数。&lt;/li&gt;
&lt;li&gt;SREM key member [member …]：将一个或多个成员 member 从集合 key 中移除。&lt;/li&gt;
&lt;li&gt;SISMEMBER key member：判断成员 member 是否是集合 key 的成员。&lt;/li&gt;
&lt;li&gt;SINTER key [key …]：返回给定多个集合的交集成员。&lt;/li&gt;
&lt;li&gt;SUNION key [key …]：返回给定多个集合的并集成员。&lt;/li&gt;
&lt;li&gt;SDIFF key [key …]：返回给定多个集合的差集成员。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;有序集合sorted-set相关命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#有序集合sorted-set相关命令&#34;&gt;#&lt;/a&gt; 有序集合 (Sorted Set) 相关命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ZADD key score member [score member …]：将一个或多个成员 member 及其分数 score 加入到有序集合 key 中。&lt;/li&gt;
&lt;li&gt;ZRANGE key start stop [WITHSCORES]：返回有序集合 key 中指定范围内的成员。&lt;/li&gt;
&lt;li&gt;ZREVRANGE key start stop [WITHSCORES]：返回有序集合 key 中指定范围内的成员，成员按分数值递减排列。&lt;/li&gt;
&lt;li&gt;ZREM key member [member …]：将一个或多个成员 member 从有序集合 key 中移除。&lt;/li&gt;
&lt;li&gt;ZCARD key：返回有序集合 key 中的成员数。&lt;/li&gt;
&lt;li&gt;ZSCORE key member：返回有序集合 key 中成员 member 的分数值。&lt;/li&gt;
&lt;li&gt;ZCOUNT key min max：计算在有序集合 key 中指定区间分数的成员数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;通用命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#通用命令&#34;&gt;#&lt;/a&gt; 通用命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;EXPIRE key seconds：为键 key 设置生存时间。&lt;/li&gt;
&lt;li&gt;TTL key：返回键 key 剩余的生存时间。&lt;/li&gt;
&lt;li&gt;DEL key [key …]：删除一个或多个键 key。&lt;/li&gt;
&lt;li&gt;SELECT index：选择编号为 index 的数据库。&lt;/li&gt;
&lt;li&gt;FLUSHDB：清除当前数据库中的所有数据。&lt;/li&gt;
&lt;li&gt;FLUSHALL：清除所有数据库中的所有数据。&lt;/li&gt;
&lt;li&gt;KEYS pattern：返回匹配 pattern 的所有键。&lt;/li&gt;
&lt;li&gt;TYPE key：返回键 key 的类型。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="后端" />
        <category term="数据库" />
        <category term="NoSQL" />
        <category term="缓存" />
        <category term="Redis" />
        <updated>2024-09-13T05:52:28.000Z</updated>
    </entry>
    <entry>
        <id>https://silvercrow42.github.io/joker.github.io/2024/09/13/%E3%80%90Spring%E3%80%91Spring%E8%AF%A6%E8%A7%A3/</id>
        <title>【Spring】Spring详解</title>
        <link rel="alternate" href="https://silvercrow42.github.io/joker.github.io/2024/09/13/%E3%80%90Spring%E3%80%91Spring%E8%AF%A6%E8%A7%A3/"/>
        <content type="html">&lt;h2 id=&#34;spring的基本概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring的基本概念&#34;&gt;#&lt;/a&gt; Spring 的基本概念&lt;/h2&gt;
&lt;h3 id=&#34;1-spring-是什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-spring-是什么&#34;&gt;#&lt;/a&gt; 1、Spring 是什么？&lt;/h3&gt;
&lt;p&gt;Spring 是一个轻量级 Java 开发框架，最早有 Rod Johnson 创建，目的是为了解决企业级应用开发的业务逻辑层和其他各层的耦合问题。它是一个分层的&lt;br&gt;
 JavaSE/JavaEE full-stack（一站式）轻量级开源框架，为开发 Java 应用程序提供全面的基础架构支持。Spring 负责基础架构，因此 Java&lt;br&gt;
 开发者可以专注于应用程序的开发。Spring 最根本的使命是解决企业级应用开发的复杂性，即简化 Java 开发。&lt;/p&gt;
&lt;h3 id=&#34;2-spring-带来哪些好处&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-spring-带来哪些好处&#34;&gt;#&lt;/a&gt; 2、Spring 带来哪些好处？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基于 POJO 的轻量级和最小侵入性编程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DI 机制将对象之间的依赖关系交由框架处理，减低组件间的耦合性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于 AOP 技术支持将一些通用任务，如安全、事务、日志、权限等进行集中式管理，从而提供更好的复用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于主流的应用框架提供了集成支持。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-说说-spring-有哪些模块&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-说说-spring-有哪些模块&#34;&gt;#&lt;/a&gt; 3、说说 Spring 有哪些模块？&lt;/h3&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/13/%E3%80%90Spring%E3%80%91Spring%E8%AF%A6%E8%A7%A3/26e3bd5f237ab05ae63f5a697805b33b.png&#34; class=&#34;&#34; title=&#34;Spring模块&#34;&gt;
&lt;p&gt;上图对应的是 Spring 4.x 版本的架构图，主要包括以下八个模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Spring Core&lt;/strong&gt;：基础，提供 IOC 和 DI 能力，可以说 Spring 其他所有的功能都依赖于该类库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Spring Aspects&lt;/strong&gt;：该模块为集成 AspectJ 提供支持。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Spring AOP&lt;/strong&gt;：提供面向方面的编程实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Spring JDBC&lt;/strong&gt;：Java 数据库连接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Spring JMS&lt;/strong&gt;：Java 消息服务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Spring ORM&lt;/strong&gt;：用于支持 Hibernate、Mybatis 等 ORM 工具。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Spring Web&lt;/strong&gt;：为创建 Web 应用程序提供支持。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Spring Test&lt;/strong&gt;：提供了对 JUnit 和 TestNG 测试框架的支持。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-spring-中使用了哪些设计模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-spring-中使用了哪些设计模式&#34;&gt;#&lt;/a&gt; 4、Spring 中使用了哪些设计模式？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;工厂模式&lt;/strong&gt;：包括简单工厂和工厂方法，如通过 BeanFactory 或 ApplicationContext 创建 Bean 对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;单例模式&lt;/strong&gt;：Spring 中的 Bean 对象默认就是单例模式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;代理模式&lt;/strong&gt;：Spring AOP 就是基于代理实现的，包括 JDK 动态代理和 CGlib 技术。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;模板方法模式&lt;/strong&gt;：Spring 中 jdbcTemplate 等以 Template 结尾对数据库操作的类就使用到模板模式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;观察者模式&lt;/strong&gt;：Spring 事件驱动模型就是观察者模式很经典的应用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;适配器模式&lt;/strong&gt;：Spring MVC 中，DispatcherServlet 根据请求解析到对应的 Handler（也就是我们常说的 Controller）后，开始由&lt;br&gt;
 HandlerAdapter 适配器处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;装饰者模式&lt;/strong&gt;：使用 DataSource 在不改动代码情况下切换数据源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;策略模式&lt;/strong&gt;：Spring 对资源的访问，如 Resource 接口。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-spring-中有哪些不同类型事件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-spring-中有哪些不同类型事件&#34;&gt;#&lt;/a&gt; 5、Spring 中有哪些不同类型事件？&lt;/h3&gt;
&lt;p&gt;Spring 提供了以下 5 种标准的事件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;上下文更新事件（ContextRefreshedEvent）&lt;/strong&gt;：在调用 ConfigurableApplicationContext 接口中的 refresh () 方法时被触发。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;上下文开始事件（ContextStartedEvent）&lt;/strong&gt;：当容器调用 ConfigurableApplicationContext 的 Start () 方法开始 / 重新开始容器时触发该事件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;上下文停止事件（ContextStoppedEvent）&lt;/strong&gt;：当容器调用 ConfigurableApplicationContext 的 Stop () 方法停止容器时触发该事件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;上下文关闭事件（ContextClosedEvent）&lt;/strong&gt;：当 ApplicationContext 被关闭时触发该事件。容器被关闭时，其管理的所有单例 Bean 都被销毁。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;请求处理事件（RequestHandledEvent）&lt;/strong&gt;：在 Web 应用中，当一个 http 请求（request）结束触发该事件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至于如果监听这些事件：&lt;/p&gt;
&lt;p&gt;一个 Bean 实现了 ApplicationListener 接口，当一个 ApplicationEvent 被发布以后，Bean 会自动被通知。&lt;/p&gt;
&lt;h2 id=&#34;spring-ioc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring-ioc&#34;&gt;#&lt;/a&gt; Spring IOC&lt;/h2&gt;
&lt;h3 id=&#34;1-什么是-ioc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-什么是-ioc&#34;&gt;#&lt;/a&gt; 1、什么是 IOC？&lt;/h3&gt;
&lt;p&gt;IOC 是 Inversion of Control 的缩写，即控制反转。IOC 不是一项技术，而是一种设计思想。在 Java 开发中，Ioc 意味着你可以将设计好的对象交给&lt;br&gt;
 IOC 容器，完成初始化和管理，当你需要时由容器提供控制。&lt;/p&gt;
&lt;p&gt;Spring IOC 可谓是 Spring 的核心，对于 Spring 框架而言，所谓 IOC 就是由 Spring&lt;br&gt;
 来负责控制对象的生命周期和对象间的关系。正这个控制过程中，需要动态的向某个对象提供它所需要的其他对象，这一点是通过&lt;br&gt;
 DI（Dependency Injection，依赖注入）来实现的。&lt;/p&gt;
&lt;h3 id=&#34;2-ioc-的作用或好处&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-ioc-的作用或好处&#34;&gt;#&lt;/a&gt; 2、IOC 的作用或好处？&lt;/h3&gt;
&lt;p&gt;实现对象间的解耦，同时降低应用开发的代码量和复杂度，使开发人员更专注业务。&lt;/p&gt;
&lt;h3 id=&#34;3-ioc-的实现原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-ioc-的实现原理&#34;&gt;#&lt;/a&gt; 3、IOC 的实现原理？&lt;/h3&gt;
&lt;p&gt;Spring 的 IOC 是基于工厂设计模式在加上反射实现。&lt;/p&gt;
&lt;h3 id=&#34;4-spring-有哪些容器类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-spring-有哪些容器类&#34;&gt;#&lt;/a&gt; 4、Spring 有哪些容器类？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;BeanFactory&lt;/strong&gt;：这是一个最简单的容器，它主要的功能是为依赖注入（DI）提供支持。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ApplicationContext&lt;/strong&gt;：Application Context 是 Spring 中的高级容器。和 BeanFactory 类似，它可以加载和管理配置文件中定义的&lt;br&gt;
 Bean。 另外，它还增加了企业所需要的功能，比如，从属性文件中解析文本信息和将事件传递给所指定的监听器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一些常被使用的 ApplicationContext 实现类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;FileSystemXmlApplicationContext&lt;/strong&gt;：该容器从 XML 文件中加载已被定义的 Bean， 需要提供 XML 文件的完整路径。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ClassPathXmlApplicationContext&lt;/strong&gt;：同样从 XML 文件中加载已被定义的 Bean，但无需提供完整路径，因为它会从 CLASSPATH&lt;br&gt;
 中搜索配置文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WebXmlApplicationContext&lt;/strong&gt;：该容器会在一个 Web 应用程序的范围内加载在 XML 文件中已被定义的 Bean。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-beanfactory-和-applicationcontext-的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-beanfactory-和-applicationcontext-的区别&#34;&gt;#&lt;/a&gt; 5、BeanFactory 和 ApplicationContext 的区别？&lt;/h3&gt;
&lt;p&gt;二者都是 Spring 框架的两大核心接口，都可以当做 Spring 的容器。其中 ApplicationContext 是 BeanFactory 的子接口。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BeanFactory 是 Spring 里面最底层的接口，包含了各种 Bean 的定义，读取配置文档，管理 Bean 的加载、实例化，控制 Bean&lt;br&gt;
 的生命周期，维护对象之间的依赖关系等功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ApplicationContext 接口作为 BeanFactory 的派生，除了提供 BeanFactory 所具有的功能外，还提供了更完整的框架功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;继承 MessageSource，支持国际化。&lt;/li&gt;
&lt;li&gt;统一的资源文件访问方式。&lt;/li&gt;
&lt;li&gt;提供在监听器中注册 Bean 的事件。&lt;/li&gt;
&lt;li&gt;支持同时加载多个配置文件。&lt;/li&gt;
&lt;li&gt;载入多个（有继承关系）上下文，使得每一个上下文都专注于一个特定的层次，如应用的 Web 层。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;具体区别体现在以下三个方面：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;加载方式不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BeanFactroy 采用的懒加载方式注入 Bean，即只有在使用到某个 Bean 时才对该 Bean 实例化。这样，我们就不能在程序启动时发现一些存在的&lt;br&gt;
 Spring 的配置问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ApplicationContext 是在启动时一次性创建了所有的 Bean。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建方式不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BeanFactory 通常以编程的方式被创建。&lt;/li&gt;
&lt;li&gt;ApplicationContext 还能以声明的方式创建，如使用 ContextLoader。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注册方式不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二者都支持 BeanPostProcessor、BeanFactoryPostProcessor 的使用，但 BeanFactory 需要手动注册，而 ApplicationContext&lt;br&gt;
 则是自动注册。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;6-有哪些注入方式以及区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-有哪些注入方式以及区别&#34;&gt;#&lt;/a&gt; 6、有哪些注入方式以及区别？&lt;/h3&gt;
&lt;p&gt;Spring 支持多种依赖注入的方式，包括但不限于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构造器注入（Constructor Injection）&lt;/li&gt;
&lt;li&gt;属性注入（Property or Setter Injection）&lt;/li&gt;
&lt;li&gt;字段注入（Field Injection）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;构造器注入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#构造器注入&#34;&gt;#&lt;/a&gt; 构造器注入&lt;/h4&gt;
&lt;p&gt;构造器注入是指通过构造器参数来传递依赖项。这种方式可以确保依赖项在对象创建时就已经存在，有助于提高对象的不可变性和稳定性。&lt;/p&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SomeService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; SomeDependency dependency;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;SomeService&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(SomeDependency dependency)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.dependency = Objects.requireNonNull(dependency, &lt;span class=&#34;string&#34;&gt;&amp;quot;dependency must not be null&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 Spring Boot 中，可以使用 @Autowired 注解来标记构造器，表明这是一个需要依赖注入的构造器。如果类中有多个构造器，那么需要显式地使用 @Autowired 注解来标注哪个构造器是注入构造器。&lt;/p&gt;
&lt;h4 id=&#34;属性注入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#属性注入&#34;&gt;#&lt;/a&gt; 属性注入&lt;/h4&gt;
&lt;p&gt;属性注入是通过对象的 setter 方法来注入依赖项。这是最常用的一种方式，因为它允许在对象创建后注入依赖项，增加了灵活性。&lt;/p&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SomeService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; SomeDependency dependency;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;setDependency&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(SomeDependency dependency)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.dependency = Objects.requireNonNull(dependency, &lt;span class=&#34;string&#34;&gt;&amp;quot;dependency must not be null&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;字段注入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字段注入&#34;&gt;#&lt;/a&gt; 字段注入&lt;/h4&gt;
&lt;p&gt;字段注入是通过直接在类成员变量上使用 @Autowired 注解来注入依赖项。这种方式简洁，但是不如构造器注入或属性注入那样清晰地表达依赖关系。&lt;/p&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SomeService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; SomeDependency dependency;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;一些使用上的规约&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一些使用上的规约&#34;&gt;#&lt;/a&gt; 一些使用上的规约&lt;/h4&gt;
&lt;p&gt;尽管 Spring 支持上述所有依赖注入方式，但 Spring 团队推荐使用构造器注入，特别是对于必填依赖项。构造器注入有助于确保依赖项在对象创建时已经就位，并且有助于提高对象的不可变性。此外，构造器注入使得依赖关系更加明确，便于阅读和理解代码。&lt;br&gt;
对于可选依赖项，可以使用属性注入或字段注入。然而，无论选择哪种方式，都应该遵循一些最佳实践：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免使用字段注入：除非你有非常明确的理由使用字段注入，否则应尽量避免使用。字段注入可能会导致依赖关系不明确，难以维护。&lt;/li&gt;
&lt;li&gt;使用构造器注入：对于必填依赖项，应该优先使用构造器注入。&lt;/li&gt;
&lt;li&gt;使用断言确保依赖项不为空：在构造器或 setter 方法中使用 Objects.requireNonNull () 或类似方法来确保依赖项不是空的。&lt;/li&gt;
&lt;li&gt;考虑使用 @Required 注解：虽然 Spring 现在主要使用 @Autowired，但在某些情况下，@Required 注解仍然有用，它可以用来标记 setter 方法，表示该方法必须被 Spring 的自动装配机制调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些依赖注入方式的选择取决于具体的应用场景和个人偏好。构造器注入通常被认为是更安全、更清晰的选择，而字段注入虽然简单，但在某些情况下可能会导致代码难以理解和维护。&lt;/p&gt;
&lt;h2 id=&#34;spring-bean&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring-bean&#34;&gt;#&lt;/a&gt; Spring Bean&lt;/h2&gt;
&lt;h3 id=&#34;1-spring-bean-有哪些作用域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-spring-bean-有哪些作用域&#34;&gt;#&lt;/a&gt; 1、Spring Bean 有哪些作用域？&lt;/h3&gt;
&lt;p&gt;Spring 提供以下五种 Bean 的作用域：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Singleton：单例模式，默认的作用域。在整个 Spring IoC 容器中，一个 Bean 定义对应一个实例。&lt;/li&gt;
&lt;li&gt;Prototype：原型模式。每次从容器中请求该 Bean 时都会创建一个新的实例。&lt;/li&gt;
&lt;li&gt;Request：对于每一个 HTTP 请求，都会创建一个新的 Bean 实例。这个作用域仅在 Web 环境中可用。&lt;/li&gt;
&lt;li&gt;Session：在一个 HTTP Session 中，一个 Bean 定义对应一个实例。这个作用域同样仅在 Web 环境中可用。&lt;/li&gt;
&lt;li&gt;Global-session：在一个全局的 HTTP Session 中，一个 Bean 定义对应一个实例。这个作用域主要用于 Portlet 环境。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;值的注意的是：使用 Prototype 作用域时需要慎重的思考，因为频繁创建和销毁 Bean 会带来很大的性能开销。&lt;/p&gt;
&lt;h4 id=&#34;spring-bean-作用域配置方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring-bean-作用域配置方式&#34;&gt;#&lt;/a&gt; Spring Bean 作用域配置方式&lt;/h4&gt;
&lt;p&gt;Spring 提供了三种配置 Bean 作用域的方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;XML 配置&lt;/p&gt;
&lt;p&gt;使用基于 XML 的配置文件时，可以通过&lt;bean&gt;标签的 scope 属性来指定 Bean 的作用域。&lt;/p&gt;
&lt;p&gt;例如，配置一个原型模式的 Bean：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;bean id=&lt;span class=&#34;string&#34;&gt;&amp;quot;exampleBean&amp;quot;&lt;/span&gt;class=&lt;span class=&#34;string&#34;&gt;&amp;quot;com.example.ExampleBean&amp;quot;&lt;/span&gt;scope=&lt;span class=&#34;string&#34;&gt;&amp;quot;prototype&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java 配置类配置&lt;/p&gt;
&lt;p&gt;使用 Java 配置类（通过 @Configuration 和 @Bean 注解）时，可以在 Bean 定义的方法上使用 @Scope 注解来指定作用域。&lt;/p&gt;
&lt;p&gt;例如，定义一个原型模式的 Bean：&lt;/p&gt;
  &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppConfig&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Scope(&amp;quot;prototype&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ExampleBean &lt;span class=&#34;title function_&#34;&gt;exampleBean&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ExampleBean&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ExampleSingletonBean &lt;span class=&#34;title function_&#34;&gt;exampleSingletonBean&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ExampleSingletonBean&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java 注解配置&lt;/p&gt;
&lt;p&gt;使用注解的方式配置 Bean 的作用域也很常见，特别是在组件扫描（Component Scanning）的情况下。可以直接在类或者方法级别使用 @Scope 注解。&lt;/p&gt;
&lt;p&gt;例如将一个 Service 组件设置为原型模式：&lt;/p&gt;
  &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Service&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Scope(&amp;quot;prototype&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ExampleBean&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-spring-的单例是否线程安全&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-spring-的单例是否线程安全&#34;&gt;#&lt;/a&gt; 2、Spring 的单例是否线程安全？&lt;/h3&gt;
&lt;p&gt;Spring 框架中的 Bean 默认是单例模式（Singleton），这意味着在整个应用上下文中只会存在一个 Bean 实例。&lt;/p&gt;
&lt;p&gt;对于无状态的服务层 Bean 来说，Spring 的单例模式本身是线程安全的，因为它们不保存任何实例变量的状态，所有操作都是基于输入参数进行计算。&lt;/p&gt;
&lt;p&gt;但是，如果单例 Bean 有实例变量，并且这些变量在多个线程间共享并且被修改，则可能会出现线程安全问题。&lt;/p&gt;
&lt;p&gt;如何保证线程安全&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免使用可变对象：尽量使用不可变对象或者确保对象在初始化之后不再改变其状态。&lt;/li&gt;
&lt;li&gt;同步访问：如果必须维护一些可变状态，可以通过同步方法或同步代码块来保证同一时间只有一个线程可以访问和修改这些状态。&lt;/li&gt;
&lt;li&gt;使用并发工具类：利用 Java 并发库中的工具类如 ConcurrentHashMap 等来管理共享资源。&lt;/li&gt;
&lt;li&gt;将 Bean 设计为原型模式：如果每个请求确实都需要独立的数据结构或状态，可以将 Bean 的作用域设置为&lt;br&gt;
 prototype，这样每次请求都会创建一个新的 Bean 实例，这样可能导致性能降低，但可以避免线程安全问题。&lt;/li&gt;
&lt;li&gt;使用 ThreadLocal：对于某些特定场景，可以使用 ThreadLocal 来实现线程之间的隔离，确保每个线程都有自己的独立副本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-spring-bean-的生命周期&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-spring-bean-的生命周期&#34;&gt;#&lt;/a&gt; 3、Spring Bean 的生命周期？&lt;/h3&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/13/%E3%80%90Spring%E3%80%91Spring%E8%AF%A6%E8%A7%A3/0cb7664ed7f4ec62270c528f298e03a3.png&#34; class=&#34;&#34; title=&#34;Spring Bean 生命周期&#34;&gt;
&lt;p&gt;Bean 在 Spring 容器中从创建到销毁经历了若干阶段，每一阶段都可以进行个性化定制。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Spring 对 Bean 进行实例化；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring 将配置和 Bean 的引用注入到对应的属性中；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 Bean 实现了 BeanNameAware 接口，Spring 将 Bean 的 ID 传递给 setBeanName () 方法；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 Bean 实现了 BeanFactoryAware 接口，Spring 将调用 setBeanFactory () 方法将 BeanFactory 容器实例传入；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 Bean 实现了 ApplicationContextAware 接口，Spring 将调用 setApplicationContext () 方法将 Bean 所在的应用上下文的引用传入进来；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 Bean 实现了 BeanPostProcessor 接口，Spring 将调用它们的 postProcessBeforeInitialization () 方法；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 Bean 实现了 InitializingBean 接口，Spring 将调用它们的 afterPropertiesSet () 方法。类似地，如果 Bean 使用 initmethod&lt;br&gt;
 声明了初始化方法，该方法也会被调用；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 Bean 实现了 BeanPostProcessor 接口，Spring 将调用它们的 postProcessAfterInitialization () 方法；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;此时，Bean 已经准备就绪，可以被应用程序使用了，它们将一直驻留在应用上下文中，直到该应用上下文被销毁；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 Bean 实现了 DisposableBean 接口，Spring 将调用它的 destroy () 接口方法。同样，如果使用 destroymethod&lt;br&gt;
 声明了销毁方法，该方法也会被调用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;spring-aop&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring-aop&#34;&gt;#&lt;/a&gt; Spring AOP&lt;/h2&gt;
&lt;h3 id=&#34;1-什么是-aop-以及作用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-什么是-aop-以及作用&#34;&gt;#&lt;/a&gt; 1、什么是 AOP 以及作用？&lt;/h3&gt;
&lt;p&gt;AOP（Aspect Oriented Programming）是面向切面编程，是 OOP 的一个补充，它允许我们通过引入新的模块，来分离业务逻辑与非业务逻辑，从而实现代码复用。&lt;/p&gt;
&lt;p&gt;传统的 OOP 开发中代码逻辑是至上而下的过程中会长生一些横切性问题（大量与业务无关的重复代码），这些横切问题会散落在代码的各个地方且难以维护。AOP&lt;br&gt;
 的编程思想就是把业务逻辑和横切的问题进行分离，从而达到解耦的目的，使代码的重用性和开发效率高（目的是重用代码，把公共的代码抽取出来）。&lt;/p&gt;
&lt;p&gt;即 AOP 的作用是对业务逻辑的各个部分进行隔离，降低业务逻辑的耦合性，提高程序的可重用型和开发效率。&lt;/p&gt;
&lt;h3 id=&#34;2-有哪些应用场景&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-有哪些应用场景&#34;&gt;#&lt;/a&gt; 2、有哪些应用场景？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;事务管理：在多个服务或方法调用中需要统一管理事务的开始、提交或回滚。Spring AOP 可以通过声明式事务管理（例如使用&lt;br&gt;
 @Transactional 注解）来简化事务的控制逻辑。&lt;/li&gt;
&lt;li&gt;日志记录：对系统中的关键方法或接口的日志记录，包括方法调用前后的日志打印，以及异常捕获时的日志记录。这可以通过定义一个切面，在方法执行前后插入日志记录的逻辑来实现。&lt;/li&gt;
&lt;li&gt;权限验证：在调用某些敏感操作之前，需要进行权限验证。通过 AOP 可以在方法调用前进行权限检查，从而确保只有授权用户才能访问特定功能。&lt;/li&gt;
&lt;li&gt;性能监控：监控应用程序中方法的执行时间和资源消耗情况，这对于性能瓶颈分析非常有用。可以定义一个切面来记录方法执行的开始时间和结束时间，并计算执行时间。&lt;/li&gt;
&lt;li&gt;缓存操作：对数据访问操作的结果进行缓存，以减少数据库访问次数，提高响应速度。使用 AOP&lt;br&gt;
 可以在方法执行前检查缓存，如果缓存中有数据则直接返回，否则执行方法并将结果存入缓存。&lt;/li&gt;
&lt;li&gt;输入输出参数校验：在方法执行前对传入的参数进行校验，确保参数的有效性；在方法执行后对返回值进行校验，确保返回值的正确性。&lt;/li&gt;
&lt;li&gt;资源锁定：在多线程环境中，为了防止资源竞争，可以使用 AOP 来添加锁定逻辑，确保资源的一致性和完整性。&lt;/li&gt;
&lt;li&gt;自定义注解：定义自定义注解，并通过 AOP 处理这些注解，实现特定的行为，如日志记录、性能统计等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-切面-切点-连接点-通知以及四者的关系&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-切面-切点-连接点-通知以及四者的关系&#34;&gt;#&lt;/a&gt; 3、切面、切点、连接点、通知以及四者的关系？&lt;/h3&gt;
&lt;p&gt;在 Spring AOP 中，切面（Aspect）、切点（Pointcut）、连接点（Joinpoint）和通知（Advice）是核心概念，它们共同协作来实现面向切面编程的功能。下面是这些概念之间的关系：&lt;/p&gt;
&lt;h4 id=&#34;1连接点-joinpoint&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1连接点-joinpoint&#34;&gt;#&lt;/a&gt; 1）连接点 (Joinpoint)&lt;/h4&gt;
&lt;h5 id=&#34;概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#概念&#34;&gt;#&lt;/a&gt; 概念&lt;/h5&gt;
&lt;p&gt;连接点是指程序执行过程中的某个特定点，比如方法执行、字段访问等。&lt;/p&gt;
&lt;h5 id=&#34;示例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#示例&#34;&gt;#&lt;/a&gt; 示例&lt;/h5&gt;
&lt;p&gt;在代码中，连接点的具体表现形式通常是方法的调用。当你定义了一个方法，并且这个方法被 Spring AOP 所管理，那么这个方法的执行就是一个连接点。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SomeService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;doSomething&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 业务逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在这个例子中，doSomething () 方法的执行就是一个连接点。&lt;/p&gt;
&lt;p&gt;不是所有的连接点都可以被切面所使用，只有那些被切点表达式匹配上的连接点才是 AOP 能够织入的连接点。&lt;/p&gt;
&lt;h4 id=&#34;2切点-pointcut&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2切点-pointcut&#34;&gt;#&lt;/a&gt; 2）切点 (Pointcut)&lt;/h4&gt;
&lt;h5 id=&#34;概念-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#概念-2&#34;&gt;#&lt;/a&gt; 概念&lt;/h5&gt;
&lt;p&gt;切点（Pointcut）是 AOP 中的一个重要概念，它定义了哪些连接点（Joinpoint）会被切面（Aspect）所关注，确定哪些方法或类应该被切面所拦截。&lt;br&gt;
一个切点可以匹配多个连接点，而一个连接点也可以被多个切点所匹配。&lt;/p&gt;
&lt;p&gt;在 Spring AOP 中，切点的表现形式通常包括以下几个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法执行切点：最常用的形式，用于指定特定的方法执行。&lt;/li&gt;
&lt;li&gt;类执行切点：用于指定特定类的所有方法执行。&lt;/li&gt;
&lt;li&gt;异常切点：用于指定方法抛出特定异常时的切点。&lt;/li&gt;
&lt;li&gt;构造函数切点：用于指定构造函数的执行。&lt;/li&gt;
&lt;li&gt;字段访问切点：用于指定字段的访问或修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spring AOP 支持使用 AspectJ 的切点表达式语法来定义切点。基本语法如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;execution(modifier-pattern?ret-type-pattern declaring-type-pattern?name-pattern(param-pattern)&lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt;-pattern?)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;modifiers-pattern：修饰符模式（可选）。&lt;/li&gt;
&lt;li&gt;ret-type-pattern：返回类型模式。&lt;/li&gt;
&lt;li&gt;declaring-type-pattern：声明类型模式（可选）。&lt;/li&gt;
&lt;li&gt;name-pattern：方法名称模式。&lt;/li&gt;
&lt;li&gt;param-pattern：参数模式。&lt;/li&gt;
&lt;li&gt;throws-pattern：抛出异常模式（可选）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;示例-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#示例-2&#34;&gt;#&lt;/a&gt; 示例&lt;/h5&gt;
&lt;p&gt;假设我们有一个 UserService 类，包含一个 login 方法：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;UserService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;login&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String username, String password)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 登录逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以通过注解表达式来定义切点：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Aspect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LoggingAspect&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Before(&amp;quot;execution(* com.example.service.UserService.login(..))&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;logBefore&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(JoinPoint joinPoint)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Logging before login&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Pointcut(&amp;quot;execution(* com.example.service.UserService.*(..))&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;userServiceMethods&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Before(&amp;quot;userServiceMethods()&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;logBeforeAllUserServiceMethods&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(JoinPoint joinPoint)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Logging before all UserService methods&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个例子中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;execution(* com.example.service.UserService.login(..))&lt;/code&gt; ：表示拦截 UserService 类中的 login 方法。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execution(* com.example.service.UserService.*(..))&lt;/code&gt; ：表示拦截 UserService 类中的所有方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;通知-advice&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#通知-advice&#34;&gt;#&lt;/a&gt; 通知 (Advice)&lt;/h4&gt;
&lt;h5 id=&#34;概念-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#概念-3&#34;&gt;#&lt;/a&gt; 概念&lt;/h5&gt;
&lt;p&gt;通知（Advice）是 Spring AOP&lt;br&gt;
 中的一个核心概念，它定义了在切点（Pointcut）匹配的连接点（Joinpoint）上执行的动作。通知可以分为多种类型，每种类型在不同的时机执行不同的逻辑。下面详细介绍通知的类型及其具体表现形式。&lt;/p&gt;
&lt;p&gt;Spring AOP 支持以下几种主要的通知类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;前置通知（Before Advice）：在方法执行前执行（关键字: Before）。&lt;/li&gt;
&lt;li&gt;后置通知（After Returning Advice）：仅当方法正常返回时执行（关键字: AfterReturning）。&lt;/li&gt;
&lt;li&gt;最终通知（After Advice）：无论方法是否抛出异常，都会在方法执行后执行（关键字: After）。&lt;/li&gt;
&lt;li&gt;异常通知（After Throwing Advice）：仅当方法抛出异常时执行（关键字: AfterThrowing）。&lt;/li&gt;
&lt;li&gt;环绕通知（Around Advice）：环绕通知，在方法执行前后都可执行，并且可以决定是否继续执行方法（关键字: Around）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不同类型的 AOP 通知适用于不同的场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;前置通知：适用于日志记录、权限验证、资源准备等。&lt;/li&gt;
&lt;li&gt;后置通知：适用于日志记录、资源释放、结果处理等。&lt;/li&gt;
&lt;li&gt;最终通知：适用于资源释放、日志记录等。&lt;/li&gt;
&lt;li&gt;异常通知：适用于异常记录、错误处理、资源释放等。&lt;/li&gt;
&lt;li&gt;环绕通知：适用于性能监控、事务管理、权限验证、资源控制等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;示例-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#示例-3&#34;&gt;#&lt;/a&gt; 示例&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;前置通知（Before Advice）&lt;/p&gt;
&lt;p&gt;前置通知是在方法执行前执行的通知。它可以用来进行一些准备工作，如日志记录、权限验证等。&lt;br&gt;
示例代码：&lt;/p&gt;
 &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Aspect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LoggingAspect&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Before(&amp;quot;execution(* com.example.service.UserService.*(..))&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;logBefore&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(JoinPoint joinPoint)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;MethodSignature&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;signature&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (MethodSignature) joinPoint.getSignature();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; signature.getMethod();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Executing: &amp;quot;&lt;/span&gt; + method.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Object[] args = joinPoint.getArgs();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (Object arg : args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Argument: &amp;quot;&lt;/span&gt; + arg);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个例子中，logBefore 方法是一个前置通知，它会在 UserService 类中的所有方法执行前被调用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后置通知（After Returning Advice）&lt;/p&gt;
&lt;p&gt;后置通知是在方法正常返回后执行的通知。它可以用来进行一些清理工作，如关闭资源、记录日志等。&lt;br&gt;
示例代码：&lt;/p&gt;
 &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Aspect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LoggingAspect&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@AfterReturning(pointcut = &amp;quot;execution(* com.example.service.UserService.*(..))&amp;quot;, returning = &amp;quot;result&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;logAfterReturning&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(JoinPoint joinPoint, Object result)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;MethodSignature&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;signature&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (MethodSignature) joinPoint.getSignature();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; signature.getMethod();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Method &amp;quot;&lt;/span&gt; + method.getName() + &lt;span class=&#34;string&#34;&gt;&amp;quot; returned: &amp;quot;&lt;/span&gt; + result);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个例子中，logAfterReturning 方法是一个后置通知，它会在 UserService 类中的所有方法正常返回后被调用，并接收方法的返回值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最终通知（After Advice）&lt;/p&gt;
&lt;p&gt;最终通知是在方法执行后（无论方法是否正常返回或抛出异常）都会执行的通知。它可以用来进行一些必要的清理工作，如关闭资源等。&lt;br&gt;
示例代码：&lt;/p&gt;
 &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Aspect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LoggingAspect&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@After(&amp;quot;execution(* com.example.service.UserService.*(..))&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;logFinally&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(JoinPoint joinPoint)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;MethodSignature&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;signature&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (MethodSignature) joinPoint.getSignature();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; signature.getMethod();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Method &amp;quot;&lt;/span&gt; + method.getName() + &lt;span class=&#34;string&#34;&gt;&amp;quot; has been executed.&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个例子中，logFinally 方法是一个最终通知，它会在 UserService 类中的所有方法执行后被调用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;异常通知（After Throwing Advice）&lt;/p&gt;
&lt;p&gt;异常通知是在方法抛出异常后执行的通知。它可以用来记录异常信息、发送报警等。&lt;br&gt;
示例代码：&lt;/p&gt;
 &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Aspect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LoggingAspect&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@AfterThrowing(pointcut = &amp;quot;execution(* com.example.service.UserService.*(..))&amp;quot;, throwing = &amp;quot;ex&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;logAfterThrowing&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(JoinPoint joinPoint, Exception ex)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;MethodSignature&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;signature&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (MethodSignature) joinPoint.getSignature();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; signature.getMethod();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Method &amp;quot;&lt;/span&gt; + method.getName() + &lt;span class=&#34;string&#34;&gt;&amp;quot; threw exception: &amp;quot;&lt;/span&gt; + ex.getMessage());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个例子中，logAfterThrowing 方法是一个异常通知，它会在 UserService 类中的所有方法抛出异常后被调用，并接收异常对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;环绕通知（Around Advice）&lt;/p&gt;
&lt;p&gt;环绕通知是在方法执行前后都可执行的通知。它可以完全控制方法的执行流程，包括是否继续执行方法、如何执行等。&lt;br&gt;
示例代码：&lt;/p&gt;
 &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Aspect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LoggingAspect&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Around(&amp;quot;execution(* com.example.service.UserService.*(..))&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;title function_&#34;&gt;logAround&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ProceedingJoinPoint joinPoint)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Throwable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;MethodSignature&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;signature&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (MethodSignature) joinPoint.getSignature();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; signature.getMethod();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Before executing: &amp;quot;&lt;/span&gt; + method.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; joinPoint.proceed(); &lt;span class=&#34;comment&#34;&gt;// 继续执行方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;After executing: &amp;quot;&lt;/span&gt; + method.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Method &amp;quot;&lt;/span&gt; + method.getName() + &lt;span class=&#34;string&#34;&gt;&amp;quot; threw exception: &amp;quot;&lt;/span&gt; + e.getMessage());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; e;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个例子中，logAround 方法是一个环绕通知，它会在 UserService 类中的所有方法执行前后都被调用，并且可以控制方法的执行流程。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;切面-aspect&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#切面-aspect&#34;&gt;#&lt;/a&gt; 切面 (Aspect)&lt;/h4&gt;
&lt;h5 id=&#34;概念-4&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#概念-4&#34;&gt;#&lt;/a&gt; 概念&lt;/h5&gt;
&lt;p&gt;切面（Aspect）是 Spring AOP 中的核心概念之一，它将横切关注点（Cross-cutting&lt;br&gt;
Concern）模块化为独立的组件。切面包含了多个通知（Advice）和切点（Pointcut），并通过这些通知和切点来实现特定的功能。下面详细介绍切面的概念、组成以及具体的应用场景。&lt;/p&gt;
&lt;p&gt;切面通常由以下几个部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;切点（Pointcut）：定义了哪些连接点（Joinpoint）会被切面所关注。&lt;/li&gt;
&lt;li&gt;通知（Advice）：定义了在切点匹配的连接点上执行的动作。&lt;/li&gt;
&lt;li&gt;引入（Introduction）：允许向现有类添加新的方法或属性。&lt;/li&gt;
&lt;li&gt;织入（Weaving）：将切面与应用程序的其他部分结合起来的过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;示例-4&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#示例-4&#34;&gt;#&lt;/a&gt; 示例&lt;/h5&gt;
&lt;p&gt;在 Spring AOP 中，切面通常通过 @Aspect 注解来定义，并且可以包含多个切点和通知。&lt;br&gt;
示例代码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Aspect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LoggingAspect&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 前置通知&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Before(&amp;quot;execution(* com.example.service.UserService.*(..))&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;logBefore&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(JoinPoint joinPoint)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;MethodSignature&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;signature&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (MethodSignature) joinPoint.getSignature();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; signature.getMethod();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Executing: &amp;quot;&lt;/span&gt; + method.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Object[] args = joinPoint.getArgs();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (Object arg : args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Argument: &amp;quot;&lt;/span&gt; + arg);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 后置通知&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@AfterReturning(pointcut = &amp;quot;execution(* com.example.service.UserService.*(..))&amp;quot;, returning = &amp;quot;result&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;logAfterReturning&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(JoinPoint joinPoint, Object result)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;MethodSignature&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;signature&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (MethodSignature) joinPoint.getSignature();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; signature.getMethod();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Method &amp;quot;&lt;/span&gt; + method.getName() + &lt;span class=&#34;string&#34;&gt;&amp;quot; returned: &amp;quot;&lt;/span&gt; + result);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 最终通知&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@After(&amp;quot;execution(* com.example.service.UserService.*(..))&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;logFinally&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(JoinPoint joinPoint)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;MethodSignature&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;signature&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (MethodSignature) joinPoint.getSignature();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; signature.getMethod();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Method &amp;quot;&lt;/span&gt; + method.getName() + &lt;span class=&#34;string&#34;&gt;&amp;quot; has been executed.&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 异常通知&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@AfterThrowing(pointcut = &amp;quot;execution(* com.example.service.UserService.*(..))&amp;quot;, throwing = &amp;quot;ex&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;logAfterThrowing&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(JoinPoint joinPoint, Exception ex)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;MethodSignature&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;signature&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (MethodSignature) joinPoint.getSignature();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; signature.getMethod();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Method &amp;quot;&lt;/span&gt; + method.getName() + &lt;span class=&#34;string&#34;&gt;&amp;quot; threw exception: &amp;quot;&lt;/span&gt; + ex.getMessage());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 环绕通知&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Around(&amp;quot;execution(* com.example.service.UserService.*(..))&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;title function_&#34;&gt;logAround&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ProceedingJoinPoint joinPoint)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Throwable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;MethodSignature&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;signature&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (MethodSignature) joinPoint.getSignature();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; signature.getMethod();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Before executing: &amp;quot;&lt;/span&gt; + method.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;startTime&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; System.currentTimeMillis();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; joinPoint.proceed(); &lt;span class=&#34;comment&#34;&gt;// 继续执行方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;endTime&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; System.currentTimeMillis();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;After executing: &amp;quot;&lt;/span&gt; + method.getName() + &lt;span class=&#34;string&#34;&gt;&amp;quot; (Time: &amp;quot;&lt;/span&gt; + (endTime - startTime) + &lt;span class=&#34;string&#34;&gt;&amp;quot;ms)&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Method &amp;quot;&lt;/span&gt; + method.getName() + &lt;span class=&#34;string&#34;&gt;&amp;quot; threw exception: &amp;quot;&lt;/span&gt; + e.getMessage());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; e;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;4-aop-的实现原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-aop-的实现原理&#34;&gt;#&lt;/a&gt; 4、AOP 的实现原理？&lt;/h3&gt;
&lt;p&gt;AOP 是基于代理实现的，Spring 提供了 JDK 动态代理和 CGlib 两种方式来生成代理对象。&lt;/p&gt;
&lt;p&gt;Spring AOP 会根据目标对象是否实现了接口来决定使用哪种代理策略：&lt;br&gt;
如果目标对象实现了接口，则使用 JDK 动态代理。&lt;br&gt;
如果目标对象没有实现任何接口，则使用 CGLIB 代理。&lt;br&gt;
这种策略使得 Spring AOP 能够灵活地适应不同的情况，并且保证了代理对象能够正确地执行增强逻辑。&lt;/p&gt;
&lt;p&gt;以下介绍两种不同的代理策略原理。&lt;/p&gt;
&lt;h4 id=&#34;jdk-动态代理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#jdk-动态代理&#34;&gt;#&lt;/a&gt; JDK 动态代理&lt;/h4&gt;
&lt;p&gt;JDK 动态代理是基于 Java 语言反射机制实现的。它要求被代理的对象必须实现一个或多个接口。Spring AOP 会利用这个特性，当目标对象实现了接口时，就会使用&lt;br&gt;
 JDK 动态代理来创建代理对象。&lt;/p&gt;
&lt;p&gt;工作原理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当一个对象实现了某个接口时，Spring 会通过 java.lang.reflect.Proxy 类来创建一个代理对象。&lt;/li&gt;
&lt;li&gt;这个代理对象实现了相同的接口，并且其内部持有对原始对象的引用。&lt;/li&gt;
&lt;li&gt;代理对象通过 InvocationHandler 接口来处理方法调用，这样可以在方法调用前后添加额外的行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 假设有一个接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Service&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;doSomething&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 实现类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ServiceImpl&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Service&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;doSomething&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Doing something...&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 创建代理对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Service&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ServiceImpl&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Service&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;proxy&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (Service) Proxy.newProxyInstance(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Service.class.getClassLoader(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Class&lt;/span&gt;&amp;lt;?&amp;gt;[]&amp;#123;Service.class&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;InvocationHandler&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;title function_&#34;&gt;invoke&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object proxy, Method method, Object[] args)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Throwable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Before method call&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; method.invoke(service, args);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;After method call&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;proxy.doSomething();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;cglib&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cglib&#34;&gt;#&lt;/a&gt; CGlib&lt;/h4&gt;
&lt;p&gt;CGLIB（Code Generation Library）是一个高性能的字节码生成库，它可以在运行时动态生成一个目标类的子类。这意味着即使目标对象没有实现任何接口，也可以通过&lt;br&gt;
 CGLIB 来创建代理对象。&lt;br&gt;
工作原理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CGLIB 通过继承目标类来创建一个新的子类对象。&lt;/li&gt;
&lt;li&gt;在这个子类中，对父类的方法进行增强，也就是在方法调用前后添加额外的行为。&lt;/li&gt;
&lt;li&gt;这种方式不需要目标类实现任何接口，因此更加灵活。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 假设有一个未实现接口的类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Service&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;doSomething&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Doing something...&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 创建代理对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Enhancer&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;enhancer&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Enhancer&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;enhancer.setSuperclass(Service.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        enhancer.setCallback(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MethodInterceptor&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;title function_&#34;&gt;intercept&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object obj,Method method,Object[]args,MethodProxy proxy)&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Throwable&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Before method call&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Object result=proxy.invokeSuper(obj,args);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;After method call&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Service service=(Service)enhancer.create();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        service.doSomething();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
        <category term="后端" />
        <category term="java" />
        <category term="spring" />
        <updated>2024-09-13T03:24:41.000Z</updated>
    </entry>
    <entry>
        <id>https://silvercrow42.github.io/joker.github.io/2024/09/10/%E3%80%90%E5%88%86%E5%B8%83%E5%BC%8F%E3%80%91%E9%80%9A%E8%BF%87Zookeeper%E4%B8%8ERedisson%E5%AE%9E%E7%8E%B0Spring%E6%B3%A8%E8%A7%A3%E5%BC%8F%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</id>
        <title>【分布式】通过Zookeeper与Redisson实现Spring注解式分布式锁</title>
        <link rel="alternate" href="https://silvercrow42.github.io/joker.github.io/2024/09/10/%E3%80%90%E5%88%86%E5%B8%83%E5%BC%8F%E3%80%91%E9%80%9A%E8%BF%87Zookeeper%E4%B8%8ERedisson%E5%AE%9E%E7%8E%B0Spring%E6%B3%A8%E8%A7%A3%E5%BC%8F%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
        <content type="html">&lt;p&gt;在分布式系统中，由于服务部署在多个节点中，在运行时数据层面上天生无法互通，因此在处理多线程敏感的数据时，无法像单机应用开发一样通过 java 内部实现的多线程方案来解决。此时我们就需要通过分布式锁的方式来处理数据。&lt;/p&gt;
&lt;p&gt;本文将提供一个在 spring-cloud 基础上通过 ZooKeeper 或者 Redisson 实现的注解式的加锁方案。需要使用到 Spring&lt;br&gt;
AOP，通过 ZooKeeper 加锁时需要 ZooKeeper 服务，使用 Redisson 加锁时需要使用 Redis 数据库。&lt;/p&gt;
&lt;h2 id=&#34;依赖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#依赖&#34;&gt;#&lt;/a&gt; 依赖&lt;/h2&gt;
&lt;p&gt;当使用 Redisson 方式时需要引入 Redisson 依赖，版本号自行匹配替换。&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/org.redisson/redisson --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.redisson&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;redisson&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;$&amp;#123;redisson.version&amp;#125;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当使用 ZooKeeper 方式时需要引入连接 ZooKeeper 的依赖，版本号自行匹配替换。&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/org.apache.curator/curator-recipes --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.curator&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;curator-recipes&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;$&amp;#123;curator-recipes.version&amp;#125;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;配置访问锁服务的组件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置访问锁服务的组件&#34;&gt;#&lt;/a&gt; 配置访问锁服务的组件&lt;/h2&gt;
&lt;h3 id=&#34;redisson&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redisson&#34;&gt;#&lt;/a&gt; Redisson&lt;/h3&gt;
&lt;p&gt;使用 redisson 作为锁服务的实现时，需要如下配置类配置 RedissonClient 组件。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RedissonLockConfig&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Value(&amp;quot;$&amp;#123;cloud.lock.redis.url:redis://localhost:6379&amp;#125;&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; String redisUrl;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Value(&amp;quot;$&amp;#123;cloud.lock.redis.password:&amp;#125;&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; String redisPassword;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; RedissonClient &lt;span class=&#34;title function_&#34;&gt;redissonClient&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;config&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Config&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;SingleServerConfig&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;singleServerConfig&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; config.useSingleServer();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        singleServerConfig.setAddress(redisUrl);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (StringUtils.isNotEmpty(redisPassword)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            singleServerConfig.setPassword(redisPassword);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; Redisson.create(config);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中 redisUrl 为 Redis 服务的地址，redisPassword 为 Redis 服务的密码。&lt;/p&gt;
&lt;p&gt;RedissonClient 连接配置可以按需进行调整。&lt;/p&gt;
&lt;h3 id=&#34;zookeeper&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#zookeeper&#34;&gt;#&lt;/a&gt; ZooKeeper&lt;/h3&gt;
&lt;p&gt;使用 ZooKeeper 作为锁服务的实现时，需要如下配置类配置 CuratorFramework 组件。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ZooKeeperLockConfig&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Value(&amp;quot;$&amp;#123;cloud.lock.zookeeper.url:localhost:2181&amp;#125;&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; String url;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Value(&amp;quot;$&amp;#123;cloud.lock.zookeeper.timeout:1000&amp;#125;&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; timeout;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Value(&amp;quot;$&amp;#123;cloud.lock.zookeeper.retry:3&amp;#125;&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; retry;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CuratorFramework &lt;span class=&#34;title function_&#34;&gt;zkClient&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;ExponentialBackoffRetry&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;exponentialBackoffRetry&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ExponentialBackoffRetry&lt;/span&gt;(timeout, retry);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;CuratorFramework&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;curatorFramework&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; CuratorFrameworkFactory.newClient(url, exponentialBackoffRetry);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        curatorFramework.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; curatorFramework;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中 url 是 ZooKeeper 服务地址，timeout 是连接超时时间，retry 是连接失败重试次数。&lt;/p&gt;
&lt;p&gt;CuratorFramework 连接配置可以按需进行调整。&lt;/p&gt;
&lt;h2 id=&#34;加锁逻辑&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#加锁逻辑&#34;&gt;#&lt;/a&gt; 加锁逻辑&lt;/h2&gt;
&lt;p&gt;在分布式系统中，多系统之间的数据很可能不互通，因此加锁肯定不是通过原始数据进行加锁。&lt;/p&gt;
&lt;p&gt;在加锁时，我们应该对应原始数据，生成唯一的对应该数据的 token 作为加锁依据的 key，同时该 key 在无论何时对于该原始数据而言生成的都是这个 key。这样一来，通过该 key 明确地指向原始数据进行加锁与解锁。&lt;/p&gt;
&lt;p&gt;例如在系统中，存在张 User 表，该表中 id 列为其主键。那么在进行数据加锁时，则可以考虑以如下格式：“User-[id 数据]” 来进行加锁解锁操作。&lt;/p&gt;
&lt;h3 id=&#34;redisson-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redisson-2&#34;&gt;#&lt;/a&gt; Redisson&lt;/h3&gt;
&lt;p&gt;Redisson 的 “红锁”（Red Lock）是一种基于 Redis 的分布式锁实现，它提供了高可用性和一致性保证。红锁的设计目的是为了克服单点故障问题，通过在多个&lt;br&gt;
 Redis 实例上实现分布式锁来提高系统的可靠性和可用性。&lt;/p&gt;
&lt;p&gt;红锁的基本原理&lt;br&gt;
红锁的核心思想是在多个 Redis 实例上分别尝试获取锁，只有当大多数实例成功获取锁时，才认为整个分布式锁成功获取。具体步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;尝试获取锁：在多个 Redis 实例上尝试获取锁。&lt;/li&gt;
&lt;li&gt;判断是否成功：只有当大多数 Redis 实例成功获取锁时，才认为整个分布式锁成功获取。&lt;/li&gt;
&lt;li&gt;释放锁：在所有成功获取锁的 Redis 实例上释放锁。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实现步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先需要创建一个或多个 Redis 客户端，并初始化 Redisson 框架。&lt;/li&gt;
&lt;li&gt;使用 Redisson 框架创建红锁。&lt;/li&gt;
&lt;li&gt;尝试在多个 Redis 实例上获取锁。&lt;/li&gt;
&lt;li&gt;在所有成功获取锁的 Redis 实例上释放锁。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;zookeeper-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#zookeeper-2&#34;&gt;#&lt;/a&gt; ZooKeeper&lt;/h3&gt;
&lt;p&gt;ZooKeeper 分布式锁是一种常用的分布式协调机制，用于解决多个进程或服务之间的互斥访问问题。&lt;br&gt;
在分布式系统中，多个节点可能需要同时访问共享资源，而分布式锁可以确保这些访问是互斥的，从而避免数据不一致的问题。&lt;br&gt;
同时 ZooKeeper 集群化部署的高可用性和一致性使得它可以可靠地处理高并发加锁场景。&lt;/p&gt;
&lt;p&gt;分布式锁的基本原理&lt;br&gt;
分布式锁的基本原理是在 ZooKeeper 中创建一个临时有序节点（ephemeral sequential node），每个客户端通过创建这样的节点来表示自己持有锁的状态。具体步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建临时有序节点：客户端在 ZooKeeper 中创建一个临时有序节点。&lt;/li&gt;
&lt;li&gt;判断是否是最小节点：客户端检查自己创建的节点是否是最小的节点。&lt;/li&gt;
&lt;li&gt;加锁与释放锁：如果是最小节点，则客户端获得锁；否则，客户端等待前一个节点释放锁。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实现步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建锁节点
&lt;ol&gt;
&lt;li&gt;定义锁路径：
&lt;ol&gt;
&lt;li&gt;选择一个固定的路径作为锁的根节点，例如 /distributed-lock。&lt;/li&gt;
&lt;li&gt;客户端在该路径下创建一个临时有序节点。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;创建临时有序节点：
&lt;ol&gt;
&lt;li&gt;使用 create API 创建临时有序节点，例如 /distributed-lock/lock-0000000001。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;判断是否是最小节点
&lt;ol&gt;
&lt;li&gt;获取所有子节点：
&lt;ol&gt;
&lt;li&gt;客户端获取锁路径下的所有子节点，例如 /distributed-lock 下的所有子节点。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;比较节点序号：
&lt;ol&gt;
&lt;li&gt;客户端将自己的节点序号与其他节点的序号进行比较。&lt;/li&gt;
&lt;li&gt;如果当前节点序号是最小的，则获得锁；否则，等待前一个节点释放锁。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;加锁与释放锁
&lt;ol&gt;
&lt;li&gt;加锁：
&lt;ol&gt;
&lt;li&gt;如果当前节点序号是最小的，则获得锁。&lt;/li&gt;
&lt;li&gt;否则，等待前一个节点释放锁。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;释放锁：
&lt;ol&gt;
&lt;li&gt;当客户端不再需要锁时，删除自己创建的临时有序节点。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;加锁实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#加锁实现&#34;&gt;#&lt;/a&gt; 加锁实现&lt;/h2&gt;
&lt;p&gt;在进行实现时，首先考虑到一次加锁时可能涉及到多个数据，因此使用 key 集合来进行加锁，timeout 与 timeunit 用于指代锁的超时时长。&lt;/p&gt;
&lt;p&gt;抽象出如下方法：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; LockEntity &lt;span class=&#34;title function_&#34;&gt;doLock&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(List&amp;lt;String&amp;gt; keys,Long timeout,TimeUnit unit)&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;LockEntity 为锁实例，用于进行解锁操作&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LockEntity&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; Object lock;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    LockEntity(Object lock) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.lock = lock;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;unlock&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (lock &lt;span class=&#34;keyword&#34;&gt;instanceof&lt;/span&gt; RLock rLock) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            rLock.unlock();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (lock &lt;span class=&#34;keyword&#34;&gt;instanceof&lt;/span&gt; InterProcessLock interProcessLock) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            interProcessLock.release();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;针对不同的锁类型，采取不同的解锁方法&lt;/p&gt;
&lt;h3 id=&#34;redisson-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redisson-3&#34;&gt;#&lt;/a&gt; Redisson&lt;/h3&gt;
&lt;p&gt;逻辑：先通过 RedissonClient 组件遍历 keys 集合获取所有锁实例，再将以这些锁实例来获取一个 MultiLock 实例，来进行多锁的统一加锁解锁，再根据提供的 timeout 和 unit 加锁并返回 LockEntity 对象用来操作解锁。&lt;/p&gt;
&lt;p&gt;源码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; LockEntity &lt;span class=&#34;title function_&#34;&gt;doLock&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Set&amp;lt;String&amp;gt; keys,Long timeout,TimeUnit unit)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ArrayList&amp;lt;RLock&amp;gt; rLocks=&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;(keys.size());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(String key:keys)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rLocks.add(redissonClient.getLock(key));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        RLock multiLock=redissonClient.getMultiLock(rLocks.toArray(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RLock&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(timeout!=&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;&amp;amp;&amp;amp;timeout&amp;gt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&amp;amp;&amp;amp;unit!=&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        multiLock.lock(timeout,unit);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        multiLock.lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LockEntity&lt;/span&gt;(multiLock);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;zookeeper-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#zookeeper-3&#34;&gt;#&lt;/a&gt; ZooKeeper&lt;/h3&gt;
&lt;p&gt;逻辑：同 Redisson 类似，先构造多锁对象，然后使用该对象进行加锁并返回&lt;/p&gt;
&lt;p&gt;源码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; LockEntity &lt;span class=&#34;title function_&#34;&gt;doLock&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Set&amp;lt;String&amp;gt; lockKeys,Long timeout,TimeUnit unit)&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        InterProcessMultiLock multiLock=&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;InterProcessMultiLock&lt;/span&gt;(zkClient,lockKeys.stream().toList());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(timeout!=&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;&amp;amp;&amp;amp;timeout&amp;gt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&amp;amp;&amp;amp;unit!=&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        multiLock.acquire(timeout,unit);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        multiLock.acquire();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LockEntity&lt;/span&gt;(multiLock);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;实现通过注解加锁&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实现通过注解加锁&#34;&gt;#&lt;/a&gt; 实现通过注解加锁&lt;/h2&gt;
&lt;h3 id=&#34;定义注解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定义注解&#34;&gt;#&lt;/a&gt; 定义注解&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;首先针对锁的实现方式，定义区分注解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;@RedisLock&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Target(&amp;#123;ElementType.METHOD&amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;meta&#34;&gt;@interface&lt;/span&gt; RedisLock &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    TimeUnit &lt;span class=&#34;title function_&#34;&gt;unit&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt; TimeUnit.SECONDS;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@ZkLock&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Target(&amp;#123;ElementType.METHOD&amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;meta&#34;&gt;@interface&lt;/span&gt; ZkLock &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    TimeUnit &lt;span class=&#34;title function_&#34;&gt;unit&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt; TimeUnit.SECONDS;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两个注解作用于方法上，用于表明当前方法需要使用到分布式锁，以及需要使用到哪种分布式锁，并提供锁的超时时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其次针对方法参数中的的同步参数，提供一个注解 @SyncArg。&lt;/p&gt;
   &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Target(&amp;#123;ElementType.PARAMETER&amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;meta&#34;&gt;@interface&lt;/span&gt; SyncArg &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; 加锁依据，填入Spel表达式，用于生成锁key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 应该确保每一个加锁对象能够生成一个固定的且独立的key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 使用时可用上下文包括 arg：当前参数，method：当前运行的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    String &lt;span class=&#34;title function_&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;#arg.hashCode()&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; 是否采用多对象解析方式，多对象时将产生多个锁并同步加锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 当传入对象实现了 Iterable时，将遍历每一个子项，并且生成key时arg为当前遍历到的对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 当传入对象实现了Map时，将遍历每个Entry，生成key时arg为当前Entry&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;isMulti&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该注解作用于方法参数，表明该参数需要参照 value 值生成 key 来加锁，isMulti 用于标识当前参数是否是多对象参数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;处理注解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#处理注解&#34;&gt;#&lt;/a&gt; 处理注解&lt;/h3&gt;
&lt;p&gt;首先，通过一个上下文对象用来自动生成加锁的 key。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Getter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Setter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LockContext&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 被加锁的参数对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Object arg;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 生成key的Spel表达式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; String keyExpression;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 是否为多对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; multi;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 上下文参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Getter(AccessLevel.PACKAGE)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; params;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;LockContext&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(SyncArg syncArg, Object arg)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;(arg, syncArg.value(), syncArg.isMulti());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;LockContext&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object arg, String keyExpression, &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; multi)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;(arg, keyExpression, multi, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;LockContext&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object arg, String keyExpression, &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; multi, Map&amp;lt;String, Object&amp;gt; params)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.arg = arg;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.keyExpression = keyExpression;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.multi = multi;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.params = params;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 添加上下文参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; key   key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; value value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; 用于链式调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; LockContext &lt;span class=&#34;title function_&#34;&gt;addParam&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String key, Object value)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        params.put(key, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 删除上下文参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; key key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; 用于链式调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; LockContext &lt;span class=&#34;title function_&#34;&gt;removeParam&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String key)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        params.remove(key);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title function_&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; getKey(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SpelExpressionParser&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 生成key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; parser Spel表达式解析器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title function_&#34;&gt;getKey&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(SpelExpressionParser parser)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;StandardEvaluationContext&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;context&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;StandardEvaluationContext&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        HashMap&amp;lt;String, Object&amp;gt; contextMap = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;(params);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!contextMap.containsKey(&lt;span class=&#34;string&#34;&gt;&amp;quot;arg&amp;quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            contextMap.put(&lt;span class=&#34;string&#34;&gt;&amp;quot;arg&amp;quot;&lt;/span&gt;, arg);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        context.setVariables(contextMap);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; parser.parseExpression(keyExpression).getValue(context, String.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里通过继承抽象类的方式在抽象类中提供一些公共方法，由子类进行加锁的实现。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AbstractLockService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 格式化生成的key，在生成加锁key时会经过该方法，并以返回的key作为最终加锁时的key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; generatedKey 通过上下文对象自动生成的key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; 格式化后的key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; String &lt;span class=&#34;title function_&#34;&gt;formatKey&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String generatedKey)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 通过LockContext的形式生成锁key再加锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; lockContexts 用于生成锁key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; timeout      锁超时时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; unit         时间单位&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; 锁对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; LockEntity &lt;span class=&#34;title function_&#34;&gt;doLockByContext&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(List&amp;lt;LockContext&amp;gt; lockContexts, Long timeout, TimeUnit unit)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; doLock(getLockKeys(lockContexts), timeout, unit);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; LockEntity &lt;span class=&#34;title function_&#34;&gt;doLock&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Set&amp;lt;String&amp;gt; keys)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; doLock(keys, &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 通过锁keys进行加锁，由子类实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; keys    锁key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; timeout 超时时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; unit    时间单位&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; 锁对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; LockEntity &lt;span class=&#34;title function_&#34;&gt;doLock&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Set&amp;lt;String&amp;gt; keys, Long timeout, TimeUnit unit)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 根据方法及入参解析出LockContext列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; method 加锁的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; args   入参&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; LockContext列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; List&amp;lt;LockContext&amp;gt; &lt;span class=&#34;title function_&#34;&gt;getLockContexts&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Method method, Object[] args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Annotation[][] parameterAnnotations = method.getParameterAnnotations();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ArrayList&amp;lt;LockContext&amp;gt; lockContexts = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; parameterAnnotations.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;//获取参数注解，与参数一一对应&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Annotation[] annotations = parameterAnnotations[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;//找到@SyncArg注解&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;SyncArg&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;syncArg&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (Annotation annotation : annotations) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (annotation &lt;span class=&#34;keyword&#34;&gt;instanceof&lt;/span&gt; SyncArg syncArgA) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    syncArg = syncArgA;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (syncArg != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;//注解存在则通过注解构造上下文对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;type&#34;&gt;LockContext&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;lockContext&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LockContext&lt;/span&gt;(syncArg, args[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                lockContext.addParam(&lt;span class=&#34;string&#34;&gt;&amp;quot;method&amp;quot;&lt;/span&gt;, method);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                lockContexts.add(lockContext);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; lockContexts;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 通过上下文对象列表生成key集合&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; lockContexts 上下文对象列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; key集合&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; HashSet&amp;lt;String&amp;gt; &lt;span class=&#34;title function_&#34;&gt;getLockKeys&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(List&amp;lt;LockContext&amp;gt; lockContexts)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//解析上下文列表，生成key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        HashSet&amp;lt;String&amp;gt; keys = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;HashSet&lt;/span&gt;&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;SpelExpressionParser&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;parser&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SpelExpressionParser&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (LockContext lockContext : lockContexts) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;multi&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; lockContext.isMulti();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;arg&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; lockContext.getArg();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;keyExpression&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; lockContext.getKeyExpression();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (multi &amp;amp;&amp;amp; arg &lt;span class=&#34;keyword&#34;&gt;instanceof&lt;/span&gt; Iterable&amp;lt;?&amp;gt; iterable) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;//多对象模式且参数对象为Iterable时&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (Object o : iterable) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;type&#34;&gt;LockContext&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;singleContext&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LockContext&lt;/span&gt;(o, keyExpression, &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;, lockContext.getParams());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    keys.add(formatKey(singleContext.getKey(parser)));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (multi &amp;amp;&amp;amp; arg &lt;span class=&#34;keyword&#34;&gt;instanceof&lt;/span&gt; Map&amp;lt;?, ?&amp;gt; map) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;//多对象模式且参数对象为map时&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (Map.Entry&amp;lt;?, ?&amp;gt; entry : map.entrySet()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;type&#34;&gt;LockContext&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;singleContext&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LockContext&lt;/span&gt;(entry, keyExpression, &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;, lockContext.getParams());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    keys.add(formatKey(singleContext.getKey(parser)));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                keys.add(formatKey(lockContext.getKey(parser)));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; keys;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;redisson实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redisson实现&#34;&gt;#&lt;/a&gt; Redisson 实现&lt;/h5&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Slf4j&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Aspect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RedissonLockService&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AbstractLockService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; RedissonClient redissonClient;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;RedissonLockService&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(RedissonClient redissonClient)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.redissonClient = redissonClient;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Pointcut(&amp;quot;@annotation(org.joker.commons.cloud.lock.annotation.RedisLock)&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;doLockByContext&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Around(&amp;quot;doLockByContext()&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Object &lt;span class=&#34;title function_&#34;&gt;around&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ProceedingJoinPoint point)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Throwable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//获取方法对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;MethodSignature&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;signature&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (MethodSignature) point.getSignature();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; signature.getMethod();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//解析用于生成锁的上下文&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        List&amp;lt;LockContext&amp;gt; lockContexts = getLockContexts(method, point.getArgs());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//加锁并执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;RedisLock&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;lock&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; method.getAnnotation(RedisLock.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;LockEntity&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;lockEntity&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; doLockByContext(lockContexts, lock.timeout(), lock.unit());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; point.proceed();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            lockEntity.unlock();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title function_&#34;&gt;formatKey&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String generatedKey)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;cloud:lock:&amp;quot;&lt;/span&gt; + generatedKey;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; LockEntity &lt;span class=&#34;title function_&#34;&gt;doLock&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Set&amp;lt;String&amp;gt; keys, Long timeout, TimeUnit unit)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ArrayList&amp;lt;RLock&amp;gt; rLocks = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;(keys.size());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (String key : keys) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            rLocks.add(redissonClient.getLock(key));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;RLock&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;multiLock&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; redissonClient.getMultiLock(rLocks.toArray(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RLock&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (timeout != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; timeout &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; unit != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            multiLock.lock(timeout, unit);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            multiLock.lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LockEntity&lt;/span&gt;(multiLock);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过 AOP 的方法，在 @RedisLock 注解处创建切面，在执行该方法之前先对该方法的参数进行处理，产生上下文列表，并依据该列表生成对应的 key 集合，再通过该 key 集合尝试获取锁。在获取锁成功后再执行对应的方法，在 finally 代码块中释放锁。&lt;/p&gt;
&lt;h5 id=&#34;zookeeper实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#zookeeper实现&#34;&gt;#&lt;/a&gt; ZooKeeper 实现&lt;/h5&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Slf4j&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Aspect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ZooKeeperLockService&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AbstractLockService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; CuratorFramework zkClient;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;ZooKeeperLockService&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CuratorFramework zkClient)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.zkClient = zkClient;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Pointcut(&amp;quot;@annotation(org.joker.commons.cloud.lock.annotation.ZkLock)&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;doLockByContext&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Around(&amp;quot;doLockByContext()&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Object &lt;span class=&#34;title function_&#34;&gt;around&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ProceedingJoinPoint point)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Throwable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//获取方法对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;MethodSignature&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;signature&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (MethodSignature) point.getSignature();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; signature.getMethod();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//解析用于生成锁的上下文&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        List&amp;lt;LockContext&amp;gt; lockContexts = getLockContexts(method, point.getArgs());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//加锁并执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;ZkLock&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;zkLock&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; method.getAnnotation(ZkLock.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;LockEntity&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;lockEntity&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; doLockByContext(lockContexts, zkLock.timeout(), zkLock.unit());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; point.proceed();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            lockEntity.unlock();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title function_&#34;&gt;formatKey&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String generatedKey)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;/cloud/lock/&amp;quot;&lt;/span&gt; + generatedKey;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; LockEntity &lt;span class=&#34;title function_&#34;&gt;doLock&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Set&amp;lt;String&amp;gt; lockKeys, Long timeout, TimeUnit unit)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;InterProcessMultiLock&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;multiLock&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;InterProcessMultiLock&lt;/span&gt;(zkClient, lockKeys.stream().toList());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (timeout != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; timeout &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; unit != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            multiLock.acquire(timeout, unit);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            multiLock.acquire();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LockEntity&lt;/span&gt;(multiLock);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同 Redisson 类似，在 ZkLock 处创建切面，先根据注解解析对应参数的锁 key 后，再获取锁，然后执行方法并释放锁。&lt;/p&gt;
&lt;h2 id=&#34;完整代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#完整代码&#34;&gt;#&lt;/a&gt; 完整代码&lt;/h2&gt;
&lt;p&gt;以下按照包结构排列&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;lock&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;annotation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RedisLock&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Target(&amp;#123;ElementType.METHOD&amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;meta&#34;&gt;@interface&lt;/span&gt; RedisLock &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    TimeUnit &lt;span class=&#34;title function_&#34;&gt;unit&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt; TimeUnit.SECONDS;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SyncArg&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Target(&amp;#123;ElementType.PARAMETER&amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;meta&#34;&gt;@interface&lt;/span&gt; SyncArg &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; 加锁依据，填入Spel表达式，用于生成锁key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 应该确保每一个加锁对象能够生成一个固定的且独立的key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 使用时可用上下文包括 arg：当前参数，method：当前运行的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    String &lt;span class=&#34;title function_&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;#arg.hashCode()&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; 是否采用多对象解析方式，多对象时将产生多个锁并同步加锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 当传入对象实现了 Iterable时，将遍历每一个子项，并且生成key时arg为当前遍历到的对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 当传入对象实现了Map时，将遍历每个Entry，生成key时arg为当前Entry&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;isMulti&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ZkLock&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Target(&amp;#123;ElementType.METHOD&amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;meta&#34;&gt;@interface&lt;/span&gt; ZkLock &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    TimeUnit &lt;span class=&#34;title function_&#34;&gt;unit&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt; TimeUnit.SECONDS;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;config&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RedissonLockConfig&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RedissonLockConfig&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Value(&amp;quot;$&amp;#123;cloud.lock.redis.url:redis://localhost:6379&amp;#125;&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; String redisUrl;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Value(&amp;quot;$&amp;#123;cloud.lock.redis.password:&amp;#125;&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; String redisPassword;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; RedissonClient &lt;span class=&#34;title function_&#34;&gt;redissonClient&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;config&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Config&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;SingleServerConfig&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;singleServerConfig&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; config.useSingleServer();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        singleServerConfig.setAddress(redisUrl);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (StringUtils.isNotEmpty(redisPassword)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            singleServerConfig.setPassword(redisPassword);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; Redisson.create(config);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ZooKeeperLockConfig&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ZooKeeperLockConfig&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Value(&amp;quot;$&amp;#123;cloud.lock.zookeeper.url:localhost:2181&amp;#125;&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; String url;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Value(&amp;quot;$&amp;#123;cloud.lock.zookeeper.timeout:1000&amp;#125;&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; timeout;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Value(&amp;quot;$&amp;#123;cloud.lock.zookeeper.retry:3&amp;#125;&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; retry;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CuratorFramework &lt;span class=&#34;title function_&#34;&gt;zkClient&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;ExponentialBackoffRetry&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;exponentialBackoffRetry&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ExponentialBackoffRetry&lt;/span&gt;(timeout, retry);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;CuratorFramework&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;curatorFramework&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; CuratorFrameworkFactory.newClient(url, exponentialBackoffRetry);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        curatorFramework.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; curatorFramework;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AbstractLockService&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AbstractLockService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 格式化生成的key，在生成加锁key时会经过该方法，并以返回的key作为最终加锁时的key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; generatedKey 通过上下文对象自动生成的key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; 格式化后的key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; String &lt;span class=&#34;title function_&#34;&gt;formatKey&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String generatedKey)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 通过LockContext的形式生成锁key再加锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; lockContexts 用于生成锁key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; timeout      锁超时时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; unit         时间单位&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; 锁对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; LockEntity &lt;span class=&#34;title function_&#34;&gt;doLockByContext&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(List&amp;lt;LockContext&amp;gt; lockContexts, Long timeout, TimeUnit unit)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; doLock(getLockKeys(lockContexts), timeout, unit);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; LockEntity &lt;span class=&#34;title function_&#34;&gt;doLock&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Set&amp;lt;String&amp;gt; keys)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; doLock(keys, &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 通过锁keys进行加锁，由子类实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; keys    锁key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; timeout 超时时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; unit    时间单位&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; 锁对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; LockEntity &lt;span class=&#34;title function_&#34;&gt;doLock&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Set&amp;lt;String&amp;gt; keys, Long timeout, TimeUnit unit)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 根据方法及入参解析出LockContext列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; method 加锁的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; args   入参&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; LockContext列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; List&amp;lt;LockContext&amp;gt; &lt;span class=&#34;title function_&#34;&gt;getLockContexts&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Method method, Object[] args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Annotation[][] parameterAnnotations = method.getParameterAnnotations();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ArrayList&amp;lt;LockContext&amp;gt; lockContexts = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; parameterAnnotations.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;//获取参数注解，与参数一一对应&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Annotation[] annotations = parameterAnnotations[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;//找到@SyncArg注解&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;SyncArg&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;syncArg&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (Annotation annotation : annotations) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (annotation &lt;span class=&#34;keyword&#34;&gt;instanceof&lt;/span&gt; SyncArg syncArgA) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    syncArg = syncArgA;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (syncArg != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;//注解存在则通过注解构造上下文对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;type&#34;&gt;LockContext&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;lockContext&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LockContext&lt;/span&gt;(syncArg, args[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                lockContext.addParam(&lt;span class=&#34;string&#34;&gt;&amp;quot;method&amp;quot;&lt;/span&gt;, method);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                lockContexts.add(lockContext);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; lockContexts;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 通过上下文对象列表生成key集合&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; lockContexts 上下文对象列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; key集合&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; HashSet&amp;lt;String&amp;gt; &lt;span class=&#34;title function_&#34;&gt;getLockKeys&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(List&amp;lt;LockContext&amp;gt; lockContexts)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//解析上下文列表，生成key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        HashSet&amp;lt;String&amp;gt; keys = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;HashSet&lt;/span&gt;&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;SpelExpressionParser&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;parser&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SpelExpressionParser&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (LockContext lockContext : lockContexts) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;multi&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; lockContext.isMulti();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;arg&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; lockContext.getArg();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;keyExpression&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; lockContext.getKeyExpression();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (multi &amp;amp;&amp;amp; arg &lt;span class=&#34;keyword&#34;&gt;instanceof&lt;/span&gt; Iterable&amp;lt;?&amp;gt; iterable) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;//多对象模式且参数对象为Iterable时&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (Object o : iterable) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;type&#34;&gt;LockContext&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;singleContext&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LockContext&lt;/span&gt;(o, keyExpression, &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;, lockContext.getParams());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    keys.add(formatKey(singleContext.getKey(parser)));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (multi &amp;amp;&amp;amp; arg &lt;span class=&#34;keyword&#34;&gt;instanceof&lt;/span&gt; Map&amp;lt;?, ?&amp;gt; map) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;//多对象模式且参数对象为map时&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (Map.Entry&amp;lt;?, ?&amp;gt; entry : map.entrySet()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;type&#34;&gt;LockContext&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;singleContext&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LockContext&lt;/span&gt;(entry, keyExpression, &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;, lockContext.getParams());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    keys.add(formatKey(singleContext.getKey(parser)));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                keys.add(formatKey(lockContext.getKey(parser)));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; keys;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LockContext&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Getter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Setter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LockContext&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 被加锁的参数对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Object arg;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 生成key的Spel表达式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; String keyExpression;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 是否为多对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; multi;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 上下文参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Getter(AccessLevel.PACKAGE)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; params;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;LockContext&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(SyncArg syncArg, Object arg)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;(arg, syncArg.value(), syncArg.isMulti());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;LockContext&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object arg, String keyExpression, &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; multi)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;(arg, keyExpression, multi, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;LockContext&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object arg, String keyExpression, &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; multi, Map&amp;lt;String, Object&amp;gt; params)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.arg = arg;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.keyExpression = keyExpression;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.multi = multi;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.params = params;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 添加上下文参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; key   key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; value value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; 用于链式调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; LockContext &lt;span class=&#34;title function_&#34;&gt;addParam&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String key, Object value)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        params.put(key, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 删除上下文参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; key key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; 用于链式调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; LockContext &lt;span class=&#34;title function_&#34;&gt;removeParam&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String key)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        params.remove(key);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title function_&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; getKey(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SpelExpressionParser&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 生成key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; parser Spel表达式解析器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title function_&#34;&gt;getKey&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(SpelExpressionParser parser)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;StandardEvaluationContext&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;context&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;StandardEvaluationContext&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        HashMap&amp;lt;String, Object&amp;gt; contextMap = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;(params);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!contextMap.containsKey(&lt;span class=&#34;string&#34;&gt;&amp;quot;arg&amp;quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            contextMap.put(&lt;span class=&#34;string&#34;&gt;&amp;quot;arg&amp;quot;&lt;/span&gt;, arg);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        context.setVariables(contextMap);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; parser.parseExpression(keyExpression).getValue(String.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LockEntity&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LockEntity&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; Object lock;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    LockEntity(Object lock) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.lock = lock;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;unlock&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (lock &lt;span class=&#34;keyword&#34;&gt;instanceof&lt;/span&gt; RLock rLock) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            rLock.unlock();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (lock &lt;span class=&#34;keyword&#34;&gt;instanceof&lt;/span&gt; InterProcessLock interProcessLock) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            interProcessLock.release();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RedissonLockService&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Slf4j&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Aspect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RedissonLockService&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AbstractLockService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; RedissonClient redissonClient;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;RedissonLockService&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(RedissonClient redissonClient)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.redissonClient = redissonClient;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Pointcut(&amp;quot;@annotation(org.joker.commons.cloud.lock.annotation.RedisLock)&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;doLockByContext&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Around(&amp;quot;doLockByContext()&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Object &lt;span class=&#34;title function_&#34;&gt;around&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ProceedingJoinPoint point)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Throwable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//获取方法对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;MethodSignature&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;signature&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (MethodSignature) point.getSignature();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; signature.getMethod();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//解析用于生成锁的上下文&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        List&amp;lt;LockContext&amp;gt; lockContexts = getLockContexts(method, point.getArgs());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//加锁并执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;RedisLock&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;lock&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; method.getAnnotation(RedisLock.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;LockEntity&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;lockEntity&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; doLockByContext(lockContexts, lock.timeout(), lock.unit());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; point.proceed();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            lockEntity.unlock();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title function_&#34;&gt;formatKey&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String generatedKey)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;cloud:lock:&amp;quot;&lt;/span&gt; + generatedKey;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; LockEntity &lt;span class=&#34;title function_&#34;&gt;doLock&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Set&amp;lt;String&amp;gt; keys, Long timeout, TimeUnit unit)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ArrayList&amp;lt;RLock&amp;gt; rLocks = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;(keys.size());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (String key : keys) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            rLocks.add(redissonClient.getLock(key));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;RLock&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;multiLock&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; redissonClient.getMultiLock(rLocks.toArray(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RLock&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (timeout != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; timeout &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; unit != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            multiLock.lock(timeout, unit);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            multiLock.lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LockEntity&lt;/span&gt;(multiLock);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ZooKeeper&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Slf4j&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Aspect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ZooKeeperLockService&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AbstractLockService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; CuratorFramework zkClient;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;ZooKeeperLockService&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CuratorFramework zkClient)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.zkClient = zkClient;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Pointcut(&amp;quot;@annotation(org.joker.commons.cloud.lock.annotation.ZkLock)&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;doLockByContext&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Around(&amp;quot;doLockByContext()&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Object &lt;span class=&#34;title function_&#34;&gt;around&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ProceedingJoinPoint point)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Throwable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//获取方法对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;MethodSignature&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;signature&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (MethodSignature) point.getSignature();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; signature.getMethod();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//解析用于生成锁的上下文&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        List&amp;lt;LockContext&amp;gt; lockContexts = getLockContexts(method, point.getArgs());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//加锁并执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;ZkLock&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;zkLock&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; method.getAnnotation(ZkLock.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;LockEntity&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;lockEntity&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; doLockByContext(lockContexts, zkLock.timeout(), zkLock.unit());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; point.proceed();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            lockEntity.unlock();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title function_&#34;&gt;formatKey&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String generatedKey)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;/cloud/lock/&amp;quot;&lt;/span&gt; + generatedKey;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; LockEntity &lt;span class=&#34;title function_&#34;&gt;doLock&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Set&amp;lt;String&amp;gt; lockKeys, Long timeout, TimeUnit unit)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;InterProcessMultiLock&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;multiLock&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;InterProcessMultiLock&lt;/span&gt;(zkClient, lockKeys.stream().toList());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (timeout != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; timeout &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; unit != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            multiLock.acquire(timeout, unit);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            multiLock.acquire();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LockEntity&lt;/span&gt;(multiLock);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;测试效果&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#测试效果&#34;&gt;#&lt;/a&gt; 测试效果&lt;/h2&gt;
&lt;p&gt;采用如下 Spring 服务类进行效果测试，其中 run 中为测试代码，表达式 “#arg.getClass ().getSimpleName ()+#arg.getId ()&lt;br&gt;
” 以 id 作为唯一主键生成 key，当前示例下生成的 key 为 Usertest01。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Slf4j&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Service&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Getter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Setter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;User&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;test01&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;测试用户&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(User user)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; InterruptedException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.info(user.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Thread.sleep(&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;);&lt;span class=&#34;comment&#34;&gt;//模拟业务过程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@RedisLock&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;testRedisSync&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;            &lt;span class=&#34;meta&#34;&gt;@SyncArg(&amp;quot;#arg.getClass().getSimpleName()+#arg.getId()&amp;quot;)&lt;/span&gt; User user&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    )&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; InterruptedException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        test(user);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@ZkLock&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;testZooKeeperSync&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;            &lt;span class=&#34;meta&#34;&gt;@SyncArg(&amp;quot;#arg.getClass().getSimpleName()+#arg.getId()&amp;quot;)&lt;/span&gt; User user&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    )&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; InterruptedException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        test(user);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;不加锁&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#不加锁&#34;&gt;#&lt;/a&gt; 不加锁&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Service&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestRunner&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CommandLineRunner&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Resource&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; TestService testService;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String... args)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        TestService.&lt;span class=&#34;type&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestService&lt;/span&gt;.User();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            testService.test(user);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;服务一：&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/10/%E3%80%90%E5%88%86%E5%B8%83%E5%BC%8F%E3%80%91%E9%80%9A%E8%BF%87Zookeeper%E4%B8%8ERedisson%E5%AE%9E%E7%8E%B0Spring%E6%B3%A8%E8%A7%A3%E5%BC%8F%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/378a9d360acf6a6c560d3c2e9f68be60.png&#34; class=&#34;&#34; title=&#34;不加锁服务1log&#34;&gt;
&lt;p&gt;服务二：&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/10/%E3%80%90%E5%88%86%E5%B8%83%E5%BC%8F%E3%80%91%E9%80%9A%E8%BF%87Zookeeper%E4%B8%8ERedisson%E5%AE%9E%E7%8E%B0Spring%E6%B3%A8%E8%A7%A3%E5%BC%8F%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/248294a19780cc9e924184e26670a0c3.png&#34; class=&#34;&#34; title=&#34;不加锁服务2log&#34;&gt;
&lt;p&gt;根据时间可以看到两个服务几乎同时在进行，如果存在变更数据的情况则可能存在出现数据不一致情况的风险。&lt;/p&gt;
&lt;h3 id=&#34;使用redis锁&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用redis锁&#34;&gt;#&lt;/a&gt; 使用 Redis 锁&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Service&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestRunner&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CommandLineRunner&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Resource&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; TestService testService;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String... args)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        TestService.&lt;span class=&#34;type&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestService&lt;/span&gt;.User();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            testService.testRedisSync(user);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;服务一：&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/10/%E3%80%90%E5%88%86%E5%B8%83%E5%BC%8F%E3%80%91%E9%80%9A%E8%BF%87Zookeeper%E4%B8%8ERedisson%E5%AE%9E%E7%8E%B0Spring%E6%B3%A8%E8%A7%A3%E5%BC%8F%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/4507c4421a934baec554f92cea7b0038.png&#34; class=&#34;&#34; title=&#34;Redis锁服务1log&#34;&gt;
&lt;p&gt;服务二：&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/10/%E3%80%90%E5%88%86%E5%B8%83%E5%BC%8F%E3%80%91%E9%80%9A%E8%BF%87Zookeeper%E4%B8%8ERedisson%E5%AE%9E%E7%8E%B0Spring%E6%B3%A8%E8%A7%A3%E5%BC%8F%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/9158b26eab49184d53d500eb7c0e07b6.png&#34; class=&#34;&#34; title=&#34;Redis锁服务2log&#34;&gt;
&lt;p&gt;根据时间可以看到两个服务在逐一有序地进行，能够实现锁的效果。&lt;/p&gt;
&lt;h3 id=&#34;使用zookeeper锁&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用zookeeper锁&#34;&gt;#&lt;/a&gt; 使用 ZooKeeper 锁&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Service&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestRunner&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CommandLineRunner&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Resource&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; TestService testService;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String... args)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        TestService.&lt;span class=&#34;type&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestService&lt;/span&gt;.User();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            testService.testZooKeeperSync(user);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;服务一：&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/10/%E3%80%90%E5%88%86%E5%B8%83%E5%BC%8F%E3%80%91%E9%80%9A%E8%BF%87Zookeeper%E4%B8%8ERedisson%E5%AE%9E%E7%8E%B0Spring%E6%B3%A8%E8%A7%A3%E5%BC%8F%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/7ed3a36d886af2366487ddf9e679c224.png&#34; class=&#34;&#34; title=&#34;ZooKeeper服务1log&#34;&gt;
&lt;p&gt;服务二：&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/10/%E3%80%90%E5%88%86%E5%B8%83%E5%BC%8F%E3%80%91%E9%80%9A%E8%BF%87Zookeeper%E4%B8%8ERedisson%E5%AE%9E%E7%8E%B0Spring%E6%B3%A8%E8%A7%A3%E5%BC%8F%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/b00b26556a04f89fc3e1224726755a96.png&#34; class=&#34;&#34; title=&#34;ZooKeeper服务2log&#34;&gt;
&lt;p&gt;同样能够实现锁的效果。&lt;/p&gt;
</content>
        <category term="后端" />
        <category term="Redis" />
        <category term="Zookeeper" />
        <category term="Redisson" />
        <category term="分布式锁" />
        <updated>2024-09-10T02:00:01.000Z</updated>
    </entry>
    <entry>
        <id>https://silvercrow42.github.io/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91SpringBoot%E6%95%B4%E5%90%88%E4%B8%8E%E4%BD%BF%E7%94%A8RocketMQ/</id>
        <title>【RocketMQ】SpringBoot整合与使用RocketMQ（Windows）</title>
        <link rel="alternate" href="https://silvercrow42.github.io/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91SpringBoot%E6%95%B4%E5%90%88%E4%B8%8E%E4%BD%BF%E7%94%A8RocketMQ/"/>
        <content type="html">&lt;p&gt;由于是开发相关的文档，因此默认读者已经具备有 IDE，编者使用的是 IDEA 2022.1.3 以该版本作为演示基础。&lt;/p&gt;
&lt;h1 id=&#34;spring引入rocketmq&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring引入rocketmq&#34;&gt;#&lt;/a&gt; Spring 引入 RocketMQ&lt;/h1&gt;
&lt;p&gt;在适配 Spring 生态方面，RocketMQ 由于本身就是 Java 语言开发并且开源，拥有 Spring 开发基础就能够参照源码进行调试，并且其本身也提供了可直接用于 SpringBoot 整合的父项目，pom.xml 中通过如下配置即可引入该父项目。&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.rocketmq&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;rocketmq-spring-boot-starter&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;学习springrocketmq范例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#学习springrocketmq范例&#34;&gt;#&lt;/a&gt; 学习 SpringRocketMQ 范例&lt;/h1&gt;
&lt;p&gt;RocketMQ 对于 Spring 拥有良好的适配，并且拥有对应的参考项目，接下来我们借助该项目了解一下 RocketMQ 的架构及用法。&lt;/p&gt;
&lt;h2 id=&#34;基本概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基本概念&#34;&gt;#&lt;/a&gt; 基本概念&lt;/h2&gt;
&lt;p&gt;首先，为了方便理解，我们需要了解一下 RocketMQ 中的一些基本概念、运行逻辑与名词，方便后续理解掌握。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该章节整理自文章&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9hcnRpY2xlLzc4MDk2OA==&#34;&gt; RocketMQ 简介 - 阿里云开发者社区 (aliyun.com) &lt;/span&gt;原文更加详细，可通过链接了解详情。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;专有名词&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#专有名词&#34;&gt;#&lt;/a&gt; 专有名词&lt;/h3&gt;
&lt;h4 id=&#34;基本&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基本&#34;&gt;#&lt;/a&gt; 基本&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NameServer&lt;/strong&gt;：注册中心，相当于 ZooKeeper，不过 RocketMQ 进行了另外的实现，比较轻便。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Broker&lt;/strong&gt;：消息的管理中心，其负责管理 Topic 与保存传入的消息，并且会将自己注册到 NameServer 中供其调度，其由 RocketMQ 实现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Producer&lt;/strong&gt;：也称为消息发布者，负责产生消息，需要我们自行产生消息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consumer&lt;/strong&gt;：也称为消息订阅者，负责接收消息并处理消息，需要我们自行处理消息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;消息属性相关&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消息属性相关&#34;&gt;#&lt;/a&gt; 消息属性相关&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Topic&lt;/strong&gt;：消息主题，一级消息类型，生产者向其发送消息，消费者从中取出消息进行消费。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Message&lt;/strong&gt;：生产者向 Topic 发送并最终传送给消费者的数据消息体。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Message ID&lt;/strong&gt;：消息的全局唯一标识，由消息队列 RocketMQ 系统自动生成，唯一标识某条消息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Message Key&lt;/strong&gt;：消息的业务标识，由消息生产者（Producer）自行设置，可作为标识符使用标识一类业务逻辑，也可不提供。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tag&lt;/strong&gt;：消息标签，二级消息类型，由消息生产者（Producer）自行设置，用来进一步区分某个 Topic 下的消息&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;运行逻辑相关&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#运行逻辑相关&#34;&gt;#&lt;/a&gt; 运行逻辑相关&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;分区&lt;/strong&gt;：即 Topic Partition，物理上的概念。每个 Topic 包含一个或多个分区，由 RocketMQ 实现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;消费位点&lt;/strong&gt;：每个 Topic 会有多个分区，每个分区会统计当前消息的总条数，这个称为最大位点 MaxOffset；分区的起始位置对应的位置叫做起始位点 MinOffset。&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;Group&#34;&gt;&lt;strong&gt;Group&lt;/strong&gt;&lt;/a&gt;：对生产者或消费者进行分组，同一组的生产者或消费者通常仅生产或消费同一类消息，且消息发布或订阅的逻辑一致，因此通常需要保证同组中的生产者与生产者之间或者消费者与消费者之间业务逻辑一致。在&lt;a href=&#34;#%E9%9B%86%E7%BE%A4%E6%B6%88%E8%B4%B9&#34;&gt; 集群消费 &lt;/a&gt;模式下，该设计方式能够方便地对于生产者与消费者进行拓展。比如当某组中任务负载较大时，给组中额外增加多个生产者与消费者来分担该组的任务，降低负载。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Group ID&lt;/strong&gt;：Group 的唯一标识，用于定位 Group，可以自行定制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;队列&lt;/strong&gt;：一个 Topic 下会由一到多个队列来存储消息，其由 RocketMQ 实现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exactly-Once 投递语义&lt;/strong&gt;：Exactly-Once 投递语义是指发送到消息系统的消息只能被 Consumer 处理且仅处理一次，即使 Producer 重试消息发送导致某消息重复投递，该消息在 Consumer 也只被消费一次。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;消息收发相关&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消息收发相关&#34;&gt;#&lt;/a&gt; 消息收发相关&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span id=&#34;集群消费&#34;&gt;&lt;strong&gt;集群消费&lt;/strong&gt;&lt;/span&gt;：一个 Group ID 所标识的所有 Consumer 平均分摊消费消息。例如某个 Topic 有 9 条消息，一个 Group ID 有 3 个 Consumer 实例，那么在集群消费模式下每个实例平均分摊，只消费其中的 3 条消息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;广播消费&lt;/strong&gt;：一个 Group ID 所标识的所有 Consumer 都会各自消费某条消息一次。例如某个 Topic 有 9 条消息，一个 Group ID 有 3 个 Consumer 实例，那么在广播消费模式下每个实例都会各自消费 9 条消息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定时消息&lt;/strong&gt;：Producer 将消息发送到消息队列 RocketMQ 服务端，但并不期望这条消息立马投递，而是推迟到在当前时间点之后的某一个时间投递到 Consumer 进行消费，该消息即定时消息。&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;延时消息&#34;&gt;&lt;strong&gt;延时消息&lt;/strong&gt;&lt;/a&gt;：Producer 将消息发送到消息队列 RocketMQ 服务端，但并不期望这条消息立马投递，而是延迟一定时间后才投递到 Consumer 进行消费，该消息即延时消息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事务消息&lt;/strong&gt;：RocketMQ 提供类似 X/Open XA 的分布事务功能，通过消息队列 RocketMQ 的事务消息能达到分布式事务的最终一致。&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;顺序消息&#34;&gt;&lt;strong&gt;顺序消息&lt;/strong&gt;&lt;/a&gt;：RocketMQ 提供的一种按照顺序进行发布和消费的消息类型，分为全局顺序消息和分区顺序消息。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;全局顺序消息&lt;/strong&gt;：对于指定的一个 Topic，所有消息按照严格的先入先出（FIFO）的顺序进行发布和消费。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分区顺序消息&lt;/strong&gt;：对于指定的一个 Topic，所有消息根据 Sharding Key 进行区块分区。同一个分区内的消息按照严格的 FIFO 顺序进行发布和消费。Sharding Key 是顺序消息中用来区分不同分区的关键字段，和普通消息的 Message Key 是完全不同的概念。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;概念相关&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#概念相关&#34;&gt;#&lt;/a&gt; 概念相关&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;消息堆积&lt;/strong&gt;：Producer 已经将消息发送到消息队列 RocketMQ 的服务端，但由于 Consumer 消费能力有限，未能在短时间内将所有消息正确消费掉，此时在消息队列 RocketMQ 的服务端保存着未被消费的消息，该状态即消息堆积。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;消息过滤&lt;/strong&gt;：Consumer 可以根据消息标签（Tag）对消息进行过滤，确保 Consumer 最终只接收被过滤后的消息类型。消息过滤在消息队列 RocketMQ 的服务端完成。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;消息轨迹&lt;/strong&gt;：在一条消息从 Producer 发出到 Consumer 消费处理过程中，由各个相关节点的时间、地点等数据汇聚而成的完整链路信息。通过消息轨迹，您能清晰定位消息从 Producer 发出，经由消息队列 RocketMQ 服务端，投递给 Consumer 的完整链路，方便定位排查问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重置消费位点&lt;/strong&gt;：以时间轴为坐标，在消息持久化存储的时间范围内（默认 3 天），重新设置 Consumer 对已订阅的 Topic 的消费进度，设置完成后 Consumer 将接收设定时间点之后由 Producer 发送到消息队列 RocketMQ 服务端的消息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;死信队列&lt;/strong&gt;：死信队列用于处理无法被正常消费的消息。当一条消息初次消费失败，消息队列 RocketMQ 会自动进行消息重试；达到最大重试次数后，若消费依然失败，则表明 Consumer 在正常情况下无法正确地消费该消息。此时，消息队列 RocketMQ 不会立刻将消息丢弃，而是将这条消息发送到该 Consumer 对应的特殊队列中。&lt;br&gt;
消息队列 RocketMQ 将这种正常情况下无法被消费的消息称为死信消息（Dead-Letter Message），将存储死信消息的特殊队列称为死信队列（Dead-Letter Queue）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;消息流转模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消息流转模型&#34;&gt;#&lt;/a&gt; 消息流转模型&lt;/h3&gt;
&lt;p&gt;消息队列 RocketMQ 支持发布和订阅模型，消息生产者应用创建 Topic 并将消息发送到 Topic。消费者应用创建对 Topic 的订阅以便从其接收消息。通信可以是一对多（扇出）、多对一（扇入）和多对多。具体通信如下图所示。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91SpringBoot%E6%95%B4%E5%90%88%E4%B8%8E%E4%BD%BF%E7%94%A8RocketMQ/8c2f59ab52f03f20d7a859e7c8bb82b4.png&#34; class=&#34;&#34; title=&#34;消息流转模型&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;生产者集群&lt;/strong&gt;：用来表示发送消息应用，一个生产者集群下包含多个生产者实例，可以是多台机器，也可以是一台机器的多个进程，或者一个进程的多个生产者对象。&lt;br&gt;
一个生产者集群可以发送多个 Topic 消息。发送分布式事务消息时，如果生产者中途意外宕机，消息队列 RocketMQ 服务端会主动回调生产者集群的任意一台机器来确认事务状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;消费者集群&lt;/strong&gt;：用来表示消费消息应用，一个消费者集群下包含多个消费者实例，可以是多台机器，也可以是多个进程，或者是一个进程的多个消费者对象。&lt;br&gt;
一个消费者集群下的多个消费者以均摊方式消费消息。如果设置的是广播方式，那么这个消费者集群下的每个实例都消费全量数据。&lt;br&gt;
一个消费者集群对应一个 Group ID，一个 Group ID 可以订阅多个 Topic，如上图中的 Group 2 所示。Group 和 Topic 的订阅关系可以通过直接在程序中设置即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;获取范例项目&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取范例项目&#34;&gt;#&lt;/a&gt; 获取范例项目&lt;/h2&gt;
&lt;p&gt;在安装文档中涉及到的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9yb2NrZXRtcS1leHRlcm5hbHM=&#34;&gt; GitHub - apache/rocketmq-externals&lt;/span&gt; 项目 ReadMe 中也提及到了一个关联 Spring 的 RocketMQ 项目。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91SpringBoot%E6%95%B4%E5%90%88%E4%B8%8E%E4%BD%BF%E7%94%A8RocketMQ/3dff3ecbdea41baddb69e24f1b1508d0.png&#34; class=&#34;&#34; title=&#34;拓展项目&#34;&gt;
&lt;p&gt;项目地址如下&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9yb2NrZXRtcS1zcHJpbmc=&#34;&gt; GitHub - apache/rocketmq-spring&lt;/span&gt;。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91SpringBoot%E6%95%B4%E5%90%88%E4%B8%8E%E4%BD%BF%E7%94%A8RocketMQ/7f17ece34decafc3f316002155feaace.png&#34; class=&#34;&#34; title=&#34;拓展项目2&#34;&gt;
&lt;p&gt;在&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9yb2NrZXRtcS1zcHJpbmcvdHJlZS9tYXN0ZXIvcm9ja2V0bXEtc3ByaW5nLWJvb3Qtc2FtcGxlcw==&#34;&gt; rocketmq-spring-boot-samples&lt;/span&gt; 中则是基于 Spring 搭建的 RocketMQ 的范例项目，包含生产者与消费者 demo，可以进行参考学习。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91SpringBoot%E6%95%B4%E5%90%88%E4%B8%8E%E4%BD%BF%E7%94%A8RocketMQ/00ec143cf8ed26fc1976f7b12d66bc0d.png&#34; class=&#34;&#34; title=&#34;拓展项目3&#34;&gt;
&lt;p&gt;由于该项目未依赖父项目，可以单独将其拉下来运行，也可以将该 rocketmq-spring 项目完整拉取下来使用。&lt;/p&gt;
&lt;h3 id=&#34;span-id单独拉取单独拉取span&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#span-id单独拉取单独拉取span&#34;&gt;#&lt;/a&gt; &lt;span id=&#34;单独拉取&#34;&gt;单独拉取&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;项目拉取下来后使用 IDE 打开，IDEA 会自动加载 rocketmq-spring-boot-starter 的依赖，此时可能会出现依赖版本问题。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91SpringBoot%E6%95%B4%E5%90%88%E4%B8%8E%E4%BD%BF%E7%94%A8RocketMQ/1855df2c2cc50f3a51b2be2fbcec82b3.png&#34; class=&#34;&#34; title=&#34;下载样例项目&#34;&gt;
&lt;p&gt;当前版本的 pom，此处给 rocketmq-spring-boot-starter 配置的是 2.2.3 快照版本，但是在 maven 仓库中已经修改 2.2.3 为正式的版本号，rocketmq-spring-boot-starter 源码版本也已经定义为 2.2.4-SNAPSHOT，此处应该是版本升级的疏漏。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91SpringBoot%E6%95%B4%E5%90%88%E4%B8%8E%E4%BD%BF%E7%94%A8RocketMQ/c6b66903f7110483a2f6fbb565e1611f.png&#34; class=&#34;&#34; title=&#34;下载样例项目2&#34;&gt;
&lt;p&gt;对应修改一下版本号即可，修改为 2.2.3 直接重新运行一下 maven 导入。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91SpringBoot%E6%95%B4%E5%90%88%E4%B8%8E%E4%BD%BF%E7%94%A8RocketMQ/829c1285ceee1dc98d4b41a5f7df3182.png&#34; class=&#34;&#34; title=&#34;下载样例项目3&#34;&gt;
&lt;p&gt;子项目均被解析为 maven 项目（项目图标右下角带蓝色小方格即表示已被解析为 maven 项目，且其中的文件结构不再是普通的文件夹结构，而是已包结构排列，并且特定的文件夹具有特定图标，如 java、resources、test 等），并且依赖项不报红，代表项目导入成功。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91SpringBoot%E6%95%B4%E5%90%88%E4%B8%8E%E4%BD%BF%E7%94%A8RocketMQ/cc2e1fedcb6a16cd07d8f3765e39c30a.png&#34; class=&#34;&#34; title=&#34;下载样例项目4&#34;&gt;
&lt;h3 id=&#34;完整拉取&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#完整拉取&#34;&gt;#&lt;/a&gt; 完整拉取&lt;/h3&gt;
&lt;p&gt;项目拉取下来之后使用 IDE 打开，等待其安装依赖项，防止依赖项安装失败，或者找不到依赖项可以使用阿里的 maven 镜像。&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;mirrors&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;mirror&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;alimaven&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;aliyun maven&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;url&lt;/span&gt;&amp;gt;&lt;/span&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;url&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;mirrorOf&lt;/span&gt;&amp;gt;&lt;/span&gt;central&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;mirrorOf&lt;/span&gt;&amp;gt;&lt;/span&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;mirror&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;mirrors&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;项目导入成功。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91SpringBoot%E6%95%B4%E5%90%88%E4%B8%8E%E4%BD%BF%E7%94%A8RocketMQ/33ebac62954c73bc818a6b382c3fa99b.png&#34; class=&#34;&#34; title=&#34;下载样例项目5&#34;&gt;
&lt;p&gt;编者此处 samples 并没有被解析为 maven，是由于在根目录的 pom.xml 中，该模块被默认注释掉了。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91SpringBoot%E6%95%B4%E5%90%88%E4%B8%8E%E4%BD%BF%E7%94%A8RocketMQ/6131a66f3f3e5ef5034e7b983c52b9e4.png&#34; class=&#34;&#34; title=&#34;下载样例项目6&#34;&gt;
&lt;p&gt;将 module 标签处的注释放开然后重新跑 maven 一遍，maven 就会去解析 rocketmq-spring-boot-samples 下的 pom.xml 文件。此时可能会遇到与上文&lt;a href=&#34;#%E5%8D%95%E7%8B%AC%E6%8B%89%E5%8F%96&#34;&gt; 单独拉取 &lt;/a&gt;时相同的情况，进入到 rocketmq-spring-boot-samples 下的 pom 中采用相同方式解决即可。&lt;/p&gt;
&lt;h2 id=&#34;补充说明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#补充说明&#34;&gt;#&lt;/a&gt; 补充说明&lt;/h2&gt;
&lt;p&gt;此处补充一些范例项目中出现的不常见的且不涉及 RocketMQ 逻辑的代码的解析，方便对范例项目进行理解。&lt;/p&gt;
&lt;h3 id=&#34;commandlinerunner&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#commandlinerunner&#34;&gt;#&lt;/a&gt; CommandLineRunner&lt;/h3&gt;
&lt;p&gt;在生产者与消费者项目中都使用了 CommandLineRunner 接口。这里来探究以下该接口的效果。&lt;/p&gt;
&lt;p&gt;在启动 spring 应用时，会使用到如下的基本的 spring 启动代码 &lt;code&gt;SpringApplication.run(ProducerApplication.class, args)&lt;/code&gt; ，进入到该方法中可以看到在经过多个默认的 run 方法后最终调用到了一个 run 方法中。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91SpringBoot%E6%95%B4%E5%90%88%E4%B8%8E%E4%BD%BF%E7%94%A8RocketMQ/2a07379410e7944edce47ae2826160c1.png&#34; class=&#34;&#34; title=&#34;run&#34;&gt;
&lt;p&gt;我们可以看到在该方法中 spring 进行了一系列环境的初始化操作，将 spring 环境运行起来。这部分的逻辑都不重要。&lt;/p&gt;
&lt;p&gt;在 try 代码段的末尾，我们可以看到其调用了一段 &lt;code&gt;callRunners(context, applicationArguments)&lt;/code&gt;  方法，传入了 spring 容器对象以及通过启动参数 args 构造出来的 ApplicationArguments 参数对象。&lt;/p&gt;
&lt;p&gt;进入到该方法中可以看到如下方法体。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91SpringBoot%E6%95%B4%E5%90%88%E4%B8%8E%E4%BD%BF%E7%94%A8RocketMQ/8b8970858a59e8a0e33e6f90dc0713f3.png&#34; class=&#34;&#34; title=&#34;run2&#34;&gt;
&lt;p&gt;可以推出该方法的逻辑是将 ApplicationRunner.class 与 CommandLineRunner.class 构造出来的 Bean 添加到 runners 列表中，排序后依次将运行参数传入然后进行调用。&lt;/p&gt;
&lt;p&gt;简而言之，在启动 Spring 应用后，会在应用装配完毕时，运行 CommandLineRunner 与 ApplicationRunner 中的代码。并且该运行时机是要晚于 InitializingBean 的，能够确保所有 Bean 均已加载完毕。可以用来作为 Spring 应用启动后的初始化数据的方案，因为 bean 已装填完毕，可以正常使用 Spring 的功能。&lt;/p&gt;
&lt;p&gt;需要注意的是此处的代码是影响到 Spring 主线程的，如果出现异常会打断 Spring 应用的启动过程。&lt;/p&gt;
&lt;p&gt;在 demo 中的效果就是，对应的方法仅仅在启动时运行一遍，里面涉及到的就是一些演示代码。&lt;/p&gt;
&lt;h2 id=&#34;理解范例项目&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#理解范例项目&#34;&gt;#&lt;/a&gt; 理解范例项目&lt;/h2&gt;
&lt;h3 id=&#34;生产者producer&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#生产者producer&#34;&gt;#&lt;/a&gt; 生产者（Producer）&lt;/h3&gt;
&lt;h4 id=&#34;extrocketmqtemplateconfiguration&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#extrocketmqtemplateconfiguration&#34;&gt;#&lt;/a&gt; @ExtRocketMQTemplateConfiguration&lt;/h4&gt;
&lt;p&gt;该类是一个注解类，其携带了 Spring 中的 @Component 类，因此被该注解修饰的类会被 Spring 解析为一个 bean 组件，可以直接通过 spring bean 的一些方式来使用。&lt;/p&gt;
&lt;p&gt;很容易就能看出，该注解是用来修饰 RocketMQTemplate 及其拓展类，并且主要修饰发送方，即生产者端的 RocketMQTemplate。该注解能够为 RocketMQTemplate 及其拓展类规定一些默认的运行参数，生产者 demo 中就使用了其中的 nameServer 参数用于指定目标 NameServer 地址，使用了 tlsEnable 用于指定是否开启 tls 加密，使用 instanceName 指定实例名称。&lt;/p&gt;
&lt;h4 id=&#34;rocketmqtemplate&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rocketmqtemplate&#34;&gt;#&lt;/a&gt; RocketMQTemplate&lt;/h4&gt;
&lt;p&gt;在生产者 demo 中，使用了该类中非常多种的发送方法，并且该类大多数方法都是用于生产者发送消息。因此将该类放到生产者部分讲解。需要注意的是对于每一类功能逻辑而言，应该单独拓展一个 RocketMQTemplate 子类，因为&lt;a id=&#34;当使用事务消息时&#34;&gt;当使用事务消息时&lt;/a&gt;，事务监听器是直接与 RocketMQTemplate 类进行绑定的，因此为了防止事务状态紊乱出错，推荐每个功能模块单独拓展一个 RocketMQTemplate 子类，后续会进行详述。因为该类中的方法众多，为了节省篇幅且便于拓展理解，这里对其进行大概的分类解释，便于自行了解这些方法的含义。&lt;/p&gt;
&lt;h5 id=&#34;常见参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常见参数&#34;&gt;#&lt;/a&gt; 常见参数&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;destination：用来定位当前参数需要发送到哪个 Topic，以及携带什么 Tag，标准格式为 &lt;code&gt;topicName:tags&lt;/code&gt; （文档注释中此处为 tags，但是据查生产者是无法为消息指定多个 tag 的）。&lt;br&gt;
例如：“test:tag1”，表示当前消息将会发送到名为 test 的 Topic 中，并且 tag 为 tag1。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;payload：消息载体，可以接收任何类对象，在发送前一般都会经过 MessageBuilder.withPayload (payload) 转化为 Message 对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;message/messages：一般是 Message 类对象，发送动作主要就是通过该类对象来进行，可以通过 MessageBuilder 获得&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;timeout：发送超时时间，单位毫秒，当不指定时一般默认为 3 秒。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;delayLevel：延时级别，该参数不支持任意时间精度，仅支持特定的 level，例如定时 5s,10s,1m 等。其中 level=0 级表示不延时，level=1 表示 1 级延时，level=2 表示 2 级延时，以此类推。&lt;br&gt;
延时级别的配置在 broker 配置（ROCKETMQ 根路径 /conf/broker.conf）中 &lt;code&gt;messageDelayLevel=1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h&lt;/code&gt; 。时间单位支持：s、m、h、d，分别表示秒、分、时、天。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;delayTime：延时时间，可以详细指定延时时间，默认单位为毫秒。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;deliverTimeMills：交付时间，可以详细指定延时时间，默认单位为毫秒。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mode：与 delayTime 或 deliverTimeMills 同时出现，接收 DelayMode 枚举对象。具有三种值，分别是 DELAY_SECONDS，DELAY_MILLISECONDS，DELIVER_TIME_MILLISECONDS。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单独使用 deliverTimeMills 时，mode 默认为 DelayMode.DELIVER_TIME_MILLISECONDS&lt;/li&gt;
&lt;li&gt;单独使用 delayTime 时，默认 mode 为 DELAY_MILLISECONDS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;未查到二者的详细说明可能为新增 api，判断二者区别可能在于延时投递的方式不同。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hashKey：用于为消息进行定位和排序。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;type：一般出现于同步消息时，用于规定返回消息的类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sendCallback/rocketMQLocalRequestCallback：用于异步消息时的回调。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sendCallback：为 SendCallback 对象，其中接收返回值时使用的是 SendResult 对象，内部以 byte 数组保存信息。&lt;/li&gt;
&lt;li&gt;rocketMQLocalRequestCallback：为 RocketMQLocalRequestCallback&amp;lt;T&amp;gt; 对象，返回值可以直接用泛型 T 接收，内部会自动转换成 T。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;同步与异步&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#同步与异步&#34;&gt;#&lt;/a&gt; 同步与异步&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;带 sync 的方法：表示同步方法，调用该方法之后会阻塞当前线程，直达该方法成功完成、超时或抛错。&lt;br&gt;
例如：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;SendResult&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;sendResult&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; rocketMQTemplate.syncSend(springTopic, &lt;span class=&#34;string&#34;&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;syncSend1 to topic %s sendResult=%s %n&amp;quot;&lt;/span&gt;, springTopic, sendResult);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里必须要等到 syncSend 返回了 SendResult 后才会来到下方的 printf。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;带 async 的方法：表示异步方法，其中需要定义对应的回调，即 SendCallback。调用该方法后并不会阻塞当前线程，当该方法处理成功或者失败是则会自行运行 SendCallback 中对应的代码块。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;rocketMQTemplate.asyncSend(orderPaidTopic, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;OrderPaidEvent&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;T_001&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BigDecimal&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;88.00&amp;quot;&lt;/span&gt;)), &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SendCallback&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;onSuccess&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(SendResult var1)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;async onSucess SendResult=%s %n&amp;quot;&lt;/span&gt;, var1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;onException&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Throwable var1)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;async onException Throwable=%s %n&amp;quot;&lt;/span&gt;, var1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里该方法并没有返回值，该 async 方法会启用另外一个线程去发送消息，开始发送后放行主线程，由该线程完成剩下的接收并回调 SendCallback 操作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;发送模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#发送模式&#34;&gt;#&lt;/a&gt; 发送模式&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;send：普通的发送方法，发送一条普通消息并通过 SendResult 接收返回消息，其中的数据形式为序列化后的 byte 数组形式，不可直接使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;convertAndSend：来自 Spring 的默认实现 AbstractMessageSendingTemplate 提供的方法，该方法会调用配置好的 MessageConverter 为消息载体进行转化，转化成 Message 对象后再进行发送，效果上与 send 并无不同。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sendAndReceive：发送并接收远端的响应，同步与异步方式均可用。该可以将远端的响应反序列化成指定类型的对象，同步方式下需要提供 Type 对象来表明返回值类型，而异步方式下则需要提供 &lt;code&gt;RocketMQLocalRequestCallback&amp;lt;T&amp;gt;&lt;/code&gt;  对象用来异步回调，该对象回调时则是通过其所提供的泛型来确定返回值类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;oneWay：发送消息，但是不追踪其返回，也就无法判断是否发送成功，拥有较高的运行性能，但是通过该方式发送可能会出现消息丢失的情况。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;delay：发送延时消息，需要提供一个延时，其他与普通消息一致，基本逻辑同上方对&lt;a href=&#34;#%E5%BB%B6%E6%97%B6%E6%B6%88%E6%81%AF&#34;&gt; 延时消息 &lt;/a&gt;的表述一致。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;orderly：发送顺序消息，需要为消息提供一个 hashKey，用于对消息的排序，其他与普通消息一致，基本逻辑同上方对&lt;a href=&#34;#%E9%A1%BA%E5%BA%8F%E6%B6%88%E6%81%AF&#34;&gt; 顺序消息 &lt;/a&gt;的表述一致。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;发送事务消息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#发送事务消息&#34;&gt;#&lt;/a&gt; 发送事务消息&lt;/h5&gt;
&lt;p&gt;sendMessageInTransaction 用于发送事务消息，在构造消息时，可以通过 &lt;code&gt;setHeader(RocketMQHeaders.TRANSACTION_ID, [事务id])&lt;/code&gt;  的方式向 header 中设置事务 id 用作事务标识，后续也可以从 header 中取出来使用。&lt;/p&gt;
&lt;h6 id=&#34;事务监听器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务监听器&#34;&gt;#&lt;/a&gt; 事务监听器&lt;/h6&gt;
&lt;p&gt;在使用事务前，我们需要为事务实现一个事务监听器，节省篇幅，我们这里使用 demo 中较简单的监听器示例来讲解。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RocketMQTransactionListener(rocketMQTemplateBeanName = &amp;quot;extRocketMQTemplate&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ExtTransactionListenerImpl&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RocketMQLocalTransactionListener&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; RocketMQLocalTransactionState &lt;span class=&#34;title function_&#34;&gt;executeLocalTransaction&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Message msg, Object arg)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;ExtTransactionListenerImpl executeLocalTransaction and return UNKNOWN. \n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; RocketMQLocalTransactionState.UNKNOWN;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; RocketMQLocalTransactionState &lt;span class=&#34;title function_&#34;&gt;checkLocalTransaction&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Message msg)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;ExtTransactionListenerImpl checkLocalTransaction and return COMMIT. \n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; RocketMQLocalTransactionState.COMMIT;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实现事务监听器后，需要通过 @RocketMQTransactionListener 注解将监听器与 rocketMQTemplate 的 bean 进行关联，参数 rocketMQTemplateBeanName 用来确定需要关联的 RocketMQTemplate 的 bean 的名称，其默认值为 rocketMQTemplate。其与 RocketMQTemplate 是一一对应的关系，这也就是为什么上文提到&lt;a href=&#34;#%E5%BD%93%E4%BD%BF%E7%94%A8%E4%BA%8B%E5%8A%A1%E6%B6%88%E6%81%AF%E6%97%B6&#34;&gt;当使用事务消息时&lt;/a&gt;，最好单独拓展一个 rocketMQTemplate。&lt;/p&gt;
&lt;p&gt;并且该监听器也会被注册为 bean，并通过 org.apache.rocketmq.spring.autoconfigure.RocketMQTransactionConfiguration 类中的以下方法将 bean 对象与对应的 rocketMQTemplate 的 bean 对象进行关联。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;afterSingletonsInstantiated&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Map&amp;lt;String, Object&amp;gt; beans = &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.applicationContext.getBeansWithAnnotation(RocketMQTransactionListener.class)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .entrySet().stream().filter(entry -&amp;gt; !ScopedProxyUtils.isScopedTarget(entry.getKey()))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    beans.forEach(&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;::registerTransactionListener);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;registerTransactionListener&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String beanName, Object bean)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Class&amp;lt;?&amp;gt; clazz = AopProxyUtils.ultimateTargetClass(bean);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!RocketMQLocalTransactionListener.class.isAssignableFrom(bean.getClass())) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;IllegalStateException&lt;/span&gt;(clazz + &lt;span class=&#34;string&#34;&gt;&amp;quot; is not instance of &amp;quot;&lt;/span&gt; + RocketMQLocalTransactionListener.class.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;RocketMQTransactionListener&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;annotation&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; clazz.getAnnotation(RocketMQTransactionListener.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;RocketMQTemplate&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;rocketMQTemplate&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (RocketMQTemplate) applicationContext.getBean(annotation.rocketMQTemplateBeanName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (((TransactionMQProducer) rocketMQTemplate.getProducer()).getTransactionListener() != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;IllegalStateException&lt;/span&gt;(annotation.rocketMQTemplateBeanName() + &lt;span class=&#34;string&#34;&gt;&amp;quot; already exists RocketMQLocalTransactionListener&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ((TransactionMQProducer) rocketMQTemplate.getProducer()).setExecutorService(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ThreadPoolExecutor&lt;/span&gt;(annotation.corePoolSize(), annotation.maximumPoolSize(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                                                                                       annotation.keepAliveTime(), annotation.keepAliveTimeUnit(), &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LinkedBlockingDeque&lt;/span&gt;&amp;lt;&amp;gt;(annotation.blockingQueueSize())));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ((TransactionMQProducer) rocketMQTemplate.getProducer()).setTransactionListener(RocketMQUtil.convert((RocketMQLocalTransactionListener) bean));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    log.debug(&lt;span class=&#34;string&#34;&gt;&amp;quot;RocketMQLocalTransactionListener &amp;#123;&amp;#125; register to &amp;#123;&amp;#125; success&amp;quot;&lt;/span&gt;, clazz.getName(), annotation.rocketMQTemplateBeanName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也就是说最终事务中使用到的监听器，是注入到 spring 容器中的监听器 bean，并不是新创建的，设计上需要注意。&lt;/p&gt;
&lt;h6 id=&#34;监听器的用处&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#监听器的用处&#34;&gt;#&lt;/a&gt; 监听器的用处&lt;/h6&gt;
&lt;p&gt;在事务监听器中包含两个方法，分别是&lt;a id=&#34;executeLocalTransaction&#34;&gt; &lt;code&gt;executeLocalTransaction&lt;/code&gt; &lt;/a&gt;和&lt;a id=&#34;checkLocalTransaction&#34;&gt; &lt;code&gt;checkLocalTransaction&lt;/code&gt; &lt;/a&gt;。，从事务的运行逻辑顺序入手，来探究一下这些方法的作用。以下给出事务的运行逻辑。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图片引用自文章&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzaDIwNTAvYXJ0aWNsZS9kZXRhaWxzLzEyNDUxNzM1NQ==&#34;&gt; RocketMQ 事务消息机制_rocketmqtransactionlistener&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91SpringBoot%E6%95%B4%E5%90%88%E4%B8%8E%E4%BD%BF%E7%94%A8RocketMQ/c2eb61b0adcdc503d4314ecc070e2f25.png&#34; class=&#34;&#34; title=&#34;引用图片&#34;&gt;
&lt;ol&gt;
&lt;li&gt;在调用 Transaction 相关方法后，会先将消息发送出去，此时采用的是同步方式，即当前线程会被阻塞，直到获取到远端返回过来的发送结果。此时来到远端 broker 中的事务消息并不是一个可用消息，而是一个半消息，是无法被消费者消费的 **（此处对应图中第 1 步）**。&lt;/li&gt;
&lt;li&gt;根据发送结果的状态来进行，最终会提供一个 LocalTransactionState 来作为最终事务处理的依据：
&lt;ol&gt;
&lt;li&gt;当状态为 SEND_OK 时 **（此处对应图中第 2 步）&lt;strong&gt;，就会来到&lt;a href=&#34;#executeLocalTransaction&#34;&gt; executeLocalTransaction&lt;/a&gt; 方法将此前发送的消息传入作为参数传入，由其进行本地事务的后续处理，然后提供一个事务状态 RocketMQLocalTransactionState 枚举。其中包含三种值并最终与 LocalTransactionState 相对应&lt;/strong&gt;（此处对应图中第 3 步）**。
&lt;ul&gt;
&lt;li&gt;COMMIT 对应 LocalTransactionState 的&lt;a href=&#34;#%E6%8F%90%E4%BA%A4&#34;&gt;提交&lt;/a&gt;态&lt;/li&gt;
&lt;li&gt;ROLLBACK 对应 LocalTransactionState 的&lt;a href=&#34;#%E5%9B%9E%E6%BB%9A&#34;&gt;回滚&lt;/a&gt;态&lt;/li&gt;
&lt;li&gt;UNKNOWN 对应 LocalTransactionState 的&lt;a href=&#34;#%E6%9C%AA%E7%9F%A5&#34;&gt;未知&lt;/a&gt;态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当状态为 FLUSH_DISK_TIMEOUT，FLUSH_SLAVE_TIMEOUT 或者 SLAVE_NOT_AVAILABLE 时，LocalTransactionState 将被置为&lt;a href=&#34;#%E5%9B%9E%E6%BB%9A&#34;&gt;回滚&lt;/a&gt;态。&lt;/li&gt;
&lt;li&gt;其他情况下，状态默认为&lt;a href=&#34;#%E6%9C%AA%E7%9F%A5&#34;&gt;未知&lt;/a&gt;态。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;最后根据 LocalTransactionState 来对事务进行处理：
&lt;ul&gt;
&lt;li&gt;&lt;a id=&#34;提交&#34;&gt;提交&lt;/a&gt;，告知 Broker 将当前事务消息置为可用，可以提供给消费者消费 **（此处对应图中第 4 步 Commit）**。&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;回滚&#34;&gt;回滚&lt;/a&gt;，告知 Broker 回滚当前事务，删除对应的事务消息 **（此处对应图中第 4 步 Rollback）**。&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;未知&#34;&gt;未知&lt;/a&gt;，可能当前事务应故（网络断开，回传消息受阻等）未能获取到消息的发送状态，或者由 executeLocalTransaction 提供了 UNKNOWN 的状态，接下来等待固定的时间后，broker 发起对事务的回查请求回查事务状态 **（此处对应图中第 5 步）&lt;strong&gt;。&lt;br&gt;
消费者此时正常响应后，会进入到事务监听器的&lt;a href=&#34;#checkLocalTransaction&#34;&gt; &lt;code&gt;checkLocalTransaction&lt;/code&gt; &lt;/a&gt; 中来给出一个事务状态，判断事务接下来的处理方式&lt;/strong&gt;（此处对应图中第 6 步）&lt;strong&gt;。最后发送给 broker 进行响应处理&lt;/strong&gt;（此处对应图中第 7 步）**&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可见监听器的主要用处，就是让开发者能够自行决定事务的提交和回滚，自定义实现消息的事务流程。发送事务消息的默认实现来自于 &lt;code&gt;org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl#sendMessageInTransaction&lt;/code&gt;  方法，可以自行跟踪查看。&lt;/p&gt;
&lt;h6 id=&#34;demo理解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#demo理解&#34;&gt;#&lt;/a&gt; demo 理解&lt;/h6&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RocketMQTransactionListener(rocketMQTemplateBeanName = &amp;quot;extRocketMQTemplate&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ExtTransactionListenerImpl&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RocketMQLocalTransactionListener&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; RocketMQLocalTransactionState &lt;span class=&#34;title function_&#34;&gt;executeLocalTransaction&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Message msg, Object arg)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;ExtTransactionListenerImpl executeLocalTransaction and return UNKNOWN. \n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; RocketMQLocalTransactionState.UNKNOWN;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; RocketMQLocalTransactionState &lt;span class=&#34;title function_&#34;&gt;checkLocalTransaction&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Message msg)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;ExtTransactionListenerImpl checkLocalTransaction and return COMMIT. \n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; RocketMQLocalTransactionState.COMMIT;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再看 demo 中的监听器梳理逻辑，就不难看出，该监听器关联名称为 &lt;code&gt;extRocketMQTemplate&lt;/code&gt;  的 bean 组件，当我们通过使用该组件的 &lt;code&gt;sendMessageInTransaction&lt;/code&gt;  方法发送事务消息时。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;消息发送成功后首先进入到 &lt;code&gt;executeLocalTransaction&lt;/code&gt;  方法中，此处返回 UNKNOWN，也就是此时 broker 并不能确定当前事务需要如何处理，因此 broker 仍然将消息置为半消息状态，保存消息但是该消息不能被访问。&lt;/li&gt;
&lt;li&gt;再一段时间后，broker 再次尝试回查事务状态，此时来到 &lt;code&gt;checkLocalTransaction&lt;/code&gt;  方法，此处返回 COMMIT，表示可以提交消息了，于是 broker 将消息置为可用状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;消费者consumer&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消费者consumer&#34;&gt;#&lt;/a&gt; 消费者（Consumer）&lt;/h3&gt;
&lt;p&gt;对于消费者而言，消费消息具有两种模式，一种是 PUSH 模式，即当队列中存在消息，则 RocketMQ 服务端便将该消息 push 给对应消费该消息的消费者，即消费者被动消费消息，一种是 PULL 模式，即消费者通过 PULL 主动从 RocketMQ 服务端中获取未被消费的所有消息进行消费，即消费者主动消费。接下来讲解一下这两种模式的实现。&lt;/p&gt;
&lt;h4 id=&#34;push模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#push模式&#34;&gt;#&lt;/a&gt; PUSH 模式&lt;/h4&gt;
&lt;p&gt;push 模式下比较简单，消费者被动消费消息，只需要实现对应的监听器即可，由 RocketMQ 自行管理推送的逻辑。&lt;/p&gt;
&lt;h5 id=&#34;rocketmqmessagelistener&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rocketmqmessagelistener&#34;&gt;#&lt;/a&gt; @RocketMQMessageListener&lt;/h5&gt;
&lt;p&gt;该类是一个注解类 ，用于添加到消费者监听器上，为该监听器指定一些对应的运行参数。例如&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RocketMQMessageListener(nameServer = &amp;quot;$&amp;#123;demo.rocketmq.myNameServer&amp;#125;&amp;quot;, topic = &amp;quot;$&amp;#123;demo.rocketmq.topic.user&amp;#125;&amp;quot;, consumerGroup = &amp;quot;user_consumer&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里为监听器指定了 NameServer 地址，并且指定了对应订阅的 topic，同时也可以通过 selectorType（默认值为 SelectorType.TAG）与 selectorExpression 为监听器指定对应的 tag 等分类信息，consumerGroup 为消费者指定了对应的&lt;a href=&#34;#Group&#34;&gt;消费者组&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;需要注意的是，该注解并不包含 Component 注解，因此不会将对应的监听器注册为 Spring bean 组件，需要自己另行注册或添加对应注解。&lt;/p&gt;
&lt;h5 id=&#34;rocketmqlistener&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rocketmqlistener&#34;&gt;#&lt;/a&gt; RocketMQListener&lt;/h5&gt;
&lt;p&gt;该类为一个接口，是作为消费者需要实现的监听器接口之一，其接口代码为：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RocketMQListener&lt;/span&gt;&amp;lt;T&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;onMessage&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(T message)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该接口接受一个泛型参数，该泛型参数用于指定接受到的消息类型，当接受到对应的消息时，对应的消息内容会被转换为 T 所指定的类型传入到参数 message 中。&lt;/p&gt;
&lt;p&gt;demo 样例：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RocketMQMessageListener(nameServer = &amp;quot;$&amp;#123;demo.rocketmq.myNameServer&amp;#125;&amp;quot;, topic = &amp;quot;$&amp;#123;demo.rocketmq.topic.user&amp;#125;&amp;quot;, consumerGroup = &amp;quot;user_consumer&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;UserConsumer&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RocketMQListener&lt;/span&gt;&amp;lt;User&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;onMessage&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(User message)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;######## user_consumer received: %s ; age: %s ; name: %s \n&amp;quot;&lt;/span&gt;, message, message.getUserAge(), message.getUserName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该监听器会自动接收配置项 demo.rocketmq.topic.user 中的消息，当接收到消息时，会将消息中的二进制码部分反序列化为 User 对象作为 message 传入然后进行消费。&lt;/p&gt;
&lt;h5 id=&#34;rocketmqreplylistener&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rocketmqreplylistener&#34;&gt;#&lt;/a&gt; RocketMQReplyListener&lt;/h5&gt;
&lt;p&gt;该类为一个接口，是作为消费者需要实现的监听器接口之一，其接口代码为：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RocketMQReplyListener&lt;/span&gt;&amp;lt;T, R&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    R &lt;span class=&#34;title function_&#34;&gt;onMessage&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(T message)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实现该接口的监听器就支持对传入的消息回传进行对应的响应结果。该类接受的两个类型泛型 T、R 中，T 表示接受到的消息类型，效果同 RocketMQListener 中的 T；R 表示回传的响应数据的类型。&lt;/p&gt;
&lt;p&gt;demo 样例：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RocketMQMessageListener(topic = &amp;quot;$&amp;#123;demo.rocketmq.objectRequestTopic&amp;#125;&amp;quot;, consumerGroup = &amp;quot;$&amp;#123;demo.rocketmq.objectRequestConsumer&amp;#125;&amp;quot;, selectorExpression = &amp;quot;$&amp;#123;demo.rocketmq.tag&amp;#125;&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ObjectConsumerWithReplyUser&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RocketMQReplyListener&lt;/span&gt;&amp;lt;User, User&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; User &lt;span class=&#34;title function_&#34;&gt;onMessage&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(User user)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;------- ObjectConsumerWithReplyUser received: %s \n&amp;quot;&lt;/span&gt;, user);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;replyUser&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;User&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        replyUser.setUserAge((&lt;span class=&#34;type&#34;&gt;byte&lt;/span&gt;) &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        replyUser.setUserName(&lt;span class=&#34;string&#34;&gt;&amp;quot;replyUserName&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; replyUser;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该监听器能够接收配置项 demo.rocketmq.objectRequestTopic 指定的 topic 中具有由配置项 demo.rocketmq.tag 指定的 tag 的消息，当接收到消息时，会将消息中的二进制码部分反序列化为 User 对象作为 message 传入然后进行消费，完毕后构造了一个新的 User 对象作为响应返回，RocketMQ 将会将该返回值回传给消费者。&lt;/p&gt;
&lt;h4 id=&#34;pull模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#pull模式&#34;&gt;#&lt;/a&gt; PULL 模式&lt;/h4&gt;
&lt;p&gt;PULL 模式需要使用到此前提到的 RocketMQTemplate 类中的 receive 方法。&lt;/p&gt;
&lt;h5 id=&#34;extrocketmqconsumerconfiguration&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#extrocketmqconsumerconfiguration&#34;&gt;#&lt;/a&gt; @ExtRocketMQConsumerConfiguration&lt;/h5&gt;
&lt;p&gt;该类是一个注解类，同 @ExtRocketMQTemplateConfiguration 注解类似，作用于 RocketMQTemplate 子类上，不过主要用于提供给消费者主动拉取消息。例如&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@ExtRocketMQConsumerConfiguration(topic = &amp;quot;$&amp;#123;demo.rocketmq.topic&amp;#125;&amp;quot;, group = &amp;quot;string_consumer&amp;quot;, tlsEnable = &amp;quot;$&amp;#123;demo.ext.consumer.tlsEnable&amp;#125;&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里为 RocketMQTemplate 指定了拉取的 topic，并指定了当前的消费者组，指定了是否开启 tls 加密。&lt;br&gt;
ser 对象作为响应返回，RocketMQ 将会将该返回值回传给消费者。&lt;/p&gt;
&lt;h4 id=&#34;pull模式-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#pull模式-2&#34;&gt;#&lt;/a&gt; PULL 模式&lt;/h4&gt;
&lt;p&gt;PULL 模式需要使用到此前提到的 RocketMQTemplate 类中的 receive 方法。&lt;/p&gt;
&lt;h5 id=&#34;extrocketmqconsumerconfiguration-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#extrocketmqconsumerconfiguration-2&#34;&gt;#&lt;/a&gt; @ExtRocketMQConsumerConfiguration&lt;/h5&gt;
&lt;p&gt;该类是一个注解类，同 @ExtRocketMQTemplateConfiguration 注解类似，作用于 RocketMQTemplate 子类上，不过主要用于提供给消费者主动拉取消息。例如&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@ExtRocketMQConsumerConfiguration(topic = &amp;quot;$&amp;#123;demo.rocketmq.topic&amp;#125;&amp;quot;, group = &amp;quot;string_consumer&amp;quot;, tlsEnable = &amp;quot;$&amp;#123;demo.ext.consumer.tlsEnable&amp;#125;&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里为 RocketMQTemplate 指定了拉取的 topic，并指定了当前的消费者组，指定了是否开启 tls 加密。&lt;/p&gt;
</content>
        <category term="后端" />
        <category term="MQ" />
        <category term="RocketMQ" />
        <updated>2024-09-09T05:06:48.000Z</updated>
    </entry>
    <entry>
        <id>https://silvercrow42.github.io/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2%EF%BC%88Windows%EF%BC%89/</id>
        <title>【RocketMQ】安装与部署（Windows）</title>
        <link rel="alternate" href="https://silvercrow42.github.io/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2%EF%BC%88Windows%EF%BC%89/"/>
        <content type="html">&lt;h1 id=&#34;准备工作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#准备工作&#34;&gt;#&lt;/a&gt; 准备工作&lt;/h1&gt;
&lt;h2 id=&#34;下载&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#下载&#34;&gt;#&lt;/a&gt; 下载&lt;/h2&gt;
&lt;p&gt;可以在官网上下载&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yb2NrZXRtcS5hcGFjaGUub3JnL3poLw==&#34;&gt; RocketMQ・官方网站 | RocketMQ (apache.org)&lt;/span&gt;&lt;br&gt;
 或者直接到 Apache 的文件站点下&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hcmNoaXZlLmFwYWNoZS5vcmcvZGlzdC9yb2NrZXRtcS8=&#34;&gt; Index of /dist/rocketmq (apache.org)&lt;/span&gt; 找到对应版本下载。&lt;/p&gt;
&lt;p&gt;这里以编写时的最新版本为例，选择 Binary 版本下载，该版本为编译后的版本，可以直接使用。&lt;/p&gt;
&lt;p&gt;Source 下载获取的是源码，需要经过编译后才可以使用，不过比较方便自行扩展，有扩展需求可以使用该版本自行编译。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2%EF%BC%88Windows%EF%BC%89/c687d3c664944954288c48a951b7aa5e.png&#34; class=&#34;&#34; title=&#34;官网下载页&#34;&gt;
&lt;p&gt;下载完成后解压出来是如下的文件结构。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2%EF%BC%88Windows%EF%BC%89/7e6608c24fb49bcd9982d9b25fa9c819.png&#34; class=&#34;&#34; title=&#34;下载后的文件结构&#34;&gt;
&lt;p&gt;以下以 windows 为环境演示。&lt;/p&gt;
&lt;p&gt;RocketMQ 依赖的是 Java 的运行环境，因此系统上应该安装 Java 并且拥有对应的环境变量 JAVA_HOME.&lt;/p&gt;
&lt;p&gt;RocketMQ 使用的 java 环境是 java8，对于高版本环境可能需要进行一些适配性的改动。&lt;/p&gt;
&lt;p&gt;在 RocketMQ 目录下的 bin 文件夹中有对应的服务启动脚本，包含 Linux 可运行的 sh 文件以及 Windows 可运行的 cmd 文件。&lt;/p&gt;
&lt;h2 id=&#34;环境变量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#环境变量&#34;&gt;#&lt;/a&gt; 环境变量&lt;/h2&gt;
&lt;p&gt;解压完毕后需要手动添加名为 ROCKETMQ_HOME 的环境变量，索引到 RocketMQ 的解压目录即可，设置完毕后需要重启电脑。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2%EF%BC%88Windows%EF%BC%89/b9d692cbe18a30e8c27f757d0208f0ec.png&#34; class=&#34;&#34; title=&#34;环境变量设置&#34;&gt;
&lt;h1 id=&#34;nameserver&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nameserver&#34;&gt;#&lt;/a&gt; NameServer&lt;/h1&gt;
&lt;p&gt;打开 cmd 命令行后，通过 cd 命令进入到解压目录的 bin 目录下。然后使用 &lt;code&gt;start mqnamesrv.cmd &lt;/code&gt; 命令新开一个命令行窗口启动 NameServer&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2%EF%BC%88Windows%EF%BC%89/31d4e322a0dd35ade7d8198071115f27.png&#34; class=&#34;&#34; title=&#34;新窗口启动NameServer&#34;&gt;
&lt;p&gt;或者直接使用 &lt;code&gt;mqnamesrv.cmd&lt;/code&gt;  在当前命令行中启动。&lt;/p&gt;
&lt;p&gt;其本质是通过此前设置的环境变量找到 RocketMQ 的 bin 路径，再通过该路径下的 runserver.cmd 脚本文件实现运行的，因此启动项配置其实来自 runserver.cmd 中。&lt;/p&gt;
&lt;p&gt;出现 The Name Server boot success 提示则表示 NameServer 服务启动成功，启动成功后不要关闭该命令窗口。&lt;/p&gt;
&lt;h2 id=&#34;可能出现的问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#可能出现的问题&#34;&gt;#&lt;/a&gt; 可能出现的问题&lt;/h2&gt;
&lt;h3 id=&#34;please-set-the-rocketmq_home-variable-in-your-environment&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#please-set-the-rocketmq_home-variable-in-your-environment&#34;&gt;#&lt;/a&gt; Please set the ROCKETMQ_HOME variable in your environment!&lt;/h3&gt;
&lt;p&gt;这个问题提示其实不够准确，并不一定是在我们没有设置环境变量时出现。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2%EF%BC%88Windows%EF%BC%89/45ac5254ebbaf057393dc8743474c119.png&#34; class=&#34;&#34; title=&#34;问题定位1&#34;&gt;
&lt;p&gt;因为在运行过程中，脚本文件是通过环境变量来定位到 runserver.cmd 的位置再通过该脚本来启动应用的，因此在当 runserver.cmd 文件定位不到时才会出现该问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;处理方法&lt;/strong&gt;：可以重新打开一个命令行，然后通过 &lt;code&gt;echo %ROCKETMQ_HOME%&lt;/code&gt; &lt;br&gt;
 打印一下环境变量出来检查一下环境变量是否有误。同时这种方式也能够让环境变量刷新，如果此前曾经修改过环境变量而没有重启电脑，则这种方式能够让环境变量刷新成修改后的值。&lt;/p&gt;
&lt;p&gt;如果仍然没有解决，则可以进入到该对应路径下看看是否缺失了 runserver.cmd 文件，到这一步也都没有发现问题，那就只能重启一下试试，可能环境变量的更改并没有生效。&lt;/p&gt;
&lt;h3 id=&#34;unrecognized-vm-option&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#unrecognized-vm-option&#34;&gt;#&lt;/a&gt; Unrecognized VM option&lt;/h3&gt;
&lt;p&gt;在通过 runserver.cmd 运行时，如果以高于 java8 的版本作为环境运行可能会出现如下错误：&lt;strong&gt;Unrecognized VM option ’&lt;br&gt;
UseConcMarkSweepGC’&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2%EF%BC%88Windows%EF%BC%89/41367fb287fe7a305b9b51f4c0fc252b.png&#34; class=&#34;&#34; title=&#34;问题定位2-1&#34;&gt;
&lt;p&gt;这是因为在运行脚本中，包含了一些对 CMSGC 的一些调优参数。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2%EF%BC%88Windows%EF%BC%89/32ef686e52b0f1c87d1ef0640b87d779.png&#34; class=&#34;&#34; title=&#34;问题定位2-2&#34;&gt;
&lt;p&gt;据查在 java9 中使用 G1 来作为 GC 的默认实现，从而废弃了 CMS 相关的一些参数。因此启动时需要进行一些相关参数的改动，或者将 java 降级，指定特定的 jre8 来作为虚拟机运行。&lt;/p&gt;
&lt;p&gt;在 sh 版本的 runserver 脚本中对 java 的版本进行了专门的适配，可以识别 java 版本采用特定的指令。如果使用 cmd 脚本时仍需要在 Java 高版本环境中运行，也可以参照 sh 版本脚本修改一下对应的虚拟机参数。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2%EF%BC%88Windows%EF%BC%89/3e12c58e5dd33d6864284ce2a5f8b783.png&#34; class=&#34;&#34; title=&#34;问题定位2-3&#34;&gt;
&lt;p&gt;&lt;strong&gt;处理方法&lt;/strong&gt;：这里提供一个根据 sh 脚本修改过来的适配高版本 java 的 cmd 脚本，使用高版本运行时用该脚本替代原本的 runserver.cmd 即可。&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@&lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; off&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem Licensed to the Apache Software Foundation (ASF) under one or more&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem contributor license agreements.  See the NOTICE file distributed with&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem this work &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; additional information regarding copyright ownership.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem The ASF licenses this file to You under the Apache License, Version &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem (the &lt;span class=&#34;string&#34;&gt;&amp;quot;License&amp;quot;&lt;/span&gt;); you may not use this file except &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; compliance with&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem the License.  You may obtain a &lt;span class=&#34;built_in&#34;&gt;copy&lt;/span&gt; of the License at&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem     http://www.apache.org/licenses/LICENSE&lt;span class=&#34;literal&#34;&gt;-2&lt;/span&gt;.&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem Unless required by applicable law or agreed to &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; writing, software&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem distributed under the License is distributed on an &lt;span class=&#34;string&#34;&gt;&amp;quot;AS IS&amp;quot;&lt;/span&gt; BASIS,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem See the License &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; the specific language governing permissions and&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem limitations under the License.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; not exist &lt;span class=&#34;string&#34;&gt;&amp;quot;%JAVA_HOME%\bin\java.exe&amp;quot;&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; Please &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; the JAVA_HOME variable &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; your environment, We need java(x64)! &amp;amp; &lt;span class=&#34;keyword&#34;&gt;EXIT&lt;/span&gt; /B &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA=%JAVA_HOME%\bin\java.exe&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;setlocal&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; BASE_DIR=%~dp0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; BASE_DIR=%BASE_DIR:~&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;literal&#34;&gt;-1&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; %%d &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; (%BASE_DIR%) &lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; BASE_DIR=%%~dpd&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; CLASSPATH=.;%BASE_DIR%conf;%BASE_DIR%lib\*;%CLASSPATH%&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPT=%JAVA_OPT% -server -Xms4g -Xmx4g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPT=%JAVA_OPT% -XX:+UseG1GC -XX:G1HeapRegionSize=16m -XX:G1ReservePercent=25 -XX:InitiatingHeapOccupancyPercent=30 -XX:SoftRefLRUPolicyMSPerMB=0&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPT=%JAVA_OPT% -verbose:gc -Xloggc:&amp;quot;&lt;/span&gt;%USERPROFILE%\rmq_srv_gc.log&lt;span class=&#34;string&#34;&gt;&amp;quot; -XX:+PrintGCDetails&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPT=%JAVA_OPT% -XX:-OmitStackTraceInFastThrow&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPT=%JAVA_OPT% -XX:-UseLargePages&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPT=%JAVA_OPT% %JAVA_OPT_EXT% -cp &amp;quot;&lt;/span&gt;%CLASSPATH%&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; %*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;%JAVA%&amp;quot;&lt;/span&gt; %JAVA_OPT% %*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;为什么不对 cmd 脚本进行适配呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;sh 脚本中的 java 版本适配其本质上，是通过运行  &lt;code&gt;java -version&lt;/code&gt;  命令&lt;br&gt;
获取到控制台输出的完整 java 版本信息。再通过字符串匹配的方式来获取 java 版本号，再去以 8 为基准去匹配对应的运行参数。&lt;/p&gt;
&lt;p&gt;经过测试，windows 平台下的 java -version 获取到的版本字符串通过命令行是无法捕获到的。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2%EF%BC%88Windows%EF%BC%89/b7e356d6851105053394a790c1b7de7f.png&#34; class=&#34;&#34; title=&#34;问题定位2-4&#34;&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2%EF%BC%88Windows%EF%BC%89/f051b72f858d696bb84b1f1c4eed0d5b.png&#34; class=&#34;&#34; title=&#34;问题定位2-5&#34;&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2%EF%BC%88Windows%EF%BC%89/1c6676e01f035d76dad63ad38e9526d7.png&#34; class=&#34;&#34; title=&#34;问题定位2-6&#34;&gt;
&lt;p&gt;推测也就是这个原因 windows 导致没有办法单独通过命令行来确定 java 版本号，也自然就没有办法参照其进行适配了。&lt;/p&gt;
&lt;h3 id=&#34;找不到或无法加载主类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#找不到或无法加载主类&#34;&gt;#&lt;/a&gt; 找不到或无法加载主类&lt;/h3&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2%EF%BC%88Windows%EF%BC%89/1e4aced6e93a87a20cd4152794c4fe3b.png&#34; class=&#34;&#34; title=&#34;问题定位3-1&#34;&gt;
&lt;p&gt;该问题的主要诱因是环境变量中存在空格。导致解析命令时环境变量被分割成了两个命令。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2%EF%BC%88Windows%EF%BC%89/7ac4047b712f71097b7aff8518a1ec40.png&#34; class=&#34;&#34; title=&#34;问题定位3-2&#34;&gt;
&lt;p&gt;&lt;strong&gt;处理方法&lt;/strong&gt;：最好的解决办法是变更目录，在 RocketMQ 的路径中不要存在空格。&lt;/p&gt;
&lt;p&gt;还有，其实当命令中存在不需要被分割的空格时，只需要使用 双引号 &amp;quot;&amp;quot; 将对应的命令包裹起来即可。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2%EF%BC%88Windows%EF%BC%89/3de37e56ef97c4035b99d58bca794e1a.png&#34; class=&#34;&#34; title=&#34;问题定位3-3&#34;&gt;
&lt;p&gt;但是此处经过尝试后发现，该处被错误分割的情况消失，但是仍然存在问题，可能在 runserver 中的 BASE_DIR 与 CLASSPATH 等变量也需要加上双引号防止错误分割，解决起来较为麻烦，而且不清楚后续会不会造成其他问题，因此不再对这种情况进行处理。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2%EF%BC%88Windows%EF%BC%89/58845da6a693a14c8060ad228ef530fa.png&#34; class=&#34;&#34; title=&#34;问题定位3-4&#34;&gt;
&lt;h1 id=&#34;broker&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#broker&#34;&gt;#&lt;/a&gt; Broker&lt;/h1&gt;
&lt;h2 id=&#34;启动&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#启动&#34;&gt;#&lt;/a&gt; 启动&lt;/h2&gt;
&lt;p&gt;在启动前需要先添加一个环境变量 NAMESRV_ADDR，用来指向 nameServer 服务的地址。因为测试部署时服务部署在本机，所以使用 localhost 地址，加上此前默认的端口 9876 作为环境变量值。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2%EF%BC%88Windows%EF%BC%89/66fc0e9db8f6c85a73f5ccd3f895102c.png&#34; class=&#34;&#34; title=&#34;broker环境变量&#34;&gt;
&lt;p&gt;打开 cmd 命令行后，通过 cd 命令进入到 RocketMQ 解压目录的 bin 目录下，运行命令 &lt;code&gt;start mqbroker.cmd autoCreateTopicEnable=true&lt;/code&gt;  启动服务。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2%EF%BC%88Windows%EF%BC%89/5ddf87816c70d2451863102cdf413784.png&#34; class=&#34;&#34; title=&#34;broker启动&#34;&gt;
&lt;p&gt;出现 The broker […] boot success 提示则表示 broker 服务启动成功，启动成功后同样不要关闭该命令窗口。&lt;/p&gt;
&lt;h3 id=&#34;可能出现的问题-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#可能出现的问题-2&#34;&gt;#&lt;/a&gt; 可能出现的问题&lt;/h3&gt;
&lt;p&gt;因为运行逻辑类似，因此也会出现上述情况类似的问题，此处不过多阐述，对照着修改即可。&lt;/p&gt;
&lt;p&gt;关于 java 版本适配的问题，此处也提供一个高版本可用的运行脚本:&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@&lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; off&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem Licensed to the Apache Software Foundation (ASF) under one or more&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem contributor license agreements.  See the NOTICE file distributed with&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem this work &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; additional information regarding copyright ownership.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem The ASF licenses this file to You under the Apache License, Version &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem (the &lt;span class=&#34;string&#34;&gt;&amp;quot;License&amp;quot;&lt;/span&gt;); you may not use this file except &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; compliance with&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem the License.  You may obtain a &lt;span class=&#34;built_in&#34;&gt;copy&lt;/span&gt; of the License at&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem     http://www.apache.org/licenses/LICENSE&lt;span class=&#34;literal&#34;&gt;-2&lt;/span&gt;.&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem Unless required by applicable law or agreed to &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; writing, software&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem distributed under the License is distributed on an &lt;span class=&#34;string&#34;&gt;&amp;quot;AS IS&amp;quot;&lt;/span&gt; BASIS,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem See the License &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; the specific language governing permissions and&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem limitations under the License.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; not exist &lt;span class=&#34;string&#34;&gt;&amp;quot;%JAVA_HOME%\bin\java.exe&amp;quot;&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; Please &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; the JAVA_HOME variable &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; your environment, We need java(x64)! &amp;amp; &lt;span class=&#34;keyword&#34;&gt;EXIT&lt;/span&gt; /B &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA=%JAVA_HOME%\bin\java.exe&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;setlocal&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; BASE_DIR=%~dp0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; BASE_DIR=%BASE_DIR:~&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;literal&#34;&gt;-1&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; %%d &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; (%BASE_DIR%) &lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; BASE_DIR=%%~dpd&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; CLASSPATH=.;%BASE_DIR%conf;%BASE_DIR%lib\*;%CLASSPATH%&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem ===========================================================================================&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem  JVM Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rem ===========================================================================================&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPT=%JAVA_OPT% -server -Xms2g -Xmx2g&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPT=%JAVA_OPT% -XX:+UseG1GC -XX:G1HeapRegionSize=16m -XX:G1ReservePercent=25 -XX:InitiatingHeapOccupancyPercent=30 -XX:SoftRefLRUPolicyMSPerMB=0 -XX:SurvivorRatio=8&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPT=%JAVA_OPT% -verbose:gc -Xlog:gc*:file=%USERPROFILE%/mq_gc.log:time,tags:filecount=5,filesize=30M&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPT=%JAVA_OPT% -XX:-OmitStackTraceInFastThrow&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPT=%JAVA_OPT% -XX:+AlwaysPreTouch&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPT=%JAVA_OPT% -XX:MaxDirectMemorySize=15g&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPT=%JAVA_OPT% -XX:-UseLargePages -XX:-UseBiasedLocking&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPT=%JAVA_OPT% -Drocketmq.client.logUseSlf4j=true&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPT=%JAVA_OPT% %JAVA_OPT_EXT% -cp %CLASSPATH%&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;%JAVA%&amp;quot;&lt;/span&gt; %JAVA_OPT% %*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用其取代 runbroker.cmd 即可。&lt;/p&gt;
&lt;h4 id=&#34;导包问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#导包问题&#34;&gt;#&lt;/a&gt; 导包问题&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;java.lang.IllegalAccessError: &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;org&lt;/span&gt;.apache.rocketmq.common.UtilAll (in unnamed &lt;span class=&#34;keyword&#34;&gt;module&lt;/span&gt; @&lt;span class=&#34;number&#34;&gt;0x4bde3f8a&lt;/span&gt;) cannot access &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;sun&lt;/span&gt;.nio.ch.DirectBuffer (in &lt;span class=&#34;keyword&#34;&gt;module&lt;/span&gt; java.base) because &lt;span class=&#34;keyword&#34;&gt;module&lt;/span&gt; java.base does not export sun.nio.ch to unnamed &lt;span class=&#34;keyword&#34;&gt;module&lt;/span&gt; @&lt;span class=&#34;number&#34;&gt;0x4bde3f8a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在启动参数中额外添加一句 &lt;code&gt;--add-exports=java.base/sun.nio.ch=ALL-UNNAMED&lt;/code&gt;  即可.。&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;%JAVA%&amp;quot;&lt;/span&gt; %JAVA_OPT% %*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更改为&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;%JAVA%&amp;quot;&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;--add-exports&lt;/span&gt;=java.base/sun.nio.ch=ALL&lt;span class=&#34;literal&#34;&gt;-UNNAMED&lt;/span&gt;  %JAVA_OPT% %*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;控制台&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#控制台&#34;&gt;#&lt;/a&gt; 控制台&lt;/h1&gt;
&lt;p&gt;上述服务搭建成功后服务就已经可用了，但是为了便于管理其中的数据，我们需要搭建一个控制台，用来提供一个前端页面供我们管理数据。&lt;/p&gt;
&lt;h2 id=&#34;获取源码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取源码&#34;&gt;#&lt;/a&gt; 获取源码&lt;/h2&gt;
&lt;p&gt;在早些时候，控制台项目隶属于&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9yb2NrZXRtcS1leHRlcm5hbHM=&#34;&gt; GitHub - apache/rocketmq-externals&lt;/span&gt;&lt;br&gt;
 项目下，位于其中的 rocketmq-console 中，其中还包含一些其他的 RocketMQ 的拓展项目，可以参考使用。后来控制台项目单独独立了出来，我们可以在&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9yb2NrZXRtcS1kYXNoYm9hcmQ=&#34;&gt; GitHub - apache/rocketmq-dashboard&lt;/span&gt;&lt;br&gt;
 仓库中找到。&lt;/p&gt;
&lt;p&gt;首先将其源码通过以下 git 指令克隆到本地。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;git clone https://github.com/apache/rocketmq-dashboard.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;安装依赖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#安装依赖&#34;&gt;#&lt;/a&gt; 安装依赖&lt;/h2&gt;
&lt;p&gt;克隆完毕后因为还需要处理依赖，有条件的话可以直接使用 JAVA 编译器打开，使用 IDEA 导入为 maven 项目的话会自动加载依赖，其本质上就是 java&lt;br&gt;
spring 的项目。如果依赖下载较慢可以使用阿里的 maven 仓库作为中央仓库，因为本来就是阿里的项目，应该不会存在依赖版本等的问题。&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;mirrors&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;mirror&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;alimaven&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;aliyun maven&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;url&lt;/span&gt;&amp;gt;&lt;/span&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;url&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;mirrorOf&lt;/span&gt;&amp;gt;&lt;/span&gt;central&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;mirrorOf&lt;/span&gt;&amp;gt;&lt;/span&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;mirror&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;mirrors&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不借助编译器处理依赖的话可以 cd 到项目目录下，自行使用 mvn 的指令去处理依赖。&lt;/p&gt;
&lt;h2 id=&#34;启动-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#启动-2&#34;&gt;#&lt;/a&gt; 启动&lt;/h2&gt;
&lt;p&gt;在依赖安装完成之后，在运行之前先要修改一下配置。其实配置项的功能描述在 application.yml 中都有，没有的大多是 spring 的基本配置，查 spring 对应的配置项即可。此处只包括影响到应用启动的配置。&lt;/p&gt;
&lt;h3 id=&#34;配置nameserver地址&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置nameserver地址&#34;&gt;#&lt;/a&gt; 配置 NameServer 地址&lt;/h3&gt;
&lt;p&gt;在 application.yml 中，需要配置一下此前的 NameServer 的 ip 地址，因为源码中的配置文件中 NameServer 地址配置多了一个 127.0.0.2:&lt;br&gt;
9876 地址，运行过程中连接不上可能会报错，删掉即可。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2%EF%BC%88Windows%EF%BC%89/ab64039c47990f681af7755c6bd38b34.png&#34; class=&#34;&#34; title=&#34;配置控制台1&#34;&gt;
&lt;p&gt;此处可以配置一个，也可以配置多个，使用 yml 的数组写法即可，即在每一项数组元素均使用 “-” 开头。&lt;/p&gt;
&lt;p&gt;如果在 properties 文件中数组则是类似于通常数组的写法，只不过每个元素都要单独写一项，比较麻烦。&lt;/p&gt;
&lt;figure class=&#34;highlight properties&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;rocketmq.config.namesrvAddrs[0]&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;127.0.0.1:9876&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;rocketmq.config.namesrvAddrs[1]&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;127.0.0.2:9876&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;配置启动端口&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置启动端口&#34;&gt;#&lt;/a&gt; 配置启动端口&lt;/h3&gt;
&lt;p&gt;也可以配置一下当前控制台的启动使用的访问端口，随意一个空闲端口即可。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2%EF%BC%88Windows%EF%BC%89/b8fde91e184e69dc9ff077345526cc86.png&#34; class=&#34;&#34; title=&#34;配置控制台2&#34;&gt;
&lt;h3 id=&#34;启动-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#启动-3&#34;&gt;#&lt;/a&gt; 启动&lt;/h3&gt;
&lt;p&gt;使用编译器启动，通过 &lt;code&gt;mvn spring-boot:run&lt;/code&gt;  启动或者通过 maven 打包成 jar 包然后运行 jar 包均可，运行成功后如下图。&lt;/p&gt;
&lt;h2 id=&#34;部署&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#部署&#34;&gt;#&lt;/a&gt; 部署&lt;/h2&gt;
&lt;p&gt;部署时可以参照传统的 maven 项目进行打包部署，另外官方也提供了 docker 镜像来便捷部署，根据 ReadMe 中描述，通过以下 docker 指令拉取 docker 镜像。&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker pull apacherocketmq/rocketmq&lt;span class=&#34;literal&#34;&gt;-dashboard&lt;/span&gt;:latest&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后通过以下指令修改参数后运行即可&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker run &lt;span class=&#34;literal&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;--name&lt;/span&gt; rocketmq&lt;span class=&#34;literal&#34;&gt;-dashboard&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;-e&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;JAVA_OPTS=-Drocketmq.namesrv.addr=127.0.0.1:9876&amp;quot;&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;8080&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;8080&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;-t&lt;/span&gt; apacherocketmq/rocketmq&lt;span class=&#34;literal&#34;&gt;-dashboard&lt;/span&gt;:latest&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中 rockermq.namesrv.addr 的值为此前部署的 NameServer 的地址，-p 参数冒号前的值为应用在虚拟机中的启动端口，后面的值应该映射到宿主机开放给该服务的端口。&lt;/p&gt;
&lt;h2 id=&#34;访问&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#访问&#34;&gt;#&lt;/a&gt; 访问&lt;/h2&gt;
&lt;p&gt;启动后通过部署的 ip+port 端口的形式访问即可。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2%EF%BC%88Windows%EF%BC%89/3dad91ef206cef1c546745174e4bf0ea.png&#34; class=&#34;&#34; title=&#34;控制台界面&#34;&gt;
&lt;p&gt;需要中文界面的话可以通过 ChangeLanguage 来切换语言。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2%EF%BC%88Windows%EF%BC%89/017a22bd9ca7d08ef9fe8bfd5559ad35.png&#34; class=&#34;&#34; title=&#34;英文&#34;&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2%EF%BC%88Windows%EF%BC%89/de23f48aafc56e32495a4e8b2ef513b7.png&#34; class=&#34;&#34; title=&#34;汉语&#34;&gt;
&lt;p&gt;多语化文件放置在源码目录下的 &lt;code&gt;src/main/resources/static/src/i18n&lt;/code&gt;  文件夹中，可参照前端的 i18n 标准自行修改翻译或者添加其他语言。&lt;/p&gt;
&lt;img data-src=&#34;/joker.github.io/2024/09/09/%E3%80%90RocketMQ%E3%80%91%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2%EF%BC%88Windows%EF%BC%89/cf3c5cd85f377a8d290e097b17e8dadd.png&#34; class=&#34;&#34; title=&#34;多语&#34;&gt;
</content>
        <category term="后端" />
        <category term="MQ" />
        <category term="RocketMQ" />
        <updated>2024-09-09T03:46:16.000Z</updated>
    </entry>
</feed>
