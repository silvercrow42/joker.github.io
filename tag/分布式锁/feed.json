{
    "version": "https://jsonfeed.org/version/1",
    "title": "Joker • All posts by \"分布式锁\" tag",
    "description": "",
    "home_page_url": "https://silvercrow42.github.io/joker.github.io",
    "items": [
        {
            "id": "https://silvercrow42.github.io/joker.github.io/2024/09/10/%E3%80%90%E5%88%86%E5%B8%83%E5%BC%8F%E3%80%91%E9%80%9A%E8%BF%87Zookeeper%E4%B8%8ERedisson%E5%AE%9E%E7%8E%B0Spring%E6%B3%A8%E8%A7%A3%E5%BC%8F%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/",
            "url": "https://silvercrow42.github.io/joker.github.io/2024/09/10/%E3%80%90%E5%88%86%E5%B8%83%E5%BC%8F%E3%80%91%E9%80%9A%E8%BF%87Zookeeper%E4%B8%8ERedisson%E5%AE%9E%E7%8E%B0Spring%E6%B3%A8%E8%A7%A3%E5%BC%8F%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/",
            "title": "【分布式】通过Zookeeper与Redisson实现Spring注解式分布式锁",
            "date_published": "2024-09-10T02:00:01.000Z",
            "content_html": "<p>在分布式系统中，由于服务部署在多个节点中，在运行时数据层面上天生无法互通，因此在处理多线程敏感的数据时，无法像单机应用开发一样通过 java 内部实现的多线程方案来解决。此时我们就需要通过分布式锁的方式来处理数据。</p>\n<p>本文将提供一个在 spring-cloud 基础上通过 ZooKeeper 或者 Redisson 实现的注解式的加锁方案。需要使用到 Spring<br>\nAOP，通过 ZooKeeper 加锁时需要 ZooKeeper 服务，使用 Redisson 加锁时需要使用 Redis 数据库。</p>\n<h2 id=\"依赖\"><a class=\"markdownIt-Anchor\" href=\"#依赖\">#</a> 依赖</h2>\n<p>当使用 Redisson 方式时需要引入 Redisson 依赖，版本号自行匹配替换。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.redisson/redisson --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.redisson<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>redisson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;redisson.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>当使用 ZooKeeper 方式时需要引入连接 ZooKeeper 的依赖，版本号自行匹配替换。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.apache.curator/curator-recipes --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.curator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>curator-recipes<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;curator-recipes.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"配置访问锁服务的组件\"><a class=\"markdownIt-Anchor\" href=\"#配置访问锁服务的组件\">#</a> 配置访问锁服务的组件</h2>\n<h3 id=\"redisson\"><a class=\"markdownIt-Anchor\" href=\"#redisson\">#</a> Redisson</h3>\n<p>使用 redisson 作为锁服务的实现时，需要如下配置类配置 RedissonClient 组件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedissonLockConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;cloud.lock.redis.url:redis://localhost:6379&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String redisUrl;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;cloud.lock.redis.password:&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String redisPassword;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RedissonClient <span class=\"title function_\">redissonClient</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Config</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Config</span>();</span><br><span class=\"line\">        <span class=\"type\">SingleServerConfig</span> <span class=\"variable\">singleServerConfig</span> <span class=\"operator\">=</span> config.useSingleServer();</span><br><span class=\"line\">        singleServerConfig.setAddress(redisUrl);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotEmpty(redisPassword)) &#123;</span><br><span class=\"line\">            singleServerConfig.setPassword(redisPassword);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Redisson.create(config);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中 redisUrl 为 Redis 服务的地址，redisPassword 为 Redis 服务的密码。</p>\n<p>RedissonClient 连接配置可以按需进行调整。</p>\n<h3 id=\"zookeeper\"><a class=\"markdownIt-Anchor\" href=\"#zookeeper\">#</a> ZooKeeper</h3>\n<p>使用 ZooKeeper 作为锁服务的实现时，需要如下配置类配置 CuratorFramework 组件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ZooKeeperLockConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;cloud.lock.zookeeper.url:localhost:2181&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;cloud.lock.zookeeper.timeout:1000&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> timeout;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;cloud.lock.zookeeper.retry:3&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> retry;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> CuratorFramework <span class=\"title function_\">zkClient</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ExponentialBackoffRetry</span> <span class=\"variable\">exponentialBackoffRetry</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ExponentialBackoffRetry</span>(timeout, retry);</span><br><span class=\"line\">        <span class=\"type\">CuratorFramework</span> <span class=\"variable\">curatorFramework</span> <span class=\"operator\">=</span> CuratorFrameworkFactory.newClient(url, exponentialBackoffRetry);</span><br><span class=\"line\">        curatorFramework.start();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curatorFramework;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中 url 是 ZooKeeper 服务地址，timeout 是连接超时时间，retry 是连接失败重试次数。</p>\n<p>CuratorFramework 连接配置可以按需进行调整。</p>\n<h2 id=\"加锁逻辑\"><a class=\"markdownIt-Anchor\" href=\"#加锁逻辑\">#</a> 加锁逻辑</h2>\n<p>在分布式系统中，多系统之间的数据很可能不互通，因此加锁肯定不是通过原始数据进行加锁。</p>\n<p>在加锁时，我们应该对应原始数据，生成唯一的对应该数据的 token 作为加锁依据的 key，同时该 key 在无论何时对于该原始数据而言生成的都是这个 key。这样一来，通过该 key 明确地指向原始数据进行加锁与解锁。</p>\n<p>例如在系统中，存在张 User 表，该表中 id 列为其主键。那么在进行数据加锁时，则可以考虑以如下格式：“User-[id 数据]” 来进行加锁解锁操作。</p>\n<h3 id=\"redisson-2\"><a class=\"markdownIt-Anchor\" href=\"#redisson-2\">#</a> Redisson</h3>\n<p>Redisson 的 “红锁”（Red Lock）是一种基于 Redis 的分布式锁实现，它提供了高可用性和一致性保证。红锁的设计目的是为了克服单点故障问题，通过在多个<br>\n Redis 实例上实现分布式锁来提高系统的可靠性和可用性。</p>\n<p>红锁的基本原理<br>\n红锁的核心思想是在多个 Redis 实例上分别尝试获取锁，只有当大多数实例成功获取锁时，才认为整个分布式锁成功获取。具体步骤如下：</p>\n<ol>\n<li>尝试获取锁：在多个 Redis 实例上尝试获取锁。</li>\n<li>判断是否成功：只有当大多数 Redis 实例成功获取锁时，才认为整个分布式锁成功获取。</li>\n<li>释放锁：在所有成功获取锁的 Redis 实例上释放锁。</li>\n</ol>\n<p>实现步骤</p>\n<ol>\n<li>首先需要创建一个或多个 Redis 客户端，并初始化 Redisson 框架。</li>\n<li>使用 Redisson 框架创建红锁。</li>\n<li>尝试在多个 Redis 实例上获取锁。</li>\n<li>在所有成功获取锁的 Redis 实例上释放锁。</li>\n</ol>\n<h3 id=\"zookeeper-2\"><a class=\"markdownIt-Anchor\" href=\"#zookeeper-2\">#</a> ZooKeeper</h3>\n<p>ZooKeeper 分布式锁是一种常用的分布式协调机制，用于解决多个进程或服务之间的互斥访问问题。<br>\n在分布式系统中，多个节点可能需要同时访问共享资源，而分布式锁可以确保这些访问是互斥的，从而避免数据不一致的问题。<br>\n同时 ZooKeeper 集群化部署的高可用性和一致性使得它可以可靠地处理高并发加锁场景。</p>\n<p>分布式锁的基本原理<br>\n分布式锁的基本原理是在 ZooKeeper 中创建一个临时有序节点（ephemeral sequential node），每个客户端通过创建这样的节点来表示自己持有锁的状态。具体步骤如下：</p>\n<ol>\n<li>创建临时有序节点：客户端在 ZooKeeper 中创建一个临时有序节点。</li>\n<li>判断是否是最小节点：客户端检查自己创建的节点是否是最小的节点。</li>\n<li>加锁与释放锁：如果是最小节点，则客户端获得锁；否则，客户端等待前一个节点释放锁。</li>\n</ol>\n<p>实现步骤</p>\n<ol>\n<li>创建锁节点\n<ol>\n<li>定义锁路径：\n<ol>\n<li>选择一个固定的路径作为锁的根节点，例如 /distributed-lock。</li>\n<li>客户端在该路径下创建一个临时有序节点。</li>\n</ol>\n</li>\n<li>创建临时有序节点：\n<ol>\n<li>使用 create API 创建临时有序节点，例如 /distributed-lock/lock-0000000001。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>判断是否是最小节点\n<ol>\n<li>获取所有子节点：\n<ol>\n<li>客户端获取锁路径下的所有子节点，例如 /distributed-lock 下的所有子节点。</li>\n</ol>\n</li>\n<li>比较节点序号：\n<ol>\n<li>客户端将自己的节点序号与其他节点的序号进行比较。</li>\n<li>如果当前节点序号是最小的，则获得锁；否则，等待前一个节点释放锁。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>加锁与释放锁\n<ol>\n<li>加锁：\n<ol>\n<li>如果当前节点序号是最小的，则获得锁。</li>\n<li>否则，等待前一个节点释放锁。</li>\n</ol>\n</li>\n<li>释放锁：\n<ol>\n<li>当客户端不再需要锁时，删除自己创建的临时有序节点。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"加锁实现\"><a class=\"markdownIt-Anchor\" href=\"#加锁实现\">#</a> 加锁实现</h2>\n<p>在进行实现时，首先考虑到一次加锁时可能涉及到多个数据，因此使用 key 集合来进行加锁，timeout 与 timeunit 用于指代锁的超时时长。</p>\n<p>抽象出如下方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> LockEntity <span class=\"title function_\">doLock</span><span class=\"params\">(List&lt;String&gt; keys,Long timeout,TimeUnit unit)</span><span class=\"keyword\">throws</span> Exception;</span><br></pre></td></tr></table></figure>\n<p>LockEntity 为锁实例，用于进行解锁操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LockEntity</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object lock;</span><br><span class=\"line\"></span><br><span class=\"line\">    LockEntity(Object lock) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.lock = lock;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unlock</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lock <span class=\"keyword\">instanceof</span> RLock rLock) &#123;</span><br><span class=\"line\">            rLock.unlock();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lock <span class=\"keyword\">instanceof</span> InterProcessLock interProcessLock) &#123;</span><br><span class=\"line\">            interProcessLock.release();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>针对不同的锁类型，采取不同的解锁方法</p>\n<h3 id=\"redisson-3\"><a class=\"markdownIt-Anchor\" href=\"#redisson-3\">#</a> Redisson</h3>\n<p>逻辑：先通过 RedissonClient 组件遍历 keys 集合获取所有锁实例，再将以这些锁实例来获取一个 MultiLock 实例，来进行多锁的统一加锁解锁，再根据提供的 timeout 和 unit 加锁并返回 LockEntity 对象用来操作解锁。</p>\n<p>源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> LockEntity <span class=\"title function_\">doLock</span><span class=\"params\">(Set&lt;String&gt; keys,Long timeout,TimeUnit unit)</span>&#123;</span><br><span class=\"line\">        ArrayList&lt;RLock&gt; rLocks=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(keys.size());</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String key:keys)&#123;</span><br><span class=\"line\">        rLocks.add(redissonClient.getLock(key));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        RLock multiLock=redissonClient.getMultiLock(rLocks.toArray(<span class=\"keyword\">new</span> <span class=\"title class_\">RLock</span>[<span class=\"number\">0</span>]));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timeout!=<span class=\"literal\">null</span>&amp;&amp;timeout&gt;<span class=\"number\">0</span>&amp;&amp;unit!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        multiLock.lock(timeout,unit);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        multiLock.lock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LockEntity</span>(multiLock);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"zookeeper-3\"><a class=\"markdownIt-Anchor\" href=\"#zookeeper-3\">#</a> ZooKeeper</h3>\n<p>逻辑：同 Redisson 类似，先构造多锁对象，然后使用该对象进行加锁并返回</p>\n<p>源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> LockEntity <span class=\"title function_\">doLock</span><span class=\"params\">(Set&lt;String&gt; lockKeys,Long timeout,TimeUnit unit)</span><span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">        InterProcessMultiLock multiLock=<span class=\"keyword\">new</span> <span class=\"title class_\">InterProcessMultiLock</span>(zkClient,lockKeys.stream().toList());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timeout!=<span class=\"literal\">null</span>&amp;&amp;timeout&gt;<span class=\"number\">0</span>&amp;&amp;unit!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        multiLock.acquire(timeout,unit);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        multiLock.acquire();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LockEntity</span>(multiLock);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实现通过注解加锁\"><a class=\"markdownIt-Anchor\" href=\"#实现通过注解加锁\">#</a> 实现通过注解加锁</h2>\n<h3 id=\"定义注解\"><a class=\"markdownIt-Anchor\" href=\"#定义注解\">#</a> 定义注解</h3>\n<ol>\n<li>\n<p>首先针对锁的实现方式，定义区分注解：</p>\n<ul>\n<li>\n<p>@RedisLock</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> RedisLock &#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"title function_\">timeout</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    TimeUnit <span class=\"title function_\">unit</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> TimeUnit.SECONDS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>@ZkLock</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> ZkLock &#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"title function_\">timeout</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    TimeUnit <span class=\"title function_\">unit</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> TimeUnit.SECONDS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这两个注解作用于方法上，用于表明当前方法需要使用到分布式锁，以及需要使用到哪种分布式锁，并提供锁的超时时间。</p>\n</li>\n<li>\n<p>其次针对方法参数中的的同步参数，提供一个注解 @SyncArg。</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.PARAMETER&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> SyncArg &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 加锁依据，填入Spel表达式，用于生成锁key</span></span><br><span class=\"line\"><span class=\"comment\">     * 应该确保每一个加锁对象能够生成一个固定的且独立的key</span></span><br><span class=\"line\"><span class=\"comment\">     * 使用时可用上下文包括 arg：当前参数，method：当前运行的方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    String <span class=\"title function_\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;#arg.hashCode()&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 是否采用多对象解析方式，多对象时将产生多个锁并同步加锁</span></span><br><span class=\"line\"><span class=\"comment\">     * 当传入对象实现了 Iterable时，将遍历每一个子项，并且生成key时arg为当前遍历到的对象</span></span><br><span class=\"line\"><span class=\"comment\">     * 当传入对象实现了Map时，将遍历每个Entry，生成key时arg为当前Entry</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isMulti</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该注解作用于方法参数，表明该参数需要参照 value 值生成 key 来加锁，isMulti 用于标识当前参数是否是多对象参数。</p>\n</li>\n</ol>\n<h3 id=\"处理注解\"><a class=\"markdownIt-Anchor\" href=\"#处理注解\">#</a> 处理注解</h3>\n<p>首先，通过一个上下文对象用来自动生成加锁的 key。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@Setter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LockContext</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 被加锁的参数对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object arg;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成key的Spel表达式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String keyExpression;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 是否为多对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> multi;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 上下文参数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Getter(AccessLevel.PACKAGE)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, Object&gt; params;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LockContext</span><span class=\"params\">(SyncArg syncArg, Object arg)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>(arg, syncArg.value(), syncArg.isMulti());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LockContext</span><span class=\"params\">(Object arg, String keyExpression, <span class=\"type\">boolean</span> multi)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>(arg, keyExpression, multi, <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LockContext</span><span class=\"params\">(Object arg, String keyExpression, <span class=\"type\">boolean</span> multi, Map&lt;String, Object&gt; params)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.arg = arg;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.keyExpression = keyExpression;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.multi = multi;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.params = params;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加上下文参数</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 用于链式调用</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LockContext <span class=\"title function_\">addParam</span><span class=\"params\">(String key, Object value)</span> &#123;</span><br><span class=\"line\">        params.put(key, value);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除上下文参数</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 用于链式调用</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LockContext <span class=\"title function_\">removeParam</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">        params.remove(key);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getKey(<span class=\"keyword\">new</span> <span class=\"title class_\">SpelExpressionParser</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成key</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> parser Spel表达式解析器</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getKey</span><span class=\"params\">(SpelExpressionParser parser)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">StandardEvaluationContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StandardEvaluationContext</span>();</span><br><span class=\"line\">        HashMap&lt;String, Object&gt; contextMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;(params);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!contextMap.containsKey(<span class=\"string\">&quot;arg&quot;</span>)) &#123;</span><br><span class=\"line\">            contextMap.put(<span class=\"string\">&quot;arg&quot;</span>, arg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        context.setVariables(contextMap);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parser.parseExpression(keyExpression).getValue(context, String.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里通过继承抽象类的方式在抽象类中提供一些公共方法，由子类进行加锁的实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractLockService</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 格式化生成的key，在生成加锁key时会经过该方法，并以返回的key作为最终加锁时的key</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> generatedKey 通过上下文对象自动生成的key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 格式化后的key</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title function_\">formatKey</span><span class=\"params\">(String generatedKey)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过LockContext的形式生成锁key再加锁</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> lockContexts 用于生成锁key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timeout      锁超时时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> unit         时间单位</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 锁对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> LockEntity <span class=\"title function_\">doLockByContext</span><span class=\"params\">(List&lt;LockContext&gt; lockContexts, Long timeout, TimeUnit unit)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> doLock(getLockKeys(lockContexts), timeout, unit);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LockEntity <span class=\"title function_\">doLock</span><span class=\"params\">(Set&lt;String&gt; keys)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> doLock(keys, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过锁keys进行加锁，由子类实现</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> keys    锁key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timeout 超时时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> unit    时间单位</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 锁对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> LockEntity <span class=\"title function_\">doLock</span><span class=\"params\">(Set&lt;String&gt; keys, Long timeout, TimeUnit unit)</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据方法及入参解析出LockContext列表</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> method 加锁的方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args   入参</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> LockContext列表</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> List&lt;LockContext&gt; <span class=\"title function_\">getLockContexts</span><span class=\"params\">(Method method, Object[] args)</span> &#123;</span><br><span class=\"line\">        Annotation[][] parameterAnnotations = method.getParameterAnnotations();</span><br><span class=\"line\">        ArrayList&lt;LockContext&gt; lockContexts = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; parameterAnnotations.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取参数注解，与参数一一对应</span></span><br><span class=\"line\">            Annotation[] annotations = parameterAnnotations[i];</span><br><span class=\"line\">            <span class=\"comment\">//找到@SyncArg注解</span></span><br><span class=\"line\">            <span class=\"type\">SyncArg</span> <span class=\"variable\">syncArg</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Annotation annotation : annotations) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (annotation <span class=\"keyword\">instanceof</span> SyncArg syncArgA) &#123;</span><br><span class=\"line\">                    syncArg = syncArgA;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (syncArg != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//注解存在则通过注解构造上下文对象</span></span><br><span class=\"line\">                <span class=\"type\">LockContext</span> <span class=\"variable\">lockContext</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LockContext</span>(syncArg, args[i]);</span><br><span class=\"line\">                lockContext.addParam(<span class=\"string\">&quot;method&quot;</span>, method);</span><br><span class=\"line\">                lockContexts.add(lockContext);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lockContexts;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过上下文对象列表生成key集合</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> lockContexts 上下文对象列表</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> key集合</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> HashSet&lt;String&gt; <span class=\"title function_\">getLockKeys</span><span class=\"params\">(List&lt;LockContext&gt; lockContexts)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//解析上下文列表，生成key</span></span><br><span class=\"line\">        HashSet&lt;String&gt; keys = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">SpelExpressionParser</span> <span class=\"variable\">parser</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SpelExpressionParser</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (LockContext lockContext : lockContexts) &#123;</span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">multi</span> <span class=\"operator\">=</span> lockContext.isMulti();</span><br><span class=\"line\">            <span class=\"type\">Object</span> <span class=\"variable\">arg</span> <span class=\"operator\">=</span> lockContext.getArg();</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">keyExpression</span> <span class=\"operator\">=</span> lockContext.getKeyExpression();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (multi &amp;&amp; arg <span class=\"keyword\">instanceof</span> Iterable&lt;?&gt; iterable) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//多对象模式且参数对象为Iterable时</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Object o : iterable) &#123;</span><br><span class=\"line\">                    <span class=\"type\">LockContext</span> <span class=\"variable\">singleContext</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LockContext</span>(o, keyExpression, <span class=\"literal\">false</span>, lockContext.getParams());</span><br><span class=\"line\">                    keys.add(formatKey(singleContext.getKey(parser)));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (multi &amp;&amp; arg <span class=\"keyword\">instanceof</span> Map&lt;?, ?&gt; map) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//多对象模式且参数对象为map时</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Map.Entry&lt;?, ?&gt; entry : map.entrySet()) &#123;</span><br><span class=\"line\">                    <span class=\"type\">LockContext</span> <span class=\"variable\">singleContext</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LockContext</span>(entry, keyExpression, <span class=\"literal\">false</span>, lockContext.getParams());</span><br><span class=\"line\">                    keys.add(formatKey(singleContext.getKey(parser)));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                keys.add(formatKey(lockContext.getKey(parser)));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keys;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"redisson实现\"><a class=\"markdownIt-Anchor\" href=\"#redisson实现\">#</a> Redisson 实现</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedissonLockService</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractLockService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RedissonClient redissonClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">RedissonLockService</span><span class=\"params\">(RedissonClient redissonClient)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.redissonClient = redissonClient;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;@annotation(org.joker.commons.cloud.lock.annotation.RedisLock)&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doLockByContext</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;doLockByContext()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object <span class=\"title function_\">around</span><span class=\"params\">(ProceedingJoinPoint point)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取方法对象</span></span><br><span class=\"line\">        <span class=\"type\">MethodSignature</span> <span class=\"variable\">signature</span> <span class=\"operator\">=</span> (MethodSignature) point.getSignature();</span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> signature.getMethod();</span><br><span class=\"line\">        <span class=\"comment\">//解析用于生成锁的上下文</span></span><br><span class=\"line\">        List&lt;LockContext&gt; lockContexts = getLockContexts(method, point.getArgs());</span><br><span class=\"line\">        <span class=\"comment\">//加锁并执行</span></span><br><span class=\"line\">        <span class=\"type\">RedisLock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> method.getAnnotation(RedisLock.class);</span><br><span class=\"line\">        <span class=\"type\">LockEntity</span> <span class=\"variable\">lockEntity</span> <span class=\"operator\">=</span> doLockByContext(lockContexts, lock.timeout(), lock.unit());</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> point.proceed();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lockEntity.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">formatKey</span><span class=\"params\">(String generatedKey)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;cloud:lock:&quot;</span> + generatedKey;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LockEntity <span class=\"title function_\">doLock</span><span class=\"params\">(Set&lt;String&gt; keys, Long timeout, TimeUnit unit)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;RLock&gt; rLocks = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(keys.size());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String key : keys) &#123;</span><br><span class=\"line\">            rLocks.add(redissonClient.getLock(key));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">RLock</span> <span class=\"variable\">multiLock</span> <span class=\"operator\">=</span> redissonClient.getMultiLock(rLocks.toArray(<span class=\"keyword\">new</span> <span class=\"title class_\">RLock</span>[<span class=\"number\">0</span>]));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout != <span class=\"literal\">null</span> &amp;&amp; timeout &gt; <span class=\"number\">0</span> &amp;&amp; unit != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            multiLock.lock(timeout, unit);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            multiLock.lock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LockEntity</span>(multiLock);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过 AOP 的方法，在 @RedisLock 注解处创建切面，在执行该方法之前先对该方法的参数进行处理，产生上下文列表，并依据该列表生成对应的 key 集合，再通过该 key 集合尝试获取锁。在获取锁成功后再执行对应的方法，在 finally 代码块中释放锁。</p>\n<h5 id=\"zookeeper实现\"><a class=\"markdownIt-Anchor\" href=\"#zookeeper实现\">#</a> ZooKeeper 实现</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ZooKeeperLockService</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractLockService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> CuratorFramework zkClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ZooKeeperLockService</span><span class=\"params\">(CuratorFramework zkClient)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.zkClient = zkClient;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;@annotation(org.joker.commons.cloud.lock.annotation.ZkLock)&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doLockByContext</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;doLockByContext()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object <span class=\"title function_\">around</span><span class=\"params\">(ProceedingJoinPoint point)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取方法对象</span></span><br><span class=\"line\">        <span class=\"type\">MethodSignature</span> <span class=\"variable\">signature</span> <span class=\"operator\">=</span> (MethodSignature) point.getSignature();</span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> signature.getMethod();</span><br><span class=\"line\">        <span class=\"comment\">//解析用于生成锁的上下文</span></span><br><span class=\"line\">        List&lt;LockContext&gt; lockContexts = getLockContexts(method, point.getArgs());</span><br><span class=\"line\">        <span class=\"comment\">//加锁并执行</span></span><br><span class=\"line\">        <span class=\"type\">ZkLock</span> <span class=\"variable\">zkLock</span> <span class=\"operator\">=</span> method.getAnnotation(ZkLock.class);</span><br><span class=\"line\">        <span class=\"type\">LockEntity</span> <span class=\"variable\">lockEntity</span> <span class=\"operator\">=</span> doLockByContext(lockContexts, zkLock.timeout(), zkLock.unit());</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> point.proceed();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lockEntity.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">formatKey</span><span class=\"params\">(String generatedKey)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;/cloud/lock/&quot;</span> + generatedKey;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LockEntity <span class=\"title function_\">doLock</span><span class=\"params\">(Set&lt;String&gt; lockKeys, Long timeout, TimeUnit unit)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">InterProcessMultiLock</span> <span class=\"variable\">multiLock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InterProcessMultiLock</span>(zkClient, lockKeys.stream().toList());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout != <span class=\"literal\">null</span> &amp;&amp; timeout &gt; <span class=\"number\">0</span> &amp;&amp; unit != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            multiLock.acquire(timeout, unit);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            multiLock.acquire();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LockEntity</span>(multiLock);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同 Redisson 类似，在 ZkLock 处创建切面，先根据注解解析对应参数的锁 key 后，再获取锁，然后执行方法并释放锁。</p>\n<h2 id=\"完整代码\"><a class=\"markdownIt-Anchor\" href=\"#完整代码\">#</a> 完整代码</h2>\n<p>以下按照包结构排列</p>\n<ul>\n<li>\n<p>…</p>\n<ul>\n<li>\n<p>lock</p>\n<ul>\n<li>\n<p>annotation</p>\n<ul>\n<li>\n<p>RedisLock</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> RedisLock &#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"title function_\">timeout</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    TimeUnit <span class=\"title function_\">unit</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> TimeUnit.SECONDS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>SyncArg</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.PARAMETER&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> SyncArg &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 加锁依据，填入Spel表达式，用于生成锁key</span></span><br><span class=\"line\"><span class=\"comment\">     * 应该确保每一个加锁对象能够生成一个固定的且独立的key</span></span><br><span class=\"line\"><span class=\"comment\">     * 使用时可用上下文包括 arg：当前参数，method：当前运行的方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    String <span class=\"title function_\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;#arg.hashCode()&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 是否采用多对象解析方式，多对象时将产生多个锁并同步加锁</span></span><br><span class=\"line\"><span class=\"comment\">     * 当传入对象实现了 Iterable时，将遍历每一个子项，并且生成key时arg为当前遍历到的对象</span></span><br><span class=\"line\"><span class=\"comment\">     * 当传入对象实现了Map时，将遍历每个Entry，生成key时arg为当前Entry</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isMulti</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>ZkLock</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> ZkLock &#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"title function_\">timeout</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    TimeUnit <span class=\"title function_\">unit</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> TimeUnit.SECONDS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p>config</p>\n<ul>\n<li>\n<p>RedissonLockConfig</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedissonLockConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;cloud.lock.redis.url:redis://localhost:6379&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String redisUrl;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;cloud.lock.redis.password:&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String redisPassword;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RedissonClient <span class=\"title function_\">redissonClient</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Config</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Config</span>();</span><br><span class=\"line\">        <span class=\"type\">SingleServerConfig</span> <span class=\"variable\">singleServerConfig</span> <span class=\"operator\">=</span> config.useSingleServer();</span><br><span class=\"line\">        singleServerConfig.setAddress(redisUrl);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotEmpty(redisPassword)) &#123;</span><br><span class=\"line\">            singleServerConfig.setPassword(redisPassword);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Redisson.create(config);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>ZooKeeperLockConfig</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ZooKeeperLockConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;cloud.lock.zookeeper.url:localhost:2181&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;cloud.lock.zookeeper.timeout:1000&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> timeout;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;cloud.lock.zookeeper.retry:3&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> retry;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> CuratorFramework <span class=\"title function_\">zkClient</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ExponentialBackoffRetry</span> <span class=\"variable\">exponentialBackoffRetry</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ExponentialBackoffRetry</span>(timeout, retry);</span><br><span class=\"line\">        <span class=\"type\">CuratorFramework</span> <span class=\"variable\">curatorFramework</span> <span class=\"operator\">=</span> CuratorFrameworkFactory.newClient(url, exponentialBackoffRetry);</span><br><span class=\"line\">        curatorFramework.start();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curatorFramework;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p>AbstractLockService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractLockService</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 格式化生成的key，在生成加锁key时会经过该方法，并以返回的key作为最终加锁时的key</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> generatedKey 通过上下文对象自动生成的key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 格式化后的key</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title function_\">formatKey</span><span class=\"params\">(String generatedKey)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过LockContext的形式生成锁key再加锁</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> lockContexts 用于生成锁key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timeout      锁超时时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> unit         时间单位</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 锁对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> LockEntity <span class=\"title function_\">doLockByContext</span><span class=\"params\">(List&lt;LockContext&gt; lockContexts, Long timeout, TimeUnit unit)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> doLock(getLockKeys(lockContexts), timeout, unit);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LockEntity <span class=\"title function_\">doLock</span><span class=\"params\">(Set&lt;String&gt; keys)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> doLock(keys, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过锁keys进行加锁，由子类实现</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> keys    锁key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timeout 超时时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> unit    时间单位</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 锁对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> LockEntity <span class=\"title function_\">doLock</span><span class=\"params\">(Set&lt;String&gt; keys, Long timeout, TimeUnit unit)</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据方法及入参解析出LockContext列表</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> method 加锁的方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args   入参</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> LockContext列表</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> List&lt;LockContext&gt; <span class=\"title function_\">getLockContexts</span><span class=\"params\">(Method method, Object[] args)</span> &#123;</span><br><span class=\"line\">        Annotation[][] parameterAnnotations = method.getParameterAnnotations();</span><br><span class=\"line\">        ArrayList&lt;LockContext&gt; lockContexts = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; parameterAnnotations.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取参数注解，与参数一一对应</span></span><br><span class=\"line\">            Annotation[] annotations = parameterAnnotations[i];</span><br><span class=\"line\">            <span class=\"comment\">//找到@SyncArg注解</span></span><br><span class=\"line\">            <span class=\"type\">SyncArg</span> <span class=\"variable\">syncArg</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Annotation annotation : annotations) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (annotation <span class=\"keyword\">instanceof</span> SyncArg syncArgA) &#123;</span><br><span class=\"line\">                    syncArg = syncArgA;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (syncArg != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//注解存在则通过注解构造上下文对象</span></span><br><span class=\"line\">                <span class=\"type\">LockContext</span> <span class=\"variable\">lockContext</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LockContext</span>(syncArg, args[i]);</span><br><span class=\"line\">                lockContext.addParam(<span class=\"string\">&quot;method&quot;</span>, method);</span><br><span class=\"line\">                lockContexts.add(lockContext);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lockContexts;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过上下文对象列表生成key集合</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> lockContexts 上下文对象列表</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> key集合</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> HashSet&lt;String&gt; <span class=\"title function_\">getLockKeys</span><span class=\"params\">(List&lt;LockContext&gt; lockContexts)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//解析上下文列表，生成key</span></span><br><span class=\"line\">        HashSet&lt;String&gt; keys = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">SpelExpressionParser</span> <span class=\"variable\">parser</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SpelExpressionParser</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (LockContext lockContext : lockContexts) &#123;</span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">multi</span> <span class=\"operator\">=</span> lockContext.isMulti();</span><br><span class=\"line\">            <span class=\"type\">Object</span> <span class=\"variable\">arg</span> <span class=\"operator\">=</span> lockContext.getArg();</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">keyExpression</span> <span class=\"operator\">=</span> lockContext.getKeyExpression();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (multi &amp;&amp; arg <span class=\"keyword\">instanceof</span> Iterable&lt;?&gt; iterable) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//多对象模式且参数对象为Iterable时</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Object o : iterable) &#123;</span><br><span class=\"line\">                    <span class=\"type\">LockContext</span> <span class=\"variable\">singleContext</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LockContext</span>(o, keyExpression, <span class=\"literal\">false</span>, lockContext.getParams());</span><br><span class=\"line\">                    keys.add(formatKey(singleContext.getKey(parser)));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (multi &amp;&amp; arg <span class=\"keyword\">instanceof</span> Map&lt;?, ?&gt; map) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//多对象模式且参数对象为map时</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Map.Entry&lt;?, ?&gt; entry : map.entrySet()) &#123;</span><br><span class=\"line\">                    <span class=\"type\">LockContext</span> <span class=\"variable\">singleContext</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LockContext</span>(entry, keyExpression, <span class=\"literal\">false</span>, lockContext.getParams());</span><br><span class=\"line\">                    keys.add(formatKey(singleContext.getKey(parser)));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                keys.add(formatKey(lockContext.getKey(parser)));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keys;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>LockContext</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@Setter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LockContext</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 被加锁的参数对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object arg;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成key的Spel表达式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String keyExpression;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 是否为多对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> multi;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 上下文参数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Getter(AccessLevel.PACKAGE)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, Object&gt; params;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LockContext</span><span class=\"params\">(SyncArg syncArg, Object arg)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>(arg, syncArg.value(), syncArg.isMulti());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LockContext</span><span class=\"params\">(Object arg, String keyExpression, <span class=\"type\">boolean</span> multi)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>(arg, keyExpression, multi, <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LockContext</span><span class=\"params\">(Object arg, String keyExpression, <span class=\"type\">boolean</span> multi, Map&lt;String, Object&gt; params)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.arg = arg;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.keyExpression = keyExpression;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.multi = multi;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.params = params;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加上下文参数</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 用于链式调用</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LockContext <span class=\"title function_\">addParam</span><span class=\"params\">(String key, Object value)</span> &#123;</span><br><span class=\"line\">        params.put(key, value);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除上下文参数</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 用于链式调用</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LockContext <span class=\"title function_\">removeParam</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">        params.remove(key);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getKey(<span class=\"keyword\">new</span> <span class=\"title class_\">SpelExpressionParser</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成key</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> parser Spel表达式解析器</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getKey</span><span class=\"params\">(SpelExpressionParser parser)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">StandardEvaluationContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StandardEvaluationContext</span>();</span><br><span class=\"line\">        HashMap&lt;String, Object&gt; contextMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;(params);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!contextMap.containsKey(<span class=\"string\">&quot;arg&quot;</span>)) &#123;</span><br><span class=\"line\">            contextMap.put(<span class=\"string\">&quot;arg&quot;</span>, arg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        context.setVariables(contextMap);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parser.parseExpression(keyExpression).getValue(String.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>LockEntity</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LockEntity</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object lock;</span><br><span class=\"line\"></span><br><span class=\"line\">    LockEntity(Object lock) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.lock = lock;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unlock</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lock <span class=\"keyword\">instanceof</span> RLock rLock) &#123;</span><br><span class=\"line\">            rLock.unlock();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lock <span class=\"keyword\">instanceof</span> InterProcessLock interProcessLock) &#123;</span><br><span class=\"line\">            interProcessLock.release();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>RedissonLockService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedissonLockService</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractLockService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RedissonClient redissonClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">RedissonLockService</span><span class=\"params\">(RedissonClient redissonClient)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.redissonClient = redissonClient;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;@annotation(org.joker.commons.cloud.lock.annotation.RedisLock)&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doLockByContext</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;doLockByContext()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object <span class=\"title function_\">around</span><span class=\"params\">(ProceedingJoinPoint point)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取方法对象</span></span><br><span class=\"line\">        <span class=\"type\">MethodSignature</span> <span class=\"variable\">signature</span> <span class=\"operator\">=</span> (MethodSignature) point.getSignature();</span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> signature.getMethod();</span><br><span class=\"line\">        <span class=\"comment\">//解析用于生成锁的上下文</span></span><br><span class=\"line\">        List&lt;LockContext&gt; lockContexts = getLockContexts(method, point.getArgs());</span><br><span class=\"line\">        <span class=\"comment\">//加锁并执行</span></span><br><span class=\"line\">        <span class=\"type\">RedisLock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> method.getAnnotation(RedisLock.class);</span><br><span class=\"line\">        <span class=\"type\">LockEntity</span> <span class=\"variable\">lockEntity</span> <span class=\"operator\">=</span> doLockByContext(lockContexts, lock.timeout(), lock.unit());</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> point.proceed();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lockEntity.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">formatKey</span><span class=\"params\">(String generatedKey)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;cloud:lock:&quot;</span> + generatedKey;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LockEntity <span class=\"title function_\">doLock</span><span class=\"params\">(Set&lt;String&gt; keys, Long timeout, TimeUnit unit)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;RLock&gt; rLocks = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(keys.size());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String key : keys) &#123;</span><br><span class=\"line\">            rLocks.add(redissonClient.getLock(key));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">RLock</span> <span class=\"variable\">multiLock</span> <span class=\"operator\">=</span> redissonClient.getMultiLock(rLocks.toArray(<span class=\"keyword\">new</span> <span class=\"title class_\">RLock</span>[<span class=\"number\">0</span>]));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout != <span class=\"literal\">null</span> &amp;&amp; timeout &gt; <span class=\"number\">0</span> &amp;&amp; unit != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            multiLock.lock(timeout, unit);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            multiLock.lock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LockEntity</span>(multiLock);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>ZooKeeper</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ZooKeeperLockService</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractLockService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> CuratorFramework zkClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ZooKeeperLockService</span><span class=\"params\">(CuratorFramework zkClient)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.zkClient = zkClient;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;@annotation(org.joker.commons.cloud.lock.annotation.ZkLock)&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doLockByContext</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;doLockByContext()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object <span class=\"title function_\">around</span><span class=\"params\">(ProceedingJoinPoint point)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取方法对象</span></span><br><span class=\"line\">        <span class=\"type\">MethodSignature</span> <span class=\"variable\">signature</span> <span class=\"operator\">=</span> (MethodSignature) point.getSignature();</span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> signature.getMethod();</span><br><span class=\"line\">        <span class=\"comment\">//解析用于生成锁的上下文</span></span><br><span class=\"line\">        List&lt;LockContext&gt; lockContexts = getLockContexts(method, point.getArgs());</span><br><span class=\"line\">        <span class=\"comment\">//加锁并执行</span></span><br><span class=\"line\">        <span class=\"type\">ZkLock</span> <span class=\"variable\">zkLock</span> <span class=\"operator\">=</span> method.getAnnotation(ZkLock.class);</span><br><span class=\"line\">        <span class=\"type\">LockEntity</span> <span class=\"variable\">lockEntity</span> <span class=\"operator\">=</span> doLockByContext(lockContexts, zkLock.timeout(), zkLock.unit());</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> point.proceed();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lockEntity.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">formatKey</span><span class=\"params\">(String generatedKey)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;/cloud/lock/&quot;</span> + generatedKey;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LockEntity <span class=\"title function_\">doLock</span><span class=\"params\">(Set&lt;String&gt; lockKeys, Long timeout, TimeUnit unit)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">InterProcessMultiLock</span> <span class=\"variable\">multiLock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InterProcessMultiLock</span>(zkClient, lockKeys.stream().toList());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout != <span class=\"literal\">null</span> &amp;&amp; timeout &gt; <span class=\"number\">0</span> &amp;&amp; unit != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            multiLock.acquire(timeout, unit);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            multiLock.acquire();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LockEntity</span>(multiLock);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"测试效果\"><a class=\"markdownIt-Anchor\" href=\"#测试效果\">#</a> 测试效果</h2>\n<p>采用如下 Spring 服务类进行效果测试，其中 run 中为测试代码，表达式 “#arg.getClass ().getSimpleName ()+#arg.getId ()<br>\n” 以 id 作为唯一主键生成 key，当前示例下生成的 key 为 Usertest01。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Getter</span></span><br><span class=\"line\">    <span class=\"meta\">@Setter</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;test01&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;测试用户&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">(User user)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        log.info(user.getName());</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);<span class=\"comment\">//模拟业务过程</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RedisLock</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testRedisSync</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@SyncArg(&quot;#arg.getClass().getSimpleName()+#arg.getId()&quot;)</span> User user</span></span><br><span class=\"line\"><span class=\"params\">    )</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        test(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ZkLock</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testZooKeeperSync</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@SyncArg(&quot;#arg.getClass().getSimpleName()+#arg.getId()&quot;)</span> User user</span></span><br><span class=\"line\"><span class=\"params\">    )</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        test(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"不加锁\"><a class=\"markdownIt-Anchor\" href=\"#不加锁\">#</a> 不加锁</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestRunner</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CommandLineRunner</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestService testService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">(String... args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        TestService.<span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestService</span>.User();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">            testService.test(user);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>服务一：</p>\n<img data-src=\"/joker.github.io/2024/09/10/%E3%80%90%E5%88%86%E5%B8%83%E5%BC%8F%E3%80%91%E9%80%9A%E8%BF%87Zookeeper%E4%B8%8ERedisson%E5%AE%9E%E7%8E%B0Spring%E6%B3%A8%E8%A7%A3%E5%BC%8F%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/378a9d360acf6a6c560d3c2e9f68be60.png\" class=\"\" title=\"不加锁服务1log\">\n<p>服务二：</p>\n<img data-src=\"/joker.github.io/2024/09/10/%E3%80%90%E5%88%86%E5%B8%83%E5%BC%8F%E3%80%91%E9%80%9A%E8%BF%87Zookeeper%E4%B8%8ERedisson%E5%AE%9E%E7%8E%B0Spring%E6%B3%A8%E8%A7%A3%E5%BC%8F%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/248294a19780cc9e924184e26670a0c3.png\" class=\"\" title=\"不加锁服务2log\">\n<p>根据时间可以看到两个服务几乎同时在进行，如果存在变更数据的情况则可能存在出现数据不一致情况的风险。</p>\n<h3 id=\"使用redis锁\"><a class=\"markdownIt-Anchor\" href=\"#使用redis锁\">#</a> 使用 Redis 锁</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestRunner</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CommandLineRunner</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestService testService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">(String... args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        TestService.<span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestService</span>.User();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">            testService.testRedisSync(user);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>服务一：</p>\n<img data-src=\"/joker.github.io/2024/09/10/%E3%80%90%E5%88%86%E5%B8%83%E5%BC%8F%E3%80%91%E9%80%9A%E8%BF%87Zookeeper%E4%B8%8ERedisson%E5%AE%9E%E7%8E%B0Spring%E6%B3%A8%E8%A7%A3%E5%BC%8F%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/4507c4421a934baec554f92cea7b0038.png\" class=\"\" title=\"Redis锁服务1log\">\n<p>服务二：</p>\n<img data-src=\"/joker.github.io/2024/09/10/%E3%80%90%E5%88%86%E5%B8%83%E5%BC%8F%E3%80%91%E9%80%9A%E8%BF%87Zookeeper%E4%B8%8ERedisson%E5%AE%9E%E7%8E%B0Spring%E6%B3%A8%E8%A7%A3%E5%BC%8F%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/9158b26eab49184d53d500eb7c0e07b6.png\" class=\"\" title=\"Redis锁服务2log\">\n<p>根据时间可以看到两个服务在逐一有序地进行，能够实现锁的效果。</p>\n<h3 id=\"使用zookeeper锁\"><a class=\"markdownIt-Anchor\" href=\"#使用zookeeper锁\">#</a> 使用 ZooKeeper 锁</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestRunner</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CommandLineRunner</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestService testService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">(String... args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        TestService.<span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestService</span>.User();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">            testService.testZooKeeperSync(user);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>服务一：</p>\n<img data-src=\"/joker.github.io/2024/09/10/%E3%80%90%E5%88%86%E5%B8%83%E5%BC%8F%E3%80%91%E9%80%9A%E8%BF%87Zookeeper%E4%B8%8ERedisson%E5%AE%9E%E7%8E%B0Spring%E6%B3%A8%E8%A7%A3%E5%BC%8F%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/7ed3a36d886af2366487ddf9e679c224.png\" class=\"\" title=\"ZooKeeper服务1log\">\n<p>服务二：</p>\n<img data-src=\"/joker.github.io/2024/09/10/%E3%80%90%E5%88%86%E5%B8%83%E5%BC%8F%E3%80%91%E9%80%9A%E8%BF%87Zookeeper%E4%B8%8ERedisson%E5%AE%9E%E7%8E%B0Spring%E6%B3%A8%E8%A7%A3%E5%BC%8F%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/b00b26556a04f89fc3e1224726755a96.png\" class=\"\" title=\"ZooKeeper服务2log\">\n<p>同样能够实现锁的效果。</p>\n",
            "tags": [
                "后端",
                "Zookeeper",
                "Redis",
                "Redisson",
                "分布式锁"
            ]
        }
    ]
}